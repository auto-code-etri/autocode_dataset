abc.py,"#]+)'

# ABC iview programs are normally available for 14 days only.
"
abcnews.py,"# coding: utf-8

# m3u8 download

# Youtube Embeds

# m3u8 download

# The embedded YouTube video is blocked due to copyright issues

# inline.type == 'video'
'''(?x)
                    https?://
                        (?:
                            abcnews\.go\.com/
                            (?:
                                (?:[^/]+/)*video/(?P<display_id>[0-9a-z-]+)-|
                                video/(?:embed|itemfeed)\?.*?\bid=
                            )|
                            fivethirtyeight\.abcnews\.go\.com/video/embed/\d+/
                        )
                        (?P<id>\d+)
                    '''

"
abcotvs.py,"# coding: utf-8

# m3u8 download

# m3u8 download
"
academicearth.py,"#/]+)'
"
acast.py,"# coding: utf-8

#?]+)

#?]+)
'''(?x)
                    https?://
                        (?:
                            (?:(?:embed|www)\.)?acast\.com/|
                            play\.acast\.com/s/
                        )
                        (?P<channel>[^/]+)/(?P<id>[^/#?]+)
                    '''

'''(?x)
                    https?://
                        (?:
                            (?:www\.)?acast\.com/|
                            play\.acast\.com/s/
                        )
                        (?P<id>[^/#?]+)
                    '''
"
add-version.py,"#!/usr/bin/env python3
"
adn.py,"# coding: utf-8

# http://animationdigitalnetwork.fr/components/com_vodvideo/videojs/adn-vjs.min.js

# Sometimes authentication fails for no good reason, retry with

# a different random padding

# This usually goes away with a different random pkcs1pad, so retry
'''[Script Info]
ScriptType:V4.00
[V4 Styles]
Format: Name,Fontname,Fontsize,PrimaryColour,SecondaryColour,TertiaryColour,BackColour,Bold,Italic,BorderStyle,Outline,Shadow,Alignment,MarginL,MarginR,MarginV,AlphaLevel,Encoding
Style: Default,Arial,18,16777215,16777215,16777215,0,-1,0,1,1,0,2,20,20,20,0,0
[Events]
Format: Marked,Start,End,Style,Name,MarginL,MarginR,MarginV,Effect,Text'''
"
adobeconnect.py,"# coding: utf-8
"
adobepass.py,"# coding: utf-8

# TODO: eliminate code duplication with generic extractor and move

# redirection code into _download_webpage_handle

# TODO add support for other TV Providers

# Comcast page flow varies by video site and whether you

# are on Comcast's network.

# In general, if you're connecting from a Verizon-assigned IP,

# you will not actually pass your credentials.

# Some providers (e.g. DIRECTV NOW) have another meta refresh

# based redirect that should be followed.
"
adobetv.py,"# From https://helpx.adobe.com/acrobat/how-to/new-experience-acrobat-dc.html?set=acrobat--get-started--essential-beginners

# For both metadata and downloaded files the duration varies among

# formats. I just pick the max one
"
adultswim.py,"# coding: utf-8

#]+)(?:/(?P<episode_path>[^/?#]+))?'


# m3u8 download

#20, ""Embarrassed"" on Adult Swim.',

# m3u8 download

# m3u8 download

# m3u8 download

# CDN_TOKEN_APP_ID from:

# https://d2gg02c3xr550i.cloudfront.net/assets/asvp.e9c8bef24322d060ef87.bundle.js

# info['formats'].extend(self._extract_f4m_formats(

#     asset_url, video_id, f4m_id='hds', fatal=False))
'''query {
  getShowBySlug(slug:""%s"") {
    %%s
  }
}'''
'''title
    getVideoBySlug(slug:""%s"") {
      _id
      auth
      description
      duration
      episodeNumber
      launchDate
      mediaID
      seasonNumber
      poster
      title
      tvRating
    }'''
'''metaDescription
    title
    videos(first:1000,sort:[""episode_number""]) {
      edges {
        node {
           _id
           slug
        }
      }
    }'''
"
aenetworks.py,"# coding: utf-8

#&]+

# m3u8 download

# m3u8 download

#&]+)/?(?:[?#&]|$)'

#&]+)/?(?:[?#&]|$)'

# m3u8 download

#&]+)'

# m3u8 download
'''(?x)https?://
        (?:(?:www|play|watch)\.)?
        (?P<domain>
            (?:history(?:vault)?|aetv|mylifetime|lifetimemovieclub)\.com|
            fyi\.tv
        )/'''

'''(?P<id>
        shows/[^/]+/season-\d+/episode-\d+|
        (?:
            (?:movie|special)s/[^/]+|
            (?:shows/[^/]+/)?videos
        )/[^/?#&]+
    )'''

'''{
  %s(slug: ""%s"") {
    %s
  }
}'''
'''id
    display_title
    items {
      ... on ListVideoItem {
        doc {
          canonical
          id
        }
      }
    }'''


'''description
    id
    title
    episodes {
      canonical
      id
    }'''

"
aes.py,"#7 padding


#7 padding


#7 padding


# copy

# xor is (+) and (-)

# copy
""""""
    PKCS#7 padding

    @param {int[]} data        cleartext
    @returns {int[]}           padding data
    """"""


""""""
    Decrypt with aes in counter mode

    @param {int[]} data        cipher
    @param {int[]} key         16/24/32-Byte cipher key
    @param {instance} counter  Instance whose next_value function (@returns {int[]}  16-Byte block)
                               returns the next counter block
    @returns {int[]}           decrypted data
    """"""

""""""
    Decrypt with aes in CBC mode

    @param {int[]} data        cipher
    @param {int[]} key         16/24/32-Byte cipher key
    @param {int[]} iv          16-Byte IV
    @returns {int[]}           decrypted data
    """"""

""""""
    Encrypt with aes in CBC mode. Using PKCS#7 padding

    @param {int[]} data        cleartext
    @param {int[]} key         16/24/32-Byte cipher key
    @param {int[]} iv          16-Byte IV
    @returns {int[]}           encrypted data
    """"""

""""""
    Encrypt with aes in ECB mode. Using PKCS#7 padding

    @param {int[]} data        cleartext
    @param {int[]} key         16/24/32-Byte cipher key
    @returns {int[]}           encrypted data
    """"""

""""""
    Generate key schedule

    @param {int[]} data  16/24/32-Byte cipher key
    @returns {int[]}     176/208/240-Byte expanded key
    """"""

""""""
    Encrypt one block with aes

    @param {int[]} data          16-Byte state
    @param {int[]} expanded_key  176/208/240-Byte expanded key
    @returns {int[]}             16-Byte cipher
    """"""

""""""
    Decrypt one block with aes

    @param {int[]} data          16-Byte cipher
    @param {int[]} expanded_key  176/208/240-Byte expanded key
    @returns {int[]}             16-Byte state
    """"""

""""""
    Decrypt text
    - The first 8 Bytes of decoded 'data' are the 8 high Bytes of the counter
    - The cipher key is retrieved by encrypting the first 16 Byte of 'password'
      with the first 'key_size_bytes' Bytes from 'password' (if necessary filled with 0's)
    - Mode of operation is 'counter'

    @param {str} data                    Base64 encoded string
    @param {str,unicode} password        Password (will be encoded with utf-8)
    @param {int} key_size_bytes          Possible values: 16 for 128-Bit, 24 for 192-Bit or 32 for 256-Bit
    @returns {str}                       Decrypted data
    """"""
"
afreecatv.py,"# coding: utf-8

# non standard key

# PARTIAL_ADULT

# downloading won't end without this
'''(?x)
                    https?://
                        (?:
                            (?:(?:live|afbbs|www)\.)?afreeca(?:tv)?\.com(?::\d+)?
                            (?:
                                /app/(?:index|read_ucc_bbs)\.cgi|
                                /player/[Pp]layer\.(?:swf|html)
                            )\?.*?\bnTitleNo=|
                            vod\.afreecatv\.com/PLAYER/STATION/
                        )
                        (?P<id>\d+)
                    '''
"
airmozilla.py,"# coding: utf-8
"
aliexpress.py,"# coding: utf-8
"
aljazeera.py,"#]+)'

"
allocine.py,"# coding: utf-8
"
alphaporno.py,
alsace20tv.py,"# coding: utf-8

# 'md5': 'd91851bf9af73c0ad9b2cdf76c127fbb',

# 'md5': 'd91851bf9af73c0ad9b2cdf76c127fbb',
"
amara.py,"# coding: utf-8

# Youtube

# Vimeo

# Direct Link
"
amcnetworks.py,"# coding: utf-8

#&]+)'

# m3u8 download
"
americastestkitchen.py,"# coding: utf-8

# Metadata parsing behaves differently for newer episodes (705) as opposed to older episodes (582 above)

# ATK Season

# Cooks Country Season
"
amp.py,"# coding: utf-8

# parse Akamai Adaptive Media Player feed
"
animeondemand.py,"# German-speaking countries of Europe

# jap, OmU

# Film wording is used instead of Episode, ger/jap, Dub/OmU

# Episodes without titles, jap, OmU

# ger/jap, Dub/OmU, account required

# Full length film, non-series, ger/jap, Dub/OmU, account required

# Flash videos

# Extract teaser/trailer only when full episode is not available
"
anvato.py,"# coding: utf-8

# Copied from anvplayer.min.js

# from https://www.boston25news.com/news/watch-humpback-whale-breaches-right-next-to-fishing-boat-near-nh/817484874

# from https://sanfrancisco.cbslocal.com/2016/06/17/source-oakland-cop-on-leave-for-having-girlfriend-help-with-police-reports/

# See et() in anvplayer.min.js, which is an alias of getVideoJSON()
"
aol.py,"# coding: utf-8

# video with 5min ID

# m3u8 download

# video with vidible ID

# m3u8 download

# Yahoo video
"
apa.py,"# coding: utf-8
"
aparat.py,"# coding: utf-8

# multiple formats

# Provides more metadata
"
appleconnect.py,"# coding: utf-8
"
applepodcasts.py,"# coding: utf-8

# new page type 2021-11

# try pre 2021-11 page type: TODO: consider deleting if no longer used
"
appletrailers.py,"# json data only available from http://trailers.apple.com/trailers/feeds/data/15881.json

# The ' in the onClick attributes are not escaped, it couldn't be parsed

# like: http://trailers.apple.com/trailers/wb/gravity/


#39;')

# The src is a file pointing to the real video file

#section=(?P<id>%s)' % '|'.join(_SECTIONS)

#section=justadded',

#section=exclusive',

#section=justhd',

#section=mostpopular',

#section=moviestudios',
"
archiveorg.py,"#&]+)'

#1',

# Old jwplayer fallback

# HTML5 media fallback
"
arcpublishing.py,"# coding: utf-8

# https://www.adn.com/politics/2020/11/02/video-senate-candidates-campaign-in-anchorage-on-eve-of-election-day/

# https://www.bostonglobe.com/video/2020/12/30/metro/footage-released-showing-officer-talking-about-striking-protesters-with-car/

# https://www.actionnewsjax.com/video/live-stream/

# https://elcomercio.pe/videos/deportes/deporte-total-futbol-peruano-seleccion-peruana-la-valorizacion-de-los-peruanos-en-el-exterior-tras-un-2020-atipico-nnav-vr-video-noticia/

# https://www.clickondetroit.com/video/community/2020/05/15/events-surrounding-woodward-dream-cruise-being-canceled/

# https://www.wabi.tv/video/2020/12/30/trenton-company-making-equipment-pfizer-covid-vaccine/

# https://www.lateja.cr/el-mundo/video-china-aprueba-con-condiciones-su-primera/dfcbfa57-527f-45ff-a69b-35fe71054143/video/

# https://www.fifthdomain.com/video/2018/03/09/is-america-vulnerable-to-a-cyber-attack/

# https://www.vl.no/kultur/2020/12/09/en-melding-fra-en-lytter-endret-julelista-til-lewi-bergrud/

# https://www.14news.com/2020/12/30/whiskey-theft-caught-camera-henderson-liquor-store/

# https://www.theglobeandmail.com/world/video-ethiopian-woman-who-became-symbol-of-integration-in-italy-killed-on/

# https://www.pilotonline.com/460f2931-8130-4719-8ea1-ffcb2d7cb685-132.html

# https://arcpublishing.atlassian.net/wiki/spaces/POWA/overview
"
ard.py,"# coding: utf-8

# available till 26.07.2022

# m3u8 download

# audio

# audio

# determine video id from url

# Thumbnail is sometimes not present.

# It is in the mobile version, but that seems to use a different URL

# structure altogether.

# request JSON file

#&]+/)+(?P<id>[^/?#&]+))\.html'

# available till 7.01.2022
'''(?x)
            mediaCollection\.addMediaStream\([0-9]+,\s*[0-9]+,\s*""[^""]*"",\s*
            ""([^""]+)""'''
'''{
  playerPage(client: ""ard"", clipId: ""%s"") {
    blockedByFsk
    broadcastedOn
    maturityContentRating
    mediaCollection {
      _duration
      _geoblocked
      _isLive
      _mediaArray {
        _mediaStreamArray {
          _quality
          _server
          _stream
        }
      }
      _previewImage
      _subtitleUrl
      _type
    }
    show {
      title
    }
    synopsis
    title
    tracking {
      atiCustomVars {
        contentId
      }
    }
  }
}'''"
arkena.py,"# coding: utf-8

# See https://support.arkena.com/display/PLAY/Ways+to+embed+your+video

# Handle http://video.arkena.com/play2/embed/player URL

# https://video.qbrick.com/docs/api/examples/library-api.html
'''(?x)
                        https?://
                            (?:
                                video\.(?:arkena|qbrick)\.com/play2/embed/player\?|
                                play\.arkena\.com/(?:config|embed)/avp/v\d/player/media/(?P<id>[^/]+)/[^/]+/(?P<account_id>\d+)
                            )
                        '''
"
arnes.py,"# coding: utf-8
"
arte.py,"# coding: utf-8

# Language preference from most to least priority

# Reference: section 6.8 of

# https://www.arte.tv/sites/en/corporate/files/complete-technical-guidelines-arte-geie-v1-07-1.pdf

# original version in requested language, without subtitles

# original version in requested language, with partial subtitles in requested language

# original version in requested language, with subtitles for the deaf and hard-of-hearing in requested language

# non-original (dubbed) version in requested language, without subtitles

# non-original (dubbed) version in requested language, with subtitles partial subtitles in requested language

# non-original (dubbed) version in requested language, with subtitles for the deaf and hard-of-hearing in requested language

# original version in requested language, with partial subtitles in different language

# original version in requested language, with subtitles for the deaf and hard-of-hearing in different language

# original version in different language, with partial subtitles in requested language

# original version in different language, with subtitles for the deaf and hard-of-hearing in requested language

# original version in different language, without subtitles

# original version in different language, with partial subtitles in different language

# original version in different language, with subtitles for the deaf and hard-of-hearing in different language

#13',
'''(?x)
                    https?://
                        (?:
                            (?:www\.)?arte\.tv/(?P<lang>%(langs)s)/videos|
                            api\.arte\.tv/api/player/v\d+/config/(?P<lang_2>%(langs)s)
                        )
                        /(?P<id>\d{6}-\d{3}-[AF])
                    '''"
asiancrush.py,"# coding: utf-8
"
atresplayer.py,"# coding: utf-8
"
atttechchannel.py,"# rtmp download
"
atvat.py,"# coding: utf-8
"
audimedia.py,"# coding: utf-8

#]+)'

# TODO: handle s and e stage_mode (live streams and ended live streams)
"
audioboom.py,"# coding: utf-8
"
audiomack.py,"# coding: utf-8

# hosted on audiomack

# audiomack wrapper around soundcloud song

# Needs new test URL.

# 'info_dict': {

# 'id': '258901379',

# 'ext': 'mp3',

# 'description': 'mamba day freestyle for the legend Kobe Bryant ',

# 'title': 'Black Mamba Freestyle [Prod. By Danny Wolf]',

# 'uploader': 'ILOVEMAKONNEN',

# 'upload_date': '20160414',

# }

# URLs end with [uploader name]/song/[uploader title]

# this title is whatever the user types in, and is rarely

# the proper song title.  Real metadata is in the api response

# Request the extended version of the api for extra fields like artist and title

# API is inconsistent with errors

# Audiomack wraps a lot of soundcloud tracks in their branded wrapper

# if so, pass the work off to the soundcloud extractor

# Standard album playlist

# Album playlist ripped from fakeshoredrive with no metadata

# URLs end with [uploader name]/album/[uploader title]

# this title is whatever the user types in, and is rarely

# the proper song title.  Real metadata is in the api response

# There is no one endpoint for album metadata - instead it is included/repeated in each song's metadata

# Therefore we don't know how many songs the album has and must infi-loop until failure

# Get song's metadata

# Total failure, only occurs when url is totally wrong

# Won't happen in middle of valid playlist (next case)

# URL is good but song id doesn't exist - usually means end of playlist

# Pull out the album metadata and add to result (if it exists)
"
awaan.py,"# coding: utf-8

#/)?show/(?P<show_id>\d+)/[^/]+(?:/(?P<video_id>\d+)/(?P<season_id>\d+))?'


#/)?(?:video(?:/[^/]+)?|media|catchup/[^/]+/[^/]+)/(?P<id>\d+)'

#/video/%D8%B1%D8%AD%D9%84%D8%A9-%D8%A7%D9%84%D8%B9%D9%85%D8%B1-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9-1/17375',

#/)?live/(?P<id>\d+)'

# m3u8 download

#/)?program/(?:(?P<show_id>\d+)|season/(?P<season_id>\d+))'

#/program/205024/%D9%85%D8%AD%D8%A7%D8%B6%D8%B1%D8%A7%D8%AA-%D8%A7%D9%84%D8%B4%D9%8A%D8%AE-%D8%A7%D9%84%D8%B4%D8%B9%D8%B1%D8%A7%D9%88%D9%8A',
"
aws.py,"# coding: utf-8

# Task 1: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html

# Task 2: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html

# Task 3: http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html

# Task 4: http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html
"
azmedien.py,"# coding: utf-8

#video=

#video=0_7xjo9lf1',
'''(?x)
                    https?://
                        (?:www\.)?
                        (?P<host>
                            telezueri\.ch|
                            telebaern\.tv|
                            telem1\.ch
                        )/
                        [^/]+/
                        (?P<id>
                            [^/]+-(?P<article_id>\d+)
                        )
                        (?:
                            \#video=
                            (?P<kaltura_id>
                                [_0-9a-z]+
                            )
                        )?
                    '''

"
baidu.py,"# coding: utf-8
"
bandaichannel.py,"# coding: utf-8
"
bandcamp.py,"# coding: utf-8

#&]+)'

# free download

# no free download, mp3 128

# Stat URL generation algorithm is reverse engineered from

# download_*_bundle_*.js

#&]+))?'


# with escaped quote in title

# not all tracks have songs

# Only tracks with duration info have songs
"
bash-completion.py,"#!/usr/bin/env python

# for every long flag

# just using the special char
"
bbc.py,"# coding: utf-8

#]|

# Provides HQ HLS streams with even better quality that pc mediaset but fails

# with geolocation in some cases when it's even not geo restricted at all (e.g.

# http://www.bbc.co.uk/programmes/b06bp7lf). Also may fail with selectionunavailable.

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# iptv-all mediaset fails with geolocation however there is no geo restriction

# for this programme at all

# rtmp download

# compact player (https://github.com/ytdl-org/youtube-dl/issues/8147)

# rtmp download

# rtmp download

#p02frcc3',

#p055bc55',

# ASX playlist

# TODO: let expected_status be passed into _extract_xxx_formats() instead

# Direct link

# fallback to legacy playlist

#?]+)'


# article with multiple videos embedded with data-playable containing vpids

# article with multiple videos embedded with data-playable (more videos)

# article with multiple videos embedded with `new SMP()`

# broken

# single video embedded with data-playable containing vpid

# rtmp download

# article with single video embedded with data-playable containing XML playlist

# with direct video links as progressiveDownloadUrl (for now these are extracted)

# and playlist with f4m and m3u8 as streamingUrl

# single video embedded with data-playable containing XML playlists (regional section)

# single video from video playlist embedded with vxp-playlist-data JSON

# single video story with digitalData

# rtmp download

# single video story without digitalData

# rtmp download

# single video embedded with Morph

# m3u8 download

# single video with playlist.sxml URL in playlist param

# rtmp download

# article with multiple videos embedded with playlist.sxml in playlist param

# school report article with single video

# single video with playlist URL from weather section

# custom redirection to www.bbc.com

# also, video with window.__INITIAL_DATA__

# video with window.__INITIAL_DATA__ and value as JSON string

# single video article embedded with data-media-vpid

# bbcthreeConfig

# window.__PRELOADED_STATE__

# BBC Reel

# Direct links to media in media metadata (e.g.

# http://www.bbc.com/turkce/haberler/2015/06/150615_telabyad_kentin_cogu)

# TODO: there are also f4m and m3u8 streams incorporated in playlist.sxml

# Process playlist.sxml as legacy playlist

# article with multiple videos embedded with playlist.sxml (e.g.

# http://www.bbc.com/sport/0/football/34475836)

# news article with multiple videos embedded with data-playable

# data-playable with video vpid in settings.playlistObject.items (e.g.

# http://www.bbc.com/news/world-us-canada-34473351)

# data-playable without vpid but with a playlist.sxml URLs

# in otherSettings.playlist (e.g.

# http://www.bbc.com/turkce/multimedya/2015/10/151010_vid_ankara_patlama_ani)

# Some playlist URL may fail with 500, at the same time

# the other one may work fine (e.g.

# http://www.bbc.com/turkce/haberler/2015/06/150615_telabyad_kentin_cogu)

# http://www.bbc.co.uk/learningenglish/chinese/features/lingohack/ep-181227

# single video story (e.g. http://www.bbc.com/travel/story/20150625-sri-lankas-spicy-secret)

# digitalData may be missing (e.g. http://www.bbc.com/autos/story/20130513-hyundais-rock-star)

# bbc reel (e.g. https://www.bbc.com/reel/video/p07c6sb6/how-positive-thinking-is-harming-your-happiness)

# Morph based embed (e.g. http://www.bbc.co.uk/sport/live/olympics/36895975)

# There are several setPayload calls may be present but the video

# seems to be always related to the first one

# Multiple video article (e.g.

# http://www.bbc.co.uk/blogs/adamcurtis/entries/3662a707-0af9-3149-963f-47bea720b460)

# Multiple video article (e.g. http://www.bbc.com/news/world-europe-32668511)

# Single video article (e.g. http://www.bbc.com/news/video_and_audio/international)

# Multiple video playlist with single `now playing` entry (e.g.

# http://www.bbc.com/news/video_and_audio/must_see/33767813)

# Download single video if found media with asset id matching the video id from URL

# Fallback to the whole playlist

# all seasons

# explicit season

# all pages

# explicit page

# Available for over a year unlike 30 days for most other programmes

# all pages

# explicit page

# multipage playlist, explicit page

# multipage playlist, all pages
'''(?x)
                    https?://
                        (?:www\.)?bbc\.co\.uk/
                        (?:
                            programmes/(?!articles/)|
                            iplayer(?:/[^/]+)?/(?:episode/|playlist/)|
                            music/(?:clips|audiovideo/popular)[/#]|
                            radio/player/|
                            sounds/play/|
                            events/[^/]+/play/[^/]+/
                        )
                        (?P<id>%s)(?!/(?:episodes|broadcasts|clips))
                    '''
'''Judge Mindy Glazer: ""I'm sorry to see you here... I always wondered what happened to you""'''
'''Judge Mindy Glazer: ""I'm sorry to see you here... I always wondered what happened to you""'''"
beatport.py,"# coding: utf-8
"
beeg.py,"# api/v6 v1

# api/v6 v2

# api/v6 v2 w/o t
"
behindkink.py,"# coding: utf-8

#?_]+)'
"
bellmedia.py,"# coding: utf-8
'''(?x)https?://(?:www\.)?
        (?P<domain>
            (?:
                ctv|
                tsn|
                bnn(?:bloomberg)?|
                thecomedynetwork|
                discovery|
                discoveryvelocity|
                sciencechannel|
                investigationdiscovery|
                animalplanet|
                bravo|
                mtv|
                space|
                etalk|
                marilyn
            )\.ca|
            (?:much|cp24)\.com
        )/.*?(?:\b(?:vid(?:eoid)?|clipId)=|-vid|~|%7E|/(?:episode)?)(?P<id>[0-9]{6,})'''
"
bet.py,"# rtmp download

# rtmp download
"
bfi.py,"# coding: utf-8
"
bfmtv.py,"# coding: utf-8

#]+_%s[A-Z]-(?P<id>\d{12})\.html'
"
bibeltv.py,"# coding: utf-8
"
bigflix.py,"# coding: utf-8

# 2 formats

# multiple formats
"
bigo.py,"# coding: utf-8
"
bild.py,"# coding: utf-8
"
bilibili.py,"# coding: utf-8

#

#&]+)

# Tested in BiliBiliBangumiIE

#40062',

#100643',

# Title with double quotes

#6 ""Closer',

#6 ""Closer',

# Test metadata only

#6 ""Closer',

# Test metadata only

# new BV video id format

# backup URLs have lower priorities

# TODO 'view_count' requires deobfuscating Javascript

# Sometimes this API returns a JSONP response
'''(?x)
                    https?://
                        (?:(?:www|bangumi)\.)?
                        bilibili\.(?:tv|com)/
                        (?:
                            (?:
                                video/[aA][vV]|
                                anime/(?P<anime_id>\d+)/play\#
                            )(?P<id_bv>\d+)|
                            video/[bB][vV](?P<id>[^/?#&]+)
                        )
                    '''

"
biobiochiletv.py,"# coding: utf-8

# different uploader layout

# TODO: fix url_transparent information overriding

# 'uploader': 'Juan Pablo Echenique',

# empty m3u8 manifest
"
biqle.py,"# coding: utf-8

# Youtube embed
"
bitchute.py,"# coding: utf-8

#&]+)'

#&]+)'
"
bleacherreport.py,"# coding: utf-8
"
bloomberg.py,"# coding: utf-8

#]+)'


# The md5 checksum changes

# video ID in BPlayer(...)

# data-bmmrid=
"
bokecc.py,"# coding: utf-8

# no title provided in the webpage
"
bongacams.py,"# coding: utf-8

#]+)'
"
bostonglobe.py,"# coding: utf-8

# Embedded youtube video; we hand it off to the Generic extractor.

# <video data-brightcove-video-id=""5320421710001"" data-account=""245991542"" data-player=""SJWAiyYWg"" data-embed=""default"" class=""video-js"" controls itemscope itemtype=""http://schema.org/VideoObject"">
"
box.py,"# coding: utf-8

# try_get,

# TODO: extract `hls` formats

# for entry in (try_get(f, lambda x: x['representations']['entries'], list) or []):

#     entry_url_template = try_get(

#         entry, lambda x: x['content']['url_template'])

#     if not entry_url_template:

#         continue

#     representation = entry.get('representation')

#     if representation == 'dash':

#         TODO: append query to every fragment URL

#         formats.extend(self._extract_mpd_formats(

#             entry_url_template.replace('{+asset_path}', 'manifest.mpd'),

#             file_id, query=query))

"
bpb.py,"# coding: utf-8

# md5 fails in Python 2.6 due to buggy server response and wrong handling of urllib2
"
br.py,"# coding: utf-8

#]*?-(?P<id>av:[0-9a-f]{24})'

""""""{
  viewer {
    clip(id: ""%s"") {
      title
      description
      duration
      createdAt
      ageRestriction
      videoFiles {
        edges {
          node {
            publicLocation
            fileSize
            videoProfile {
              width
              height
              bitrate
              encoding
            }
          }
        }
      }
      captionFiles {
        edges {
          node {
            publicLocation
          }
        }
      }
      teaserImages {
        edges {
          node {
            imageFiles {
              edges {
                node {
                  publicLocation
                  width
                  height
                }
              }
            }
          }
        }
      }
    }
  }
}"""""""
bravotv.py,"# coding: utf-8

#]+)'

#&""\']+)', webpage)
"
breakcom.py,"#&]|$)'

# youtube embed
"
brightcove.py,"# coding: utf-8

# From http://www.8tv.cat/8aldia/videos/xavier-sala-i-martin-aquesta-tarda-a-8-al-dia/

# From http://medianetwork.oracle.com/video/player/1785452137001

# From http://mashable.com/2013/10/26/thermoelectric-bracelet-lets-you-control-your-body-temperature/

# 'uploader': 'Mashable',

# test that the default referer works

# from http://national.ballet.ca/interact/video/Lost_in_Motion_II/

# test flv videos served by akamaihd.net

# From http://www.redbull.com/en/bike/stories/1331655643987/replay-uci-dh-world-cup-2014-from-fort-william

#__youtubedl_smuggle=%7B%22Referer%22%3A+%22http%3A%2F%2Fwww.redbull.com%2Fen%2Fbike%2Fstories%2F1331655643987%2Freplay-uci-dh-world-cup-2014-from-fort-william%22%7D',

# The md5 checksum changes on each download

# playlist with 'videoList'

# from http://support.brightcove.com/en/video-cloud/docs/playlist-support-single-video-players

# playlist with 'playlistTab' (https://github.com/ytdl-org/youtube-dl/issues/9965)

# playerID inferred from bcpid

# from http://www.un.org/chinese/News/story.asp?NewsID=27724

# Tested in GenericIE

# Fix up some stupid HTML, see https://github.com/ytdl-org/youtube-dl/issues/1553

# Fix up some stupid XML, see https://github.com/ytdl-org/youtube-dl/issues/1608

# remove namespace to simplify extraction

# Not all pages define this value

# These fields hold the id of the video

# UUID is also possible for videoPlayer (e.g.

# http://www.popcornflix.com/hoodies-vs-hooligans/7f2d2b87-bbf2-4623-acfb-ea942b4f01dd

# or http://www8.hp.com/cn/zh/home.html)

# The layout of JS is as follows:

# customBC.createVideo = function (width, height, playerID, playerKey, videoPlayer, VideoRandomID) {

#   // build Brightcove <object /> XML

# }

# skipping width and height

# playerID

# playerKey begins with AQ and is 50 characters

# in length, however it's appended to itself

# in places, so truncate

# @videoPlayer

# Some sites don't add it, we can't download with this url, for example:

# http://www.ktvu.com/videos/news/raw-video-caltrain-releases-video-of-man-almost/vCTZdY/

# Change the 'videoId' and others field to '@videoPlayer'

# Change bckey (used by bcove.me urls) to playerKey

# We set the original url as the default 'Referer' header

# TODO: figure out if it's possible to extract playlistId from playerKey

# elif 'playerKey' in query:

#     player_key = query['playerKey']

#     return self._get_playlist_info(player_key[0])

# with rtmp streams

# m3u8 download

# playlist stream

# m3u8 download

# ref: prefixed video id

# non numeric ref: prefixed video id

# unavailable video without message but with error_code

# Reference:

# 1. http://docs.brightcove.com/en/video-cloud/brightcove-player/guides/publish-video.html#setvideoiniframe

# 2. http://docs.brightcove.com/en/video-cloud/brightcove-player/guides/publish-video.html#tag

# 3. http://docs.brightcove.com/en/video-cloud/brightcove-player/guides/publish-video.html#setvideousingjavascript

# 4. http://docs.brightcove.com/en/video-cloud/brightcove-player/guides/in-page-embed-player-implementation.html

# 5. https://support.brightcove.com/en/video-cloud/docs/dynamically-assigning-videos-player


# Look for iframe embeds [1]

# Look for <video> tags [2] and embed_in_page embeds [3]

# [2] looks like:

# According to examples from [4] it's unclear whether video id

# may be optional and what to do when it is

# Some brightcove videos may be embedded with video tag only and

# without script tag or any mentioning of brightcove at all. Such

# embeds are considered ambiguous since they are matched based only

# on data-video-id and data-account attributes and in the wild may

# not be brightcove embeds at all. Let's check reconstructed

# brightcove URLs in case of such embeds and only process valid

# ones. By this we ensure there is indeed a brightcove embed.

# https://support.brightcove.com/playback-api-video-fields-reference#key_systems_object
'''(?x)customBC\.createVideo\(
                .*?                                                  # skipping width and height
                [""\'](?P<playerID>\d+)[""\']\s*,\s*                   # playerID
                [""\'](?P<playerKey>AQ[^""\']{48})[^""\']*[""\']\s*,\s*  # playerKey begins with AQ and is 50 characters
                                                                     # in length, however it's appended to itself
                                                                     # in places, so truncate
                [""\'](?P<videoID>\d+)[""\']                           # @videoPlayer
            '''
'''(?x)
                <meta\s+
                    (?:property|itemprop)=([\'""])(?:og:video|embedURL)\1[^>]+
                    content=([\'""])(?P<url>https?://(?:secure|c)\.brightcove.com/(?:(?!\2).)+)\2
            '''
'''(?sx)<object
            (?:
                [^>]+?class=[\'""][^>]*?BrightcoveExperience.*?[\'""] |
                [^>]*?>\s*<param\s+name=""movie""\s+value=""https?://[^/]*brightcove\.com/
            ).+?>\s*</object>'''
'''(?isx)
                    (<video(?:-js)?\s+[^>]*\bdata-video-id\s*=\s*['""]?[^>]+>)
                    (?:.*?
                        (<script[^>]+
                            src=[""\'](?:https?:)?//players\.brightcove\.net/
                            (\d+)/([^/]+)_([^/]+)/index(?:\.min)?\.js
                        )
                    )?
                '''""""""
        Build a Brightcove url from a xml string containing
        <object class=""BrightcoveExperience"">{params}</object>
        """"""


""""""Try to extract the brightcove url from the webpage, returns None
        if it can't be found
        """"""

""""""Return a list of all Brightcove URLs from the webpage """"""

"
buildserver.py,"#!/usr/bin/python3


# These are not used outside of buildserver.py thus not in compat.py


# Python 2

# Python 2

# return

# dwControl

# dwEventType

# lpEventData,

# lpContext,

# args = [argv_raw[i].value for i in range(argc)]

#subprocess.check_output([os.path.join(self.pythonPath, 'python.exe'), 'setup.py', 'py2exe'],

#                        cwd=self.buildPath)

# They're the same, no more caching.

"
businessinsider.py,"# coding: utf-8

#&]+)'
"
buzzfeed.py,"# coding: utf-8

#]*?/(?P<id>[^?#]+)'

# Got enough YouTube download tests

#.eq7pX0BAmK',
"
byutv.py,"#&]+))?'

# ooyalaVOD

# dvr
"
c56.py,"# coding: utf-8
"
cache.py,"# Backward compatibility

# No cache available

"
camdemy.py,"# coding: utf-8

# single file

# With non-empty description

# webpage returns ""No permission or not login""

# External source (YouTube)

# Some URLs return ""No permission or not login"" in a webpage despite being

# freely available via oembed JSON URL (e.g. http://www.camdemy.com/media/13885)

# links with trailing slash

# links without trailing slash

# and multi-page

# with displayMode parameter. For testing the codes to add parameters

# Add displayMode=list so that all links are displayed in a single page
"
cammodels.py,"# coding: utf-8

#&]+)'

# hls skips fragments, preferring rtmp
"
camtube.py,"# coding: utf-8

#&]+)'
"
camwithher.py,"# Video URL construction algorithm is reverse-engineered from cwhplayer.swf
"
canalc2.py,"# coding: utf-8
"
canalplus.py,"# coding: utf-8

# ExtractorError,

# HEADRequest,

# Only works for direct mp4 URLs

# geo restricted, bypassed

# _, fmt_url = next(iter(media['VIDEOS'].items()))

# if '/geo' in fmt_url.lower():

#     response = self._request_webpage(

#         HEADRequest(fmt_url), video_id,

#         'Checking if the video is georestricted')

#     if '/blocage' in response.geturl():

#         raise ExtractorError(

#             'The video is not available in your country',

#             expected=True)


# the secret extracted from ya function in http://player.canalplus.fr/common/js/canalPlayer.js
"
canvas.py,"#&]+)'

# Old API endpoint, serves more formats but may fail for some videos

# New API endpoint

#&]+)'

# with subtitles

#&]+)'

# Available via old API endpoint

# Only available via new API endpoint

# Sometimes authentication fails for no good reason, retry

# When requesting a token, no actual token is returned, but the

# necessary cookies are set.

#&]+)'
"
carambatv.py,"# coding: utf-8

#&]+)'

# duration reported by videomore is incorrect
"
cartoonnetwork.py,"# coding: utf-8

#]+)-(?:clip|episode)\.html'

# m3u8 download
"
casefold.py,"# coding: utf-8

# Below is included the text of icu/CaseFolding.txt retrieved from

# https://github.com/unicode-org/icu/blob/main/icu4c/source/data/unidata/CaseFolding.txt

# In case newly foldable Unicode characters are defined, paste the new version

# of the text inside the ''' marks.

# The text is expected to have only blank lines andlines with 1st character #,

# all ignored, and fold definitions like this:

# `from_hex_code; space_separated_to_hex_code_list; comment`


# CaseFolding-15.0.0.txt

# Date: 2022-02-02, 23:35:35 GMT

# © 2022 Unicode®, Inc.

# Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.

# For terms of use, see https://www.unicode.org/terms_of_use.html

#

# Unicode Character Database

#   For documentation, see https://www.unicode.org/reports/tr44/

#

# Case Folding Properties

#

# This file is a supplement to the UnicodeData file.

# It provides a case folding mapping generated from the Unicode Character Database.

# If all characters are mapped according to the full mapping below, then

# case differences (according to UnicodeData.txt and SpecialCasing.txt)

# are eliminated.

#

# The data supports both implementations that require simple case foldings

# (where string lengths don't change), and implementations that allow full case folding

# (where string lengths may grow). Note that where they can be supported, the

# full case foldings are superior: for example, they allow ""MASSE"" and ""Maße"" to match.

#

# All code points not listed in this file map to themselves.

#

# NOTE: case folding does not preserve normalization formats!

#

# For information on case folding, including how to have case folding

# preserve normalization formats, see Section 3.13 Default Case Algorithms in

# The Unicode Standard.

#

# ================================================================================

# Format

# ================================================================================

# The entries in this file are in the following machine-readable format:

#

# <code>; <status>; <mapping>; # <name>

#

# The status field is:

# C: common case folding, common mappings shared by both simple and full mappings.

# F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.

# S: simple case folding, mappings to single characters where different from F.

# T: special case for uppercase I and dotted uppercase I

#    - For non-Turkic languages, this mapping is normally not used.

#    - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.

#      Note that the Turkic mappings do not maintain canonical equivalence without additional processing.

#      See the discussions of case mapping in the Unicode Standard for more information.

#

# Usage:

#  A. To do a simple case folding, use the mappings with status C + S.

#  B. To do a full case folding, use the mappings with status C + F.

#

#    The mappings with status T can be used or omitted depending on the desired case-folding

#    behavior. (The default option is to exclude them.)

#

# =================================================================


# Property: Case_Folding


#  All code points not explicitly listed for Case_Folding

#  have the value C for the status field, and the code point itself for the mapping field.


# =================================================================

# LATIN CAPITAL LETTER A

# LATIN CAPITAL LETTER B

# LATIN CAPITAL LETTER C

# LATIN CAPITAL LETTER D

# LATIN CAPITAL LETTER E

# LATIN CAPITAL LETTER F

# LATIN CAPITAL LETTER G

# LATIN CAPITAL LETTER H

# LATIN CAPITAL LETTER I

# LATIN CAPITAL LETTER I

# LATIN CAPITAL LETTER J

# LATIN CAPITAL LETTER K

# LATIN CAPITAL LETTER L

# LATIN CAPITAL LETTER M

# LATIN CAPITAL LETTER N

# LATIN CAPITAL LETTER O

# LATIN CAPITAL LETTER P

# LATIN CAPITAL LETTER Q

# LATIN CAPITAL LETTER R

# LATIN CAPITAL LETTER S

# LATIN CAPITAL LETTER T

# LATIN CAPITAL LETTER U

# LATIN CAPITAL LETTER V

# LATIN CAPITAL LETTER W

# LATIN CAPITAL LETTER X

# LATIN CAPITAL LETTER Y

# LATIN CAPITAL LETTER Z

# MICRO SIGN

# LATIN CAPITAL LETTER A WITH GRAVE

# LATIN CAPITAL LETTER A WITH ACUTE

# LATIN CAPITAL LETTER A WITH CIRCUMFLEX

# LATIN CAPITAL LETTER A WITH TILDE

# LATIN CAPITAL LETTER A WITH DIAERESIS

# LATIN CAPITAL LETTER A WITH RING ABOVE

# LATIN CAPITAL LETTER AE

# LATIN CAPITAL LETTER C WITH CEDILLA

# LATIN CAPITAL LETTER E WITH GRAVE

# LATIN CAPITAL LETTER E WITH ACUTE

# LATIN CAPITAL LETTER E WITH CIRCUMFLEX

# LATIN CAPITAL LETTER E WITH DIAERESIS

# LATIN CAPITAL LETTER I WITH GRAVE

# LATIN CAPITAL LETTER I WITH ACUTE

# LATIN CAPITAL LETTER I WITH CIRCUMFLEX

# LATIN CAPITAL LETTER I WITH DIAERESIS

# LATIN CAPITAL LETTER ETH

# LATIN CAPITAL LETTER N WITH TILDE

# LATIN CAPITAL LETTER O WITH GRAVE

# LATIN CAPITAL LETTER O WITH ACUTE

# LATIN CAPITAL LETTER O WITH CIRCUMFLEX

# LATIN CAPITAL LETTER O WITH TILDE

# LATIN CAPITAL LETTER O WITH DIAERESIS

# LATIN CAPITAL LETTER O WITH STROKE

# LATIN CAPITAL LETTER U WITH GRAVE

# LATIN CAPITAL LETTER U WITH ACUTE

# LATIN CAPITAL LETTER U WITH CIRCUMFLEX

# LATIN CAPITAL LETTER U WITH DIAERESIS

# LATIN CAPITAL LETTER Y WITH ACUTE

# LATIN CAPITAL LETTER THORN

# LATIN SMALL LETTER SHARP S

# LATIN CAPITAL LETTER A WITH MACRON

# LATIN CAPITAL LETTER A WITH BREVE

# LATIN CAPITAL LETTER A WITH OGONEK

# LATIN CAPITAL LETTER C WITH ACUTE

# LATIN CAPITAL LETTER C WITH CIRCUMFLEX

# LATIN CAPITAL LETTER C WITH DOT ABOVE

# LATIN CAPITAL LETTER C WITH CARON

# LATIN CAPITAL LETTER D WITH CARON

# LATIN CAPITAL LETTER D WITH STROKE

# LATIN CAPITAL LETTER E WITH MACRON

# LATIN CAPITAL LETTER E WITH BREVE

# LATIN CAPITAL LETTER E WITH DOT ABOVE

# LATIN CAPITAL LETTER E WITH OGONEK

# LATIN CAPITAL LETTER E WITH CARON

# LATIN CAPITAL LETTER G WITH CIRCUMFLEX

# LATIN CAPITAL LETTER G WITH BREVE

# LATIN CAPITAL LETTER G WITH DOT ABOVE

# LATIN CAPITAL LETTER G WITH CEDILLA

# LATIN CAPITAL LETTER H WITH CIRCUMFLEX

# LATIN CAPITAL LETTER H WITH STROKE

# LATIN CAPITAL LETTER I WITH TILDE

# LATIN CAPITAL LETTER I WITH MACRON

# LATIN CAPITAL LETTER I WITH BREVE

# LATIN CAPITAL LETTER I WITH OGONEK

# LATIN CAPITAL LETTER I WITH DOT ABOVE

# LATIN CAPITAL LETTER I WITH DOT ABOVE

# LATIN CAPITAL LIGATURE IJ

# LATIN CAPITAL LETTER J WITH CIRCUMFLEX

# LATIN CAPITAL LETTER K WITH CEDILLA

# LATIN CAPITAL LETTER L WITH ACUTE

# LATIN CAPITAL LETTER L WITH CEDILLA

# LATIN CAPITAL LETTER L WITH CARON

# LATIN CAPITAL LETTER L WITH MIDDLE DOT

# LATIN CAPITAL LETTER L WITH STROKE

# LATIN CAPITAL LETTER N WITH ACUTE

# LATIN CAPITAL LETTER N WITH CEDILLA

# LATIN CAPITAL LETTER N WITH CARON

# LATIN SMALL LETTER N PRECEDED BY APOSTROPHE

# LATIN CAPITAL LETTER ENG

# LATIN CAPITAL LETTER O WITH MACRON

# LATIN CAPITAL LETTER O WITH BREVE

# LATIN CAPITAL LETTER O WITH DOUBLE ACUTE

# LATIN CAPITAL LIGATURE OE

# LATIN CAPITAL LETTER R WITH ACUTE

# LATIN CAPITAL LETTER R WITH CEDILLA

# LATIN CAPITAL LETTER R WITH CARON

# LATIN CAPITAL LETTER S WITH ACUTE

# LATIN CAPITAL LETTER S WITH CIRCUMFLEX

# LATIN CAPITAL LETTER S WITH CEDILLA

# LATIN CAPITAL LETTER S WITH CARON

# LATIN CAPITAL LETTER T WITH CEDILLA

# LATIN CAPITAL LETTER T WITH CARON

# LATIN CAPITAL LETTER T WITH STROKE

# LATIN CAPITAL LETTER U WITH TILDE

# LATIN CAPITAL LETTER U WITH MACRON

# LATIN CAPITAL LETTER U WITH BREVE

# LATIN CAPITAL LETTER U WITH RING ABOVE

# LATIN CAPITAL LETTER U WITH DOUBLE ACUTE

# LATIN CAPITAL LETTER U WITH OGONEK

# LATIN CAPITAL LETTER W WITH CIRCUMFLEX

# LATIN CAPITAL LETTER Y WITH CIRCUMFLEX

# LATIN CAPITAL LETTER Y WITH DIAERESIS

# LATIN CAPITAL LETTER Z WITH ACUTE

# LATIN CAPITAL LETTER Z WITH DOT ABOVE

# LATIN CAPITAL LETTER Z WITH CARON

# LATIN SMALL LETTER LONG S

# LATIN CAPITAL LETTER B WITH HOOK

# LATIN CAPITAL LETTER B WITH TOPBAR

# LATIN CAPITAL LETTER TONE SIX

# LATIN CAPITAL LETTER OPEN O

# LATIN CAPITAL LETTER C WITH HOOK

# LATIN CAPITAL LETTER AFRICAN D

# LATIN CAPITAL LETTER D WITH HOOK

# LATIN CAPITAL LETTER D WITH TOPBAR

# LATIN CAPITAL LETTER REVERSED E

# LATIN CAPITAL LETTER SCHWA

# LATIN CAPITAL LETTER OPEN E

# LATIN CAPITAL LETTER F WITH HOOK

# LATIN CAPITAL LETTER G WITH HOOK

# LATIN CAPITAL LETTER GAMMA

# LATIN CAPITAL LETTER IOTA

# LATIN CAPITAL LETTER I WITH STROKE

# LATIN CAPITAL LETTER K WITH HOOK

# LATIN CAPITAL LETTER TURNED M

# LATIN CAPITAL LETTER N WITH LEFT HOOK

# LATIN CAPITAL LETTER O WITH MIDDLE TILDE

# LATIN CAPITAL LETTER O WITH HORN

# LATIN CAPITAL LETTER OI

# LATIN CAPITAL LETTER P WITH HOOK

# LATIN LETTER YR

# LATIN CAPITAL LETTER TONE TWO

# LATIN CAPITAL LETTER ESH

# LATIN CAPITAL LETTER T WITH HOOK

# LATIN CAPITAL LETTER T WITH RETROFLEX HOOK

# LATIN CAPITAL LETTER U WITH HORN

# LATIN CAPITAL LETTER UPSILON

# LATIN CAPITAL LETTER V WITH HOOK

# LATIN CAPITAL LETTER Y WITH HOOK

# LATIN CAPITAL LETTER Z WITH STROKE

# LATIN CAPITAL LETTER EZH

# LATIN CAPITAL LETTER EZH REVERSED

# LATIN CAPITAL LETTER TONE FIVE

# LATIN CAPITAL LETTER DZ WITH CARON

# LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON

# LATIN CAPITAL LETTER LJ

# LATIN CAPITAL LETTER L WITH SMALL LETTER J

# LATIN CAPITAL LETTER NJ

# LATIN CAPITAL LETTER N WITH SMALL LETTER J

# LATIN CAPITAL LETTER A WITH CARON

# LATIN CAPITAL LETTER I WITH CARON

# LATIN CAPITAL LETTER O WITH CARON

# LATIN CAPITAL LETTER U WITH CARON

# LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON

# LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE

# LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON

# LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE

# LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON

# LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON

# LATIN CAPITAL LETTER AE WITH MACRON

# LATIN CAPITAL LETTER G WITH STROKE

# LATIN CAPITAL LETTER G WITH CARON

# LATIN CAPITAL LETTER K WITH CARON

# LATIN CAPITAL LETTER O WITH OGONEK

# LATIN CAPITAL LETTER O WITH OGONEK AND MACRON

# LATIN CAPITAL LETTER EZH WITH CARON

# LATIN SMALL LETTER J WITH CARON

# LATIN CAPITAL LETTER DZ

# LATIN CAPITAL LETTER D WITH SMALL LETTER Z

# LATIN CAPITAL LETTER G WITH ACUTE

# LATIN CAPITAL LETTER HWAIR

# LATIN CAPITAL LETTER WYNN

# LATIN CAPITAL LETTER N WITH GRAVE

# LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE

# LATIN CAPITAL LETTER AE WITH ACUTE

# LATIN CAPITAL LETTER O WITH STROKE AND ACUTE

# LATIN CAPITAL LETTER A WITH DOUBLE GRAVE

# LATIN CAPITAL LETTER A WITH INVERTED BREVE

# LATIN CAPITAL LETTER E WITH DOUBLE GRAVE

# LATIN CAPITAL LETTER E WITH INVERTED BREVE

# LATIN CAPITAL LETTER I WITH DOUBLE GRAVE

# LATIN CAPITAL LETTER I WITH INVERTED BREVE

# LATIN CAPITAL LETTER O WITH DOUBLE GRAVE

# LATIN CAPITAL LETTER O WITH INVERTED BREVE

# LATIN CAPITAL LETTER R WITH DOUBLE GRAVE

# LATIN CAPITAL LETTER R WITH INVERTED BREVE

# LATIN CAPITAL LETTER U WITH DOUBLE GRAVE

# LATIN CAPITAL LETTER U WITH INVERTED BREVE

# LATIN CAPITAL LETTER S WITH COMMA BELOW

# LATIN CAPITAL LETTER T WITH COMMA BELOW

# LATIN CAPITAL LETTER YOGH

# LATIN CAPITAL LETTER H WITH CARON

# LATIN CAPITAL LETTER N WITH LONG RIGHT LEG

# LATIN CAPITAL LETTER OU

# LATIN CAPITAL LETTER Z WITH HOOK

# LATIN CAPITAL LETTER A WITH DOT ABOVE

# LATIN CAPITAL LETTER E WITH CEDILLA

# LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON

# LATIN CAPITAL LETTER O WITH TILDE AND MACRON

# LATIN CAPITAL LETTER O WITH DOT ABOVE

# LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON

# LATIN CAPITAL LETTER Y WITH MACRON

# LATIN CAPITAL LETTER A WITH STROKE

# LATIN CAPITAL LETTER C WITH STROKE

# LATIN CAPITAL LETTER L WITH BAR

# LATIN CAPITAL LETTER T WITH DIAGONAL STROKE

# LATIN CAPITAL LETTER GLOTTAL STOP

# LATIN CAPITAL LETTER B WITH STROKE

# LATIN CAPITAL LETTER U BAR

# LATIN CAPITAL LETTER TURNED V

# LATIN CAPITAL LETTER E WITH STROKE

# LATIN CAPITAL LETTER J WITH STROKE

# LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL

# LATIN CAPITAL LETTER R WITH STROKE

# LATIN CAPITAL LETTER Y WITH STROKE

# COMBINING GREEK YPOGEGRAMMENI

# GREEK CAPITAL LETTER HETA

# GREEK CAPITAL LETTER ARCHAIC SAMPI

# GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA

# GREEK CAPITAL LETTER YOT

# GREEK CAPITAL LETTER ALPHA WITH TONOS

# GREEK CAPITAL LETTER EPSILON WITH TONOS

# GREEK CAPITAL LETTER ETA WITH TONOS

# GREEK CAPITAL LETTER IOTA WITH TONOS

# GREEK CAPITAL LETTER OMICRON WITH TONOS

# GREEK CAPITAL LETTER UPSILON WITH TONOS

# GREEK CAPITAL LETTER OMEGA WITH TONOS

# GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS

# GREEK CAPITAL LETTER ALPHA

# GREEK CAPITAL LETTER BETA

# GREEK CAPITAL LETTER GAMMA

# GREEK CAPITAL LETTER DELTA

# GREEK CAPITAL LETTER EPSILON

# GREEK CAPITAL LETTER ZETA

# GREEK CAPITAL LETTER ETA

# GREEK CAPITAL LETTER THETA

# GREEK CAPITAL LETTER IOTA

# GREEK CAPITAL LETTER KAPPA

# GREEK CAPITAL LETTER LAMDA

# GREEK CAPITAL LETTER MU

# GREEK CAPITAL LETTER NU

# GREEK CAPITAL LETTER XI

# GREEK CAPITAL LETTER OMICRON

# GREEK CAPITAL LETTER PI

# GREEK CAPITAL LETTER RHO

# GREEK CAPITAL LETTER SIGMA

# GREEK CAPITAL LETTER TAU

# GREEK CAPITAL LETTER UPSILON

# GREEK CAPITAL LETTER PHI

# GREEK CAPITAL LETTER CHI

# GREEK CAPITAL LETTER PSI

# GREEK CAPITAL LETTER OMEGA

# GREEK CAPITAL LETTER IOTA WITH DIALYTIKA

# GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA

# GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS

# GREEK SMALL LETTER FINAL SIGMA

# GREEK CAPITAL KAI SYMBOL

# GREEK BETA SYMBOL

# GREEK THETA SYMBOL

# GREEK PHI SYMBOL

# GREEK PI SYMBOL

# GREEK LETTER ARCHAIC KOPPA

# GREEK LETTER STIGMA

# GREEK LETTER DIGAMMA

# GREEK LETTER KOPPA

# GREEK LETTER SAMPI

# COPTIC CAPITAL LETTER SHEI

# COPTIC CAPITAL LETTER FEI

# COPTIC CAPITAL LETTER KHEI

# COPTIC CAPITAL LETTER HORI

# COPTIC CAPITAL LETTER GANGIA

# COPTIC CAPITAL LETTER SHIMA

# COPTIC CAPITAL LETTER DEI

# GREEK KAPPA SYMBOL

# GREEK RHO SYMBOL

# GREEK CAPITAL THETA SYMBOL

# GREEK LUNATE EPSILON SYMBOL

# GREEK CAPITAL LETTER SHO

# GREEK CAPITAL LUNATE SIGMA SYMBOL

# GREEK CAPITAL LETTER SAN

# GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL

# GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL

# GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL

# CYRILLIC CAPITAL LETTER IE WITH GRAVE

# CYRILLIC CAPITAL LETTER IO

# CYRILLIC CAPITAL LETTER DJE

# CYRILLIC CAPITAL LETTER GJE

# CYRILLIC CAPITAL LETTER UKRAINIAN IE

# CYRILLIC CAPITAL LETTER DZE

# CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I

# CYRILLIC CAPITAL LETTER YI

# CYRILLIC CAPITAL LETTER JE

# CYRILLIC CAPITAL LETTER LJE

# CYRILLIC CAPITAL LETTER NJE

# CYRILLIC CAPITAL LETTER TSHE

# CYRILLIC CAPITAL LETTER KJE

# CYRILLIC CAPITAL LETTER I WITH GRAVE

# CYRILLIC CAPITAL LETTER SHORT U

# CYRILLIC CAPITAL LETTER DZHE

# CYRILLIC CAPITAL LETTER A

# CYRILLIC CAPITAL LETTER BE

# CYRILLIC CAPITAL LETTER VE

# CYRILLIC CAPITAL LETTER GHE

# CYRILLIC CAPITAL LETTER DE

# CYRILLIC CAPITAL LETTER IE

# CYRILLIC CAPITAL LETTER ZHE

# CYRILLIC CAPITAL LETTER ZE

# CYRILLIC CAPITAL LETTER I

# CYRILLIC CAPITAL LETTER SHORT I

# CYRILLIC CAPITAL LETTER KA

# CYRILLIC CAPITAL LETTER EL

# CYRILLIC CAPITAL LETTER EM

# CYRILLIC CAPITAL LETTER EN

# CYRILLIC CAPITAL LETTER O

# CYRILLIC CAPITAL LETTER PE

# CYRILLIC CAPITAL LETTER ER

# CYRILLIC CAPITAL LETTER ES

# CYRILLIC CAPITAL LETTER TE

# CYRILLIC CAPITAL LETTER U

# CYRILLIC CAPITAL LETTER EF

# CYRILLIC CAPITAL LETTER HA

# CYRILLIC CAPITAL LETTER TSE

# CYRILLIC CAPITAL LETTER CHE

# CYRILLIC CAPITAL LETTER SHA

# CYRILLIC CAPITAL LETTER SHCHA

# CYRILLIC CAPITAL LETTER HARD SIGN

# CYRILLIC CAPITAL LETTER YERU

# CYRILLIC CAPITAL LETTER SOFT SIGN

# CYRILLIC CAPITAL LETTER E

# CYRILLIC CAPITAL LETTER YU

# CYRILLIC CAPITAL LETTER YA

# CYRILLIC CAPITAL LETTER OMEGA

# CYRILLIC CAPITAL LETTER YAT

# CYRILLIC CAPITAL LETTER IOTIFIED E

# CYRILLIC CAPITAL LETTER LITTLE YUS

# CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS

# CYRILLIC CAPITAL LETTER BIG YUS

# CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS

# CYRILLIC CAPITAL LETTER KSI

# CYRILLIC CAPITAL LETTER PSI

# CYRILLIC CAPITAL LETTER FITA

# CYRILLIC CAPITAL LETTER IZHITSA

# CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT

# CYRILLIC CAPITAL LETTER UK

# CYRILLIC CAPITAL LETTER ROUND OMEGA

# CYRILLIC CAPITAL LETTER OMEGA WITH TITLO

# CYRILLIC CAPITAL LETTER OT

# CYRILLIC CAPITAL LETTER KOPPA

# CYRILLIC CAPITAL LETTER SHORT I WITH TAIL

# CYRILLIC CAPITAL LETTER SEMISOFT SIGN

# CYRILLIC CAPITAL LETTER ER WITH TICK

# CYRILLIC CAPITAL LETTER GHE WITH UPTURN

# CYRILLIC CAPITAL LETTER GHE WITH STROKE

# CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK

# CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER

# CYRILLIC CAPITAL LETTER ZE WITH DESCENDER

# CYRILLIC CAPITAL LETTER KA WITH DESCENDER

# CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE

# CYRILLIC CAPITAL LETTER KA WITH STROKE

# CYRILLIC CAPITAL LETTER BASHKIR KA

# CYRILLIC CAPITAL LETTER EN WITH DESCENDER

# CYRILLIC CAPITAL LIGATURE EN GHE

# CYRILLIC CAPITAL LETTER PE WITH MIDDLE HOOK

# CYRILLIC CAPITAL LETTER ABKHASIAN HA

# CYRILLIC CAPITAL LETTER ES WITH DESCENDER

# CYRILLIC CAPITAL LETTER TE WITH DESCENDER

# CYRILLIC CAPITAL LETTER STRAIGHT U

# CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE

# CYRILLIC CAPITAL LETTER HA WITH DESCENDER

# CYRILLIC CAPITAL LIGATURE TE TSE

# CYRILLIC CAPITAL LETTER CHE WITH DESCENDER

# CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE

# CYRILLIC CAPITAL LETTER SHHA

# CYRILLIC CAPITAL LETTER ABKHASIAN CHE

# CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER

# CYRILLIC LETTER PALOCHKA

# CYRILLIC CAPITAL LETTER ZHE WITH BREVE

# CYRILLIC CAPITAL LETTER KA WITH HOOK

# CYRILLIC CAPITAL LETTER EL WITH TAIL

# CYRILLIC CAPITAL LETTER EN WITH HOOK

# CYRILLIC CAPITAL LETTER EN WITH TAIL

# CYRILLIC CAPITAL LETTER KHAKASSIAN CHE

# CYRILLIC CAPITAL LETTER EM WITH TAIL

# CYRILLIC CAPITAL LETTER A WITH BREVE

# CYRILLIC CAPITAL LETTER A WITH DIAERESIS

# CYRILLIC CAPITAL LIGATURE A IE

# CYRILLIC CAPITAL LETTER IE WITH BREVE

# CYRILLIC CAPITAL LETTER SCHWA

# CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS

# CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS

# CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS

# CYRILLIC CAPITAL LETTER ABKHASIAN DZE

# CYRILLIC CAPITAL LETTER I WITH MACRON

# CYRILLIC CAPITAL LETTER I WITH DIAERESIS

# CYRILLIC CAPITAL LETTER O WITH DIAERESIS

# CYRILLIC CAPITAL LETTER BARRED O

# CYRILLIC CAPITAL LETTER BARRED O WITH DIAERESIS

# CYRILLIC CAPITAL LETTER E WITH DIAERESIS

# CYRILLIC CAPITAL LETTER U WITH MACRON

# CYRILLIC CAPITAL LETTER U WITH DIAERESIS

# CYRILLIC CAPITAL LETTER U WITH DOUBLE ACUTE

# CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS

# CYRILLIC CAPITAL LETTER GHE WITH DESCENDER

# CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS

# CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK

# CYRILLIC CAPITAL LETTER HA WITH HOOK

# CYRILLIC CAPITAL LETTER HA WITH STROKE

# CYRILLIC CAPITAL LETTER KOMI DE

# CYRILLIC CAPITAL LETTER KOMI DJE

# CYRILLIC CAPITAL LETTER KOMI ZJE

# CYRILLIC CAPITAL LETTER KOMI DZJE

# CYRILLIC CAPITAL LETTER KOMI LJE

# CYRILLIC CAPITAL LETTER KOMI NJE

# CYRILLIC CAPITAL LETTER KOMI SJE

# CYRILLIC CAPITAL LETTER KOMI TJE

# CYRILLIC CAPITAL LETTER REVERSED ZE

# CYRILLIC CAPITAL LETTER EL WITH HOOK

# CYRILLIC CAPITAL LETTER LHA

# CYRILLIC CAPITAL LETTER RHA

# CYRILLIC CAPITAL LETTER YAE

# CYRILLIC CAPITAL LETTER QA

# CYRILLIC CAPITAL LETTER WE

# CYRILLIC CAPITAL LETTER ALEUT KA

# CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK

# CYRILLIC CAPITAL LETTER EN WITH MIDDLE HOOK

# CYRILLIC CAPITAL LETTER PE WITH DESCENDER

# CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER

# CYRILLIC CAPITAL LETTER EN WITH LEFT HOOK

# CYRILLIC CAPITAL LETTER DZZHE

# CYRILLIC CAPITAL LETTER DCHE

# CYRILLIC CAPITAL LETTER EL WITH DESCENDER

# ARMENIAN CAPITAL LETTER AYB

# ARMENIAN CAPITAL LETTER BEN

# ARMENIAN CAPITAL LETTER GIM

# ARMENIAN CAPITAL LETTER DA

# ARMENIAN CAPITAL LETTER ECH

# ARMENIAN CAPITAL LETTER ZA

# ARMENIAN CAPITAL LETTER EH

# ARMENIAN CAPITAL LETTER ET

# ARMENIAN CAPITAL LETTER TO

# ARMENIAN CAPITAL LETTER ZHE

# ARMENIAN CAPITAL LETTER INI

# ARMENIAN CAPITAL LETTER LIWN

# ARMENIAN CAPITAL LETTER XEH

# ARMENIAN CAPITAL LETTER CA

# ARMENIAN CAPITAL LETTER KEN

# ARMENIAN CAPITAL LETTER HO

# ARMENIAN CAPITAL LETTER JA

# ARMENIAN CAPITAL LETTER GHAD

# ARMENIAN CAPITAL LETTER CHEH

# ARMENIAN CAPITAL LETTER MEN

# ARMENIAN CAPITAL LETTER YI

# ARMENIAN CAPITAL LETTER NOW

# ARMENIAN CAPITAL LETTER SHA

# ARMENIAN CAPITAL LETTER VO

# ARMENIAN CAPITAL LETTER CHA

# ARMENIAN CAPITAL LETTER PEH

# ARMENIAN CAPITAL LETTER JHEH

# ARMENIAN CAPITAL LETTER RA

# ARMENIAN CAPITAL LETTER SEH

# ARMENIAN CAPITAL LETTER VEW

# ARMENIAN CAPITAL LETTER TIWN

# ARMENIAN CAPITAL LETTER REH

# ARMENIAN CAPITAL LETTER CO

# ARMENIAN CAPITAL LETTER YIWN

# ARMENIAN CAPITAL LETTER PIWR

# ARMENIAN CAPITAL LETTER KEH

# ARMENIAN CAPITAL LETTER OH

# ARMENIAN CAPITAL LETTER FEH

# ARMENIAN SMALL LIGATURE ECH YIWN

# GEORGIAN CAPITAL LETTER AN

# GEORGIAN CAPITAL LETTER BAN

# GEORGIAN CAPITAL LETTER GAN

# GEORGIAN CAPITAL LETTER DON

# GEORGIAN CAPITAL LETTER EN

# GEORGIAN CAPITAL LETTER VIN

# GEORGIAN CAPITAL LETTER ZEN

# GEORGIAN CAPITAL LETTER TAN

# GEORGIAN CAPITAL LETTER IN

# GEORGIAN CAPITAL LETTER KAN

# GEORGIAN CAPITAL LETTER LAS

# GEORGIAN CAPITAL LETTER MAN

# GEORGIAN CAPITAL LETTER NAR

# GEORGIAN CAPITAL LETTER ON

# GEORGIAN CAPITAL LETTER PAR

# GEORGIAN CAPITAL LETTER ZHAR

# GEORGIAN CAPITAL LETTER RAE

# GEORGIAN CAPITAL LETTER SAN

# GEORGIAN CAPITAL LETTER TAR

# GEORGIAN CAPITAL LETTER UN

# GEORGIAN CAPITAL LETTER PHAR

# GEORGIAN CAPITAL LETTER KHAR

# GEORGIAN CAPITAL LETTER GHAN

# GEORGIAN CAPITAL LETTER QAR

# GEORGIAN CAPITAL LETTER SHIN

# GEORGIAN CAPITAL LETTER CHIN

# GEORGIAN CAPITAL LETTER CAN

# GEORGIAN CAPITAL LETTER JIL

# GEORGIAN CAPITAL LETTER CIL

# GEORGIAN CAPITAL LETTER CHAR

# GEORGIAN CAPITAL LETTER XAN

# GEORGIAN CAPITAL LETTER JHAN

# GEORGIAN CAPITAL LETTER HAE

# GEORGIAN CAPITAL LETTER HE

# GEORGIAN CAPITAL LETTER HIE

# GEORGIAN CAPITAL LETTER WE

# GEORGIAN CAPITAL LETTER HAR

# GEORGIAN CAPITAL LETTER HOE

# GEORGIAN CAPITAL LETTER YN

# GEORGIAN CAPITAL LETTER AEN

# CHEROKEE SMALL LETTER YE

# CHEROKEE SMALL LETTER YI

# CHEROKEE SMALL LETTER YO

# CHEROKEE SMALL LETTER YU

# CHEROKEE SMALL LETTER YV

# CHEROKEE SMALL LETTER MV

# CYRILLIC SMALL LETTER ROUNDED VE

# CYRILLIC SMALL LETTER LONG-LEGGED DE

# CYRILLIC SMALL LETTER NARROW O

# CYRILLIC SMALL LETTER WIDE ES

# CYRILLIC SMALL LETTER TALL TE

# CYRILLIC SMALL LETTER THREE-LEGGED TE

# CYRILLIC SMALL LETTER TALL HARD SIGN

# CYRILLIC SMALL LETTER TALL YAT

# CYRILLIC SMALL LETTER UNBLENDED UK

# GEORGIAN MTAVRULI CAPITAL LETTER AN

# GEORGIAN MTAVRULI CAPITAL LETTER BAN

# GEORGIAN MTAVRULI CAPITAL LETTER GAN

# GEORGIAN MTAVRULI CAPITAL LETTER DON

# GEORGIAN MTAVRULI CAPITAL LETTER EN

# GEORGIAN MTAVRULI CAPITAL LETTER VIN

# GEORGIAN MTAVRULI CAPITAL LETTER ZEN

# GEORGIAN MTAVRULI CAPITAL LETTER TAN

# GEORGIAN MTAVRULI CAPITAL LETTER IN

# GEORGIAN MTAVRULI CAPITAL LETTER KAN

# GEORGIAN MTAVRULI CAPITAL LETTER LAS

# GEORGIAN MTAVRULI CAPITAL LETTER MAN

# GEORGIAN MTAVRULI CAPITAL LETTER NAR

# GEORGIAN MTAVRULI CAPITAL LETTER ON

# GEORGIAN MTAVRULI CAPITAL LETTER PAR

# GEORGIAN MTAVRULI CAPITAL LETTER ZHAR

# GEORGIAN MTAVRULI CAPITAL LETTER RAE

# GEORGIAN MTAVRULI CAPITAL LETTER SAN

# GEORGIAN MTAVRULI CAPITAL LETTER TAR

# GEORGIAN MTAVRULI CAPITAL LETTER UN

# GEORGIAN MTAVRULI CAPITAL LETTER PHAR

# GEORGIAN MTAVRULI CAPITAL LETTER KHAR

# GEORGIAN MTAVRULI CAPITAL LETTER GHAN

# GEORGIAN MTAVRULI CAPITAL LETTER QAR

# GEORGIAN MTAVRULI CAPITAL LETTER SHIN

# GEORGIAN MTAVRULI CAPITAL LETTER CHIN

# GEORGIAN MTAVRULI CAPITAL LETTER CAN

# GEORGIAN MTAVRULI CAPITAL LETTER JIL

# GEORGIAN MTAVRULI CAPITAL LETTER CIL

# GEORGIAN MTAVRULI CAPITAL LETTER CHAR

# GEORGIAN MTAVRULI CAPITAL LETTER XAN

# GEORGIAN MTAVRULI CAPITAL LETTER JHAN

# GEORGIAN MTAVRULI CAPITAL LETTER HAE

# GEORGIAN MTAVRULI CAPITAL LETTER HE

# GEORGIAN MTAVRULI CAPITAL LETTER HIE

# GEORGIAN MTAVRULI CAPITAL LETTER WE

# GEORGIAN MTAVRULI CAPITAL LETTER HAR

# GEORGIAN MTAVRULI CAPITAL LETTER HOE

# GEORGIAN MTAVRULI CAPITAL LETTER FI

# GEORGIAN MTAVRULI CAPITAL LETTER YN

# GEORGIAN MTAVRULI CAPITAL LETTER ELIFI

# GEORGIAN MTAVRULI CAPITAL LETTER TURNED GAN

# GEORGIAN MTAVRULI CAPITAL LETTER AIN

# GEORGIAN MTAVRULI CAPITAL LETTER AEN

# GEORGIAN MTAVRULI CAPITAL LETTER HARD SIGN

# GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN

# LATIN CAPITAL LETTER A WITH RING BELOW

# LATIN CAPITAL LETTER B WITH DOT ABOVE

# LATIN CAPITAL LETTER B WITH DOT BELOW

# LATIN CAPITAL LETTER B WITH LINE BELOW

# LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE

# LATIN CAPITAL LETTER D WITH DOT ABOVE

# LATIN CAPITAL LETTER D WITH DOT BELOW

# LATIN CAPITAL LETTER D WITH LINE BELOW

# LATIN CAPITAL LETTER D WITH CEDILLA

# LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW

# LATIN CAPITAL LETTER E WITH MACRON AND GRAVE

# LATIN CAPITAL LETTER E WITH MACRON AND ACUTE

# LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW

# LATIN CAPITAL LETTER E WITH TILDE BELOW

# LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE

# LATIN CAPITAL LETTER F WITH DOT ABOVE

# LATIN CAPITAL LETTER G WITH MACRON

# LATIN CAPITAL LETTER H WITH DOT ABOVE

# LATIN CAPITAL LETTER H WITH DOT BELOW

# LATIN CAPITAL LETTER H WITH DIAERESIS

# LATIN CAPITAL LETTER H WITH CEDILLA

# LATIN CAPITAL LETTER H WITH BREVE BELOW

# LATIN CAPITAL LETTER I WITH TILDE BELOW

# LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE

# LATIN CAPITAL LETTER K WITH ACUTE

# LATIN CAPITAL LETTER K WITH DOT BELOW

# LATIN CAPITAL LETTER K WITH LINE BELOW

# LATIN CAPITAL LETTER L WITH DOT BELOW

# LATIN CAPITAL LETTER L WITH DOT BELOW AND MACRON

# LATIN CAPITAL LETTER L WITH LINE BELOW

# LATIN CAPITAL LETTER L WITH CIRCUMFLEX BELOW

# LATIN CAPITAL LETTER M WITH ACUTE

# LATIN CAPITAL LETTER M WITH DOT ABOVE

# LATIN CAPITAL LETTER M WITH DOT BELOW

# LATIN CAPITAL LETTER N WITH DOT ABOVE

# LATIN CAPITAL LETTER N WITH DOT BELOW

# LATIN CAPITAL LETTER N WITH LINE BELOW

# LATIN CAPITAL LETTER N WITH CIRCUMFLEX BELOW

# LATIN CAPITAL LETTER O WITH TILDE AND ACUTE

# LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS

# LATIN CAPITAL LETTER O WITH MACRON AND GRAVE

# LATIN CAPITAL LETTER O WITH MACRON AND ACUTE

# LATIN CAPITAL LETTER P WITH ACUTE

# LATIN CAPITAL LETTER P WITH DOT ABOVE

# LATIN CAPITAL LETTER R WITH DOT ABOVE

# LATIN CAPITAL LETTER R WITH DOT BELOW

# LATIN CAPITAL LETTER R WITH DOT BELOW AND MACRON

# LATIN CAPITAL LETTER R WITH LINE BELOW

# LATIN CAPITAL LETTER S WITH DOT ABOVE

# LATIN CAPITAL LETTER S WITH DOT BELOW

# LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE

# LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE

# LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE

# LATIN CAPITAL LETTER T WITH DOT ABOVE

# LATIN CAPITAL LETTER T WITH DOT BELOW

# LATIN CAPITAL LETTER T WITH LINE BELOW

# LATIN CAPITAL LETTER T WITH CIRCUMFLEX BELOW

# LATIN CAPITAL LETTER U WITH DIAERESIS BELOW

# LATIN CAPITAL LETTER U WITH TILDE BELOW

# LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW

# LATIN CAPITAL LETTER U WITH TILDE AND ACUTE

# LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS

# LATIN CAPITAL LETTER V WITH TILDE

# LATIN CAPITAL LETTER V WITH DOT BELOW

# LATIN CAPITAL LETTER W WITH GRAVE

# LATIN CAPITAL LETTER W WITH ACUTE

# LATIN CAPITAL LETTER W WITH DIAERESIS

# LATIN CAPITAL LETTER W WITH DOT ABOVE

# LATIN CAPITAL LETTER W WITH DOT BELOW

# LATIN CAPITAL LETTER X WITH DOT ABOVE

# LATIN CAPITAL LETTER X WITH DIAERESIS

# LATIN CAPITAL LETTER Y WITH DOT ABOVE

# LATIN CAPITAL LETTER Z WITH CIRCUMFLEX

# LATIN CAPITAL LETTER Z WITH DOT BELOW

# LATIN CAPITAL LETTER Z WITH LINE BELOW

# LATIN SMALL LETTER H WITH LINE BELOW

# LATIN SMALL LETTER T WITH DIAERESIS

# LATIN SMALL LETTER W WITH RING ABOVE

# LATIN SMALL LETTER Y WITH RING ABOVE

# LATIN SMALL LETTER A WITH RIGHT HALF RING

# LATIN SMALL LETTER LONG S WITH DOT ABOVE

# LATIN CAPITAL LETTER SHARP S

# LATIN CAPITAL LETTER SHARP S

# LATIN CAPITAL LETTER A WITH DOT BELOW

# LATIN CAPITAL LETTER A WITH HOOK ABOVE

# LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE

# LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE

# LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE

# LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE

# LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW

# LATIN CAPITAL LETTER A WITH BREVE AND ACUTE

# LATIN CAPITAL LETTER A WITH BREVE AND GRAVE

# LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE

# LATIN CAPITAL LETTER A WITH BREVE AND TILDE

# LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW

# LATIN CAPITAL LETTER E WITH DOT BELOW

# LATIN CAPITAL LETTER E WITH HOOK ABOVE

# LATIN CAPITAL LETTER E WITH TILDE

# LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE

# LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE

# LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE

# LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE

# LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW

# LATIN CAPITAL LETTER I WITH HOOK ABOVE

# LATIN CAPITAL LETTER I WITH DOT BELOW

# LATIN CAPITAL LETTER O WITH DOT BELOW

# LATIN CAPITAL LETTER O WITH HOOK ABOVE

# LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE

# LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE

# LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE

# LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE

# LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW

# LATIN CAPITAL LETTER O WITH HORN AND ACUTE

# LATIN CAPITAL LETTER O WITH HORN AND GRAVE

# LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE

# LATIN CAPITAL LETTER O WITH HORN AND TILDE

# LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW

# LATIN CAPITAL LETTER U WITH DOT BELOW

# LATIN CAPITAL LETTER U WITH HOOK ABOVE

# LATIN CAPITAL LETTER U WITH HORN AND ACUTE

# LATIN CAPITAL LETTER U WITH HORN AND GRAVE

# LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE

# LATIN CAPITAL LETTER U WITH HORN AND TILDE

# LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW

# LATIN CAPITAL LETTER Y WITH GRAVE

# LATIN CAPITAL LETTER Y WITH DOT BELOW

# LATIN CAPITAL LETTER Y WITH HOOK ABOVE

# LATIN CAPITAL LETTER Y WITH TILDE

# LATIN CAPITAL LETTER MIDDLE-WELSH LL

# LATIN CAPITAL LETTER MIDDLE-WELSH V

# LATIN CAPITAL LETTER Y WITH LOOP

# GREEK CAPITAL LETTER ALPHA WITH PSILI

# GREEK CAPITAL LETTER ALPHA WITH DASIA

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI

# GREEK CAPITAL LETTER EPSILON WITH PSILI

# GREEK CAPITAL LETTER EPSILON WITH DASIA

# GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA

# GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA

# GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA

# GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA

# GREEK CAPITAL LETTER ETA WITH PSILI

# GREEK CAPITAL LETTER ETA WITH DASIA

# GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA

# GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA

# GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA

# GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA

# GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI

# GREEK CAPITAL LETTER IOTA WITH PSILI

# GREEK CAPITAL LETTER IOTA WITH DASIA

# GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA

# GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA

# GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA

# GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA

# GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI

# GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI

# GREEK CAPITAL LETTER OMICRON WITH PSILI

# GREEK CAPITAL LETTER OMICRON WITH DASIA

# GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA

# GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA

# GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA

# GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA

# GREEK SMALL LETTER UPSILON WITH PSILI

# GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA

# GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA

# GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI

# GREEK CAPITAL LETTER UPSILON WITH DASIA

# GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA

# GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA

# GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI

# GREEK CAPITAL LETTER OMEGA WITH DASIA

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI

# GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ALPHA WITH PERISPOMENI

# GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH VRACHY

# GREEK CAPITAL LETTER ALPHA WITH MACRON

# GREEK CAPITAL LETTER ALPHA WITH VARIA

# GREEK CAPITAL LETTER ALPHA WITH OXIA

# GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI

# GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI

# GREEK PROSGEGRAMMENI

# GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER ETA WITH PERISPOMENI

# GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI

# GREEK CAPITAL LETTER EPSILON WITH VARIA

# GREEK CAPITAL LETTER EPSILON WITH OXIA

# GREEK CAPITAL LETTER ETA WITH VARIA

# GREEK CAPITAL LETTER ETA WITH OXIA

# GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI

# GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI

# GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA

# GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA

# GREEK SMALL LETTER IOTA WITH PERISPOMENI

# GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI

# GREEK CAPITAL LETTER IOTA WITH VRACHY

# GREEK CAPITAL LETTER IOTA WITH MACRON

# GREEK CAPITAL LETTER IOTA WITH VARIA

# GREEK CAPITAL LETTER IOTA WITH OXIA

# GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA

# GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA

# GREEK SMALL LETTER RHO WITH PSILI

# GREEK SMALL LETTER UPSILON WITH PERISPOMENI

# GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI

# GREEK CAPITAL LETTER UPSILON WITH VRACHY

# GREEK CAPITAL LETTER UPSILON WITH MACRON

# GREEK CAPITAL LETTER UPSILON WITH VARIA

# GREEK CAPITAL LETTER UPSILON WITH OXIA

# GREEK CAPITAL LETTER RHO WITH DASIA

# GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI

# GREEK SMALL LETTER OMEGA WITH PERISPOMENI

# GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI

# GREEK CAPITAL LETTER OMICRON WITH VARIA

# GREEK CAPITAL LETTER OMICRON WITH OXIA

# GREEK CAPITAL LETTER OMEGA WITH VARIA

# GREEK CAPITAL LETTER OMEGA WITH OXIA

# GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI

# GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI

# OHM SIGN

# KELVIN SIGN

# ANGSTROM SIGN

# TURNED CAPITAL F

# ROMAN NUMERAL ONE

# ROMAN NUMERAL TWO

# ROMAN NUMERAL THREE

# ROMAN NUMERAL FOUR

# ROMAN NUMERAL FIVE

# ROMAN NUMERAL SIX

# ROMAN NUMERAL SEVEN

# ROMAN NUMERAL EIGHT

# ROMAN NUMERAL NINE

# ROMAN NUMERAL TEN

# ROMAN NUMERAL ELEVEN

# ROMAN NUMERAL TWELVE

# ROMAN NUMERAL FIFTY

# ROMAN NUMERAL ONE HUNDRED

# ROMAN NUMERAL FIVE HUNDRED

# ROMAN NUMERAL ONE THOUSAND

# ROMAN NUMERAL REVERSED ONE HUNDRED

# CIRCLED LATIN CAPITAL LETTER A

# CIRCLED LATIN CAPITAL LETTER B

# CIRCLED LATIN CAPITAL LETTER C

# CIRCLED LATIN CAPITAL LETTER D

# CIRCLED LATIN CAPITAL LETTER E

# CIRCLED LATIN CAPITAL LETTER F

# CIRCLED LATIN CAPITAL LETTER G

# CIRCLED LATIN CAPITAL LETTER H

# CIRCLED LATIN CAPITAL LETTER I

# CIRCLED LATIN CAPITAL LETTER J

# CIRCLED LATIN CAPITAL LETTER K

# CIRCLED LATIN CAPITAL LETTER L

# CIRCLED LATIN CAPITAL LETTER M

# CIRCLED LATIN CAPITAL LETTER N

# CIRCLED LATIN CAPITAL LETTER O

# CIRCLED LATIN CAPITAL LETTER P

# CIRCLED LATIN CAPITAL LETTER Q

# CIRCLED LATIN CAPITAL LETTER R

# CIRCLED LATIN CAPITAL LETTER S

# CIRCLED LATIN CAPITAL LETTER T

# CIRCLED LATIN CAPITAL LETTER U

# CIRCLED LATIN CAPITAL LETTER V

# CIRCLED LATIN CAPITAL LETTER W

# CIRCLED LATIN CAPITAL LETTER X

# CIRCLED LATIN CAPITAL LETTER Y

# CIRCLED LATIN CAPITAL LETTER Z

# GLAGOLITIC CAPITAL LETTER AZU

# GLAGOLITIC CAPITAL LETTER BUKY

# GLAGOLITIC CAPITAL LETTER VEDE

# GLAGOLITIC CAPITAL LETTER GLAGOLI

# GLAGOLITIC CAPITAL LETTER DOBRO

# GLAGOLITIC CAPITAL LETTER YESTU

# GLAGOLITIC CAPITAL LETTER ZHIVETE

# GLAGOLITIC CAPITAL LETTER DZELO

# GLAGOLITIC CAPITAL LETTER ZEMLJA

# GLAGOLITIC CAPITAL LETTER IZHE

# GLAGOLITIC CAPITAL LETTER INITIAL IZHE

# GLAGOLITIC CAPITAL LETTER I

# GLAGOLITIC CAPITAL LETTER DJERVI

# GLAGOLITIC CAPITAL LETTER KAKO

# GLAGOLITIC CAPITAL LETTER LJUDIJE

# GLAGOLITIC CAPITAL LETTER MYSLITE

# GLAGOLITIC CAPITAL LETTER NASHI

# GLAGOLITIC CAPITAL LETTER ONU

# GLAGOLITIC CAPITAL LETTER POKOJI

# GLAGOLITIC CAPITAL LETTER RITSI

# GLAGOLITIC CAPITAL LETTER SLOVO

# GLAGOLITIC CAPITAL LETTER TVRIDO

# GLAGOLITIC CAPITAL LETTER UKU

# GLAGOLITIC CAPITAL LETTER FRITU

# GLAGOLITIC CAPITAL LETTER HERU

# GLAGOLITIC CAPITAL LETTER OTU

# GLAGOLITIC CAPITAL LETTER PE

# GLAGOLITIC CAPITAL LETTER SHTA

# GLAGOLITIC CAPITAL LETTER TSI

# GLAGOLITIC CAPITAL LETTER CHRIVI

# GLAGOLITIC CAPITAL LETTER SHA

# GLAGOLITIC CAPITAL LETTER YERU

# GLAGOLITIC CAPITAL LETTER YERI

# GLAGOLITIC CAPITAL LETTER YATI

# GLAGOLITIC CAPITAL LETTER SPIDERY HA

# GLAGOLITIC CAPITAL LETTER YU

# GLAGOLITIC CAPITAL LETTER SMALL YUS

# GLAGOLITIC CAPITAL LETTER SMALL YUS WITH TAIL

# GLAGOLITIC CAPITAL LETTER YO

# GLAGOLITIC CAPITAL LETTER IOTATED SMALL YUS

# GLAGOLITIC CAPITAL LETTER BIG YUS

# GLAGOLITIC CAPITAL LETTER IOTATED BIG YUS

# GLAGOLITIC CAPITAL LETTER FITA

# GLAGOLITIC CAPITAL LETTER IZHITSA

# GLAGOLITIC CAPITAL LETTER SHTAPIC

# GLAGOLITIC CAPITAL LETTER TROKUTASTI A

# GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE

# GLAGOLITIC CAPITAL LETTER CAUDATE CHRIVI

# LATIN CAPITAL LETTER L WITH DOUBLE BAR

# LATIN CAPITAL LETTER L WITH MIDDLE TILDE

# LATIN CAPITAL LETTER P WITH STROKE

# LATIN CAPITAL LETTER R WITH TAIL

# LATIN CAPITAL LETTER H WITH DESCENDER

# LATIN CAPITAL LETTER K WITH DESCENDER

# LATIN CAPITAL LETTER Z WITH DESCENDER

# LATIN CAPITAL LETTER ALPHA

# LATIN CAPITAL LETTER M WITH HOOK

# LATIN CAPITAL LETTER TURNED A

# LATIN CAPITAL LETTER TURNED ALPHA

# LATIN CAPITAL LETTER W WITH HOOK

# LATIN CAPITAL LETTER HALF H

# LATIN CAPITAL LETTER S WITH SWASH TAIL

# LATIN CAPITAL LETTER Z WITH SWASH TAIL

# COPTIC CAPITAL LETTER ALFA

# COPTIC CAPITAL LETTER VIDA

# COPTIC CAPITAL LETTER GAMMA

# COPTIC CAPITAL LETTER DALDA

# COPTIC CAPITAL LETTER EIE

# COPTIC CAPITAL LETTER SOU

# COPTIC CAPITAL LETTER ZATA

# COPTIC CAPITAL LETTER HATE

# COPTIC CAPITAL LETTER THETHE

# COPTIC CAPITAL LETTER IAUDA

# COPTIC CAPITAL LETTER KAPA

# COPTIC CAPITAL LETTER LAULA

# COPTIC CAPITAL LETTER MI

# COPTIC CAPITAL LETTER NI

# COPTIC CAPITAL LETTER KSI

# COPTIC CAPITAL LETTER O

# COPTIC CAPITAL LETTER PI

# COPTIC CAPITAL LETTER RO

# COPTIC CAPITAL LETTER SIMA

# COPTIC CAPITAL LETTER TAU

# COPTIC CAPITAL LETTER UA

# COPTIC CAPITAL LETTER FI

# COPTIC CAPITAL LETTER KHI

# COPTIC CAPITAL LETTER PSI

# COPTIC CAPITAL LETTER OOU

# COPTIC CAPITAL LETTER DIALECT-P ALEF

# COPTIC CAPITAL LETTER OLD COPTIC AIN

# COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE

# COPTIC CAPITAL LETTER DIALECT-P KAPA

# COPTIC CAPITAL LETTER DIALECT-P NI

# COPTIC CAPITAL LETTER CRYPTOGRAMMIC NI

# COPTIC CAPITAL LETTER OLD COPTIC OOU

# COPTIC CAPITAL LETTER SAMPI

# COPTIC CAPITAL LETTER CROSSED SHEI

# COPTIC CAPITAL LETTER OLD COPTIC SHEI

# COPTIC CAPITAL LETTER OLD COPTIC ESH

# COPTIC CAPITAL LETTER AKHMIMIC KHEI

# COPTIC CAPITAL LETTER DIALECT-P HORI

# COPTIC CAPITAL LETTER OLD COPTIC HORI

# COPTIC CAPITAL LETTER OLD COPTIC HA

# COPTIC CAPITAL LETTER L-SHAPED HA

# COPTIC CAPITAL LETTER OLD COPTIC HEI

# COPTIC CAPITAL LETTER OLD COPTIC HAT

# COPTIC CAPITAL LETTER OLD COPTIC GANGIA

# COPTIC CAPITAL LETTER OLD COPTIC DJA

# COPTIC CAPITAL LETTER OLD COPTIC SHIMA

# COPTIC CAPITAL LETTER OLD NUBIAN SHIMA

# COPTIC CAPITAL LETTER OLD NUBIAN NGI

# COPTIC CAPITAL LETTER OLD NUBIAN NYI

# COPTIC CAPITAL LETTER OLD NUBIAN WAU

# COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI

# COPTIC CAPITAL LETTER CRYPTOGRAMMIC GANGIA

# COPTIC CAPITAL LETTER BOHAIRIC KHEI

# CYRILLIC CAPITAL LETTER ZEMLYA

# CYRILLIC CAPITAL LETTER DZELO

# CYRILLIC CAPITAL LETTER REVERSED DZE

# CYRILLIC CAPITAL LETTER IOTA

# CYRILLIC CAPITAL LETTER DJERV

# CYRILLIC CAPITAL LETTER MONOGRAPH UK

# CYRILLIC CAPITAL LETTER BROAD OMEGA

# CYRILLIC CAPITAL LETTER NEUTRAL YER

# CYRILLIC CAPITAL LETTER YERU WITH BACK YER

# CYRILLIC CAPITAL LETTER IOTIFIED YAT

# CYRILLIC CAPITAL LETTER REVERSED YU

# CYRILLIC CAPITAL LETTER IOTIFIED A

# CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS

# CYRILLIC CAPITAL LETTER BLENDED YUS

# CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS

# CYRILLIC CAPITAL LETTER YN

# CYRILLIC CAPITAL LETTER REVERSED TSE

# CYRILLIC CAPITAL LETTER SOFT DE

# CYRILLIC CAPITAL LETTER SOFT EL

# CYRILLIC CAPITAL LETTER SOFT EM

# CYRILLIC CAPITAL LETTER MONOCULAR O

# CYRILLIC CAPITAL LETTER BINOCULAR O

# CYRILLIC CAPITAL LETTER DOUBLE MONOCULAR O

# CYRILLIC CAPITAL LETTER DWE

# CYRILLIC CAPITAL LETTER DZWE

# CYRILLIC CAPITAL LETTER ZHWE

# CYRILLIC CAPITAL LETTER CCHE

# CYRILLIC CAPITAL LETTER DZZE

# CYRILLIC CAPITAL LETTER TE WITH MIDDLE HOOK

# CYRILLIC CAPITAL LETTER TWE

# CYRILLIC CAPITAL LETTER TSWE

# CYRILLIC CAPITAL LETTER TSSE

# CYRILLIC CAPITAL LETTER TCHE

# CYRILLIC CAPITAL LETTER HWE

# CYRILLIC CAPITAL LETTER SHWE

# CYRILLIC CAPITAL LETTER DOUBLE O

# CYRILLIC CAPITAL LETTER CROSSED O

# LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF

# LATIN CAPITAL LETTER EGYPTOLOGICAL AIN

# LATIN CAPITAL LETTER HENG

# LATIN CAPITAL LETTER TZ

# LATIN CAPITAL LETTER TRESILLO

# LATIN CAPITAL LETTER CUATRILLO

# LATIN CAPITAL LETTER CUATRILLO WITH COMMA

# LATIN CAPITAL LETTER AA

# LATIN CAPITAL LETTER AO

# LATIN CAPITAL LETTER AU

# LATIN CAPITAL LETTER AV

# LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR

# LATIN CAPITAL LETTER AY

# LATIN CAPITAL LETTER REVERSED C WITH DOT

# LATIN CAPITAL LETTER K WITH STROKE

# LATIN CAPITAL LETTER K WITH DIAGONAL STROKE

# LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE

# LATIN CAPITAL LETTER BROKEN L

# LATIN CAPITAL LETTER L WITH HIGH STROKE

# LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY

# LATIN CAPITAL LETTER O WITH LOOP

# LATIN CAPITAL LETTER OO

# LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER

# LATIN CAPITAL LETTER P WITH FLOURISH

# LATIN CAPITAL LETTER P WITH SQUIRREL TAIL

# LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER

# LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE

# LATIN CAPITAL LETTER R ROTUNDA

# LATIN CAPITAL LETTER RUM ROTUNDA

# LATIN CAPITAL LETTER V WITH DIAGONAL STROKE

# LATIN CAPITAL LETTER VY

# LATIN CAPITAL LETTER VISIGOTHIC Z

# LATIN CAPITAL LETTER THORN WITH STROKE

# LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER

# LATIN CAPITAL LETTER VEND

# LATIN CAPITAL LETTER ET

# LATIN CAPITAL LETTER IS

# LATIN CAPITAL LETTER CON

# LATIN CAPITAL LETTER INSULAR D

# LATIN CAPITAL LETTER INSULAR F

# LATIN CAPITAL LETTER INSULAR G

# LATIN CAPITAL LETTER TURNED INSULAR G

# LATIN CAPITAL LETTER TURNED L

# LATIN CAPITAL LETTER INSULAR R

# LATIN CAPITAL LETTER INSULAR S

# LATIN CAPITAL LETTER INSULAR T

# LATIN CAPITAL LETTER SALTILLO

# LATIN CAPITAL LETTER TURNED H

# LATIN CAPITAL LETTER N WITH DESCENDER

# LATIN CAPITAL LETTER C WITH BAR

# LATIN CAPITAL LETTER B WITH FLOURISH

# LATIN CAPITAL LETTER F WITH STROKE

# LATIN CAPITAL LETTER VOLAPUK AE

# LATIN CAPITAL LETTER VOLAPUK OE

# LATIN CAPITAL LETTER VOLAPUK UE

# LATIN CAPITAL LETTER G WITH OBLIQUE STROKE

# LATIN CAPITAL LETTER K WITH OBLIQUE STROKE

# LATIN CAPITAL LETTER N WITH OBLIQUE STROKE

# LATIN CAPITAL LETTER R WITH OBLIQUE STROKE

# LATIN CAPITAL LETTER S WITH OBLIQUE STROKE

# LATIN CAPITAL LETTER H WITH HOOK

# LATIN CAPITAL LETTER REVERSED OPEN E

# LATIN CAPITAL LETTER SCRIPT G

# LATIN CAPITAL LETTER L WITH BELT

# LATIN CAPITAL LETTER SMALL CAPITAL I

# LATIN CAPITAL LETTER TURNED K

# LATIN CAPITAL LETTER TURNED T

# LATIN CAPITAL LETTER J WITH CROSSED-TAIL

# LATIN CAPITAL LETTER CHI

# LATIN CAPITAL LETTER BETA

# LATIN CAPITAL LETTER OMEGA

# LATIN CAPITAL LETTER U WITH STROKE

# LATIN CAPITAL LETTER GLOTTAL A

# LATIN CAPITAL LETTER GLOTTAL I

# LATIN CAPITAL LETTER GLOTTAL U

# LATIN CAPITAL LETTER OLD POLISH O

# LATIN CAPITAL LETTER ANGLICANA W

# LATIN CAPITAL LETTER C WITH PALATAL HOOK

# LATIN CAPITAL LETTER S WITH HOOK

# LATIN CAPITAL LETTER Z WITH PALATAL HOOK

# LATIN CAPITAL LETTER D WITH SHORT STROKE OVERLAY

# LATIN CAPITAL LETTER S WITH SHORT STROKE OVERLAY

# LATIN CAPITAL LETTER CLOSED INSULAR G

# LATIN CAPITAL LETTER MIDDLE SCOTS S

# LATIN CAPITAL LETTER SIGMOID S

# LATIN CAPITAL LETTER REVERSED HALF H

# CHEROKEE SMALL LETTER A

# CHEROKEE SMALL LETTER E

# CHEROKEE SMALL LETTER I

# CHEROKEE SMALL LETTER O

# CHEROKEE SMALL LETTER U

# CHEROKEE SMALL LETTER V

# CHEROKEE SMALL LETTER GA

# CHEROKEE SMALL LETTER KA

# CHEROKEE SMALL LETTER GE

# CHEROKEE SMALL LETTER GI

# CHEROKEE SMALL LETTER GO

# CHEROKEE SMALL LETTER GU

# CHEROKEE SMALL LETTER GV

# CHEROKEE SMALL LETTER HA

# CHEROKEE SMALL LETTER HE

# CHEROKEE SMALL LETTER HI

# CHEROKEE SMALL LETTER HO

# CHEROKEE SMALL LETTER HU

# CHEROKEE SMALL LETTER HV

# CHEROKEE SMALL LETTER LA

# CHEROKEE SMALL LETTER LE

# CHEROKEE SMALL LETTER LI

# CHEROKEE SMALL LETTER LO

# CHEROKEE SMALL LETTER LU

# CHEROKEE SMALL LETTER LV

# CHEROKEE SMALL LETTER MA

# CHEROKEE SMALL LETTER ME

# CHEROKEE SMALL LETTER MI

# CHEROKEE SMALL LETTER MO

# CHEROKEE SMALL LETTER MU

# CHEROKEE SMALL LETTER NA

# CHEROKEE SMALL LETTER HNA

# CHEROKEE SMALL LETTER NAH

# CHEROKEE SMALL LETTER NE

# CHEROKEE SMALL LETTER NI

# CHEROKEE SMALL LETTER NO

# CHEROKEE SMALL LETTER NU

# CHEROKEE SMALL LETTER NV

# CHEROKEE SMALL LETTER QUA

# CHEROKEE SMALL LETTER QUE

# CHEROKEE SMALL LETTER QUI

# CHEROKEE SMALL LETTER QUO

# CHEROKEE SMALL LETTER QUU

# CHEROKEE SMALL LETTER QUV

# CHEROKEE SMALL LETTER SA

# CHEROKEE SMALL LETTER S

# CHEROKEE SMALL LETTER SE

# CHEROKEE SMALL LETTER SI

# CHEROKEE SMALL LETTER SO

# CHEROKEE SMALL LETTER SU

# CHEROKEE SMALL LETTER SV

# CHEROKEE SMALL LETTER DA

# CHEROKEE SMALL LETTER TA

# CHEROKEE SMALL LETTER DE

# CHEROKEE SMALL LETTER TE

# CHEROKEE SMALL LETTER DI

# CHEROKEE SMALL LETTER TI

# CHEROKEE SMALL LETTER DO

# CHEROKEE SMALL LETTER DU

# CHEROKEE SMALL LETTER DV

# CHEROKEE SMALL LETTER DLA

# CHEROKEE SMALL LETTER TLA

# CHEROKEE SMALL LETTER TLE

# CHEROKEE SMALL LETTER TLI

# CHEROKEE SMALL LETTER TLO

# CHEROKEE SMALL LETTER TLU

# CHEROKEE SMALL LETTER TLV

# CHEROKEE SMALL LETTER TSA

# CHEROKEE SMALL LETTER TSE

# CHEROKEE SMALL LETTER TSI

# CHEROKEE SMALL LETTER TSO

# CHEROKEE SMALL LETTER TSU

# CHEROKEE SMALL LETTER TSV

# CHEROKEE SMALL LETTER WA

# CHEROKEE SMALL LETTER WE

# CHEROKEE SMALL LETTER WI

# CHEROKEE SMALL LETTER WO

# CHEROKEE SMALL LETTER WU

# CHEROKEE SMALL LETTER WV

# CHEROKEE SMALL LETTER YA

# LATIN SMALL LIGATURE FF

# LATIN SMALL LIGATURE FI

# LATIN SMALL LIGATURE FL

# LATIN SMALL LIGATURE FFI

# LATIN SMALL LIGATURE FFL

# LATIN SMALL LIGATURE LONG S T

# LATIN SMALL LIGATURE ST

# ARMENIAN SMALL LIGATURE MEN NOW

# ARMENIAN SMALL LIGATURE MEN ECH

# ARMENIAN SMALL LIGATURE MEN INI

# ARMENIAN SMALL LIGATURE VEW NOW

# ARMENIAN SMALL LIGATURE MEN XEH

# FULLWIDTH LATIN CAPITAL LETTER A

# FULLWIDTH LATIN CAPITAL LETTER B

# FULLWIDTH LATIN CAPITAL LETTER C

# FULLWIDTH LATIN CAPITAL LETTER D

# FULLWIDTH LATIN CAPITAL LETTER E

# FULLWIDTH LATIN CAPITAL LETTER F

# FULLWIDTH LATIN CAPITAL LETTER G

# FULLWIDTH LATIN CAPITAL LETTER H

# FULLWIDTH LATIN CAPITAL LETTER I

# FULLWIDTH LATIN CAPITAL LETTER J

# FULLWIDTH LATIN CAPITAL LETTER K

# FULLWIDTH LATIN CAPITAL LETTER L

# FULLWIDTH LATIN CAPITAL LETTER M

# FULLWIDTH LATIN CAPITAL LETTER N

# FULLWIDTH LATIN CAPITAL LETTER O

# FULLWIDTH LATIN CAPITAL LETTER P

# FULLWIDTH LATIN CAPITAL LETTER Q

# FULLWIDTH LATIN CAPITAL LETTER R

# FULLWIDTH LATIN CAPITAL LETTER S

# FULLWIDTH LATIN CAPITAL LETTER T

# FULLWIDTH LATIN CAPITAL LETTER U

# FULLWIDTH LATIN CAPITAL LETTER V

# FULLWIDTH LATIN CAPITAL LETTER W

# FULLWIDTH LATIN CAPITAL LETTER X

# FULLWIDTH LATIN CAPITAL LETTER Y

# FULLWIDTH LATIN CAPITAL LETTER Z

# DESERET CAPITAL LETTER LONG I

# DESERET CAPITAL LETTER LONG E

# DESERET CAPITAL LETTER LONG A

# DESERET CAPITAL LETTER LONG AH

# DESERET CAPITAL LETTER LONG O

# DESERET CAPITAL LETTER LONG OO

# DESERET CAPITAL LETTER SHORT I

# DESERET CAPITAL LETTER SHORT E

# DESERET CAPITAL LETTER SHORT A

# DESERET CAPITAL LETTER SHORT AH

# DESERET CAPITAL LETTER SHORT O

# DESERET CAPITAL LETTER SHORT OO

# DESERET CAPITAL LETTER AY

# DESERET CAPITAL LETTER OW

# DESERET CAPITAL LETTER WU

# DESERET CAPITAL LETTER YEE

# DESERET CAPITAL LETTER H

# DESERET CAPITAL LETTER PEE

# DESERET CAPITAL LETTER BEE

# DESERET CAPITAL LETTER TEE

# DESERET CAPITAL LETTER DEE

# DESERET CAPITAL LETTER CHEE

# DESERET CAPITAL LETTER JEE

# DESERET CAPITAL LETTER KAY

# DESERET CAPITAL LETTER GAY

# DESERET CAPITAL LETTER EF

# DESERET CAPITAL LETTER VEE

# DESERET CAPITAL LETTER ETH

# DESERET CAPITAL LETTER THEE

# DESERET CAPITAL LETTER ES

# DESERET CAPITAL LETTER ZEE

# DESERET CAPITAL LETTER ESH

# DESERET CAPITAL LETTER ZHEE

# DESERET CAPITAL LETTER ER

# DESERET CAPITAL LETTER EL

# DESERET CAPITAL LETTER EM

# DESERET CAPITAL LETTER EN

# DESERET CAPITAL LETTER ENG

# DESERET CAPITAL LETTER OI

# DESERET CAPITAL LETTER EW

# OSAGE CAPITAL LETTER A

# OSAGE CAPITAL LETTER AI

# OSAGE CAPITAL LETTER AIN

# OSAGE CAPITAL LETTER AH

# OSAGE CAPITAL LETTER BRA

# OSAGE CAPITAL LETTER CHA

# OSAGE CAPITAL LETTER EHCHA

# OSAGE CAPITAL LETTER E

# OSAGE CAPITAL LETTER EIN

# OSAGE CAPITAL LETTER HA

# OSAGE CAPITAL LETTER HYA

# OSAGE CAPITAL LETTER I

# OSAGE CAPITAL LETTER KA

# OSAGE CAPITAL LETTER EHKA

# OSAGE CAPITAL LETTER KYA

# OSAGE CAPITAL LETTER LA

# OSAGE CAPITAL LETTER MA

# OSAGE CAPITAL LETTER NA

# OSAGE CAPITAL LETTER O

# OSAGE CAPITAL LETTER OIN

# OSAGE CAPITAL LETTER PA

# OSAGE CAPITAL LETTER EHPA

# OSAGE CAPITAL LETTER SA

# OSAGE CAPITAL LETTER SHA

# OSAGE CAPITAL LETTER TA

# OSAGE CAPITAL LETTER EHTA

# OSAGE CAPITAL LETTER TSA

# OSAGE CAPITAL LETTER EHTSA

# OSAGE CAPITAL LETTER TSHA

# OSAGE CAPITAL LETTER DHA

# OSAGE CAPITAL LETTER U

# OSAGE CAPITAL LETTER WA

# OSAGE CAPITAL LETTER KHA

# OSAGE CAPITAL LETTER GHA

# OSAGE CAPITAL LETTER ZA

# OSAGE CAPITAL LETTER ZHA

# VITHKUQI CAPITAL LETTER A

# VITHKUQI CAPITAL LETTER BBE

# VITHKUQI CAPITAL LETTER BE

# VITHKUQI CAPITAL LETTER CE

# VITHKUQI CAPITAL LETTER CHE

# VITHKUQI CAPITAL LETTER DE

# VITHKUQI CAPITAL LETTER DHE

# VITHKUQI CAPITAL LETTER EI

# VITHKUQI CAPITAL LETTER E

# VITHKUQI CAPITAL LETTER FE

# VITHKUQI CAPITAL LETTER GA

# VITHKUQI CAPITAL LETTER HA

# VITHKUQI CAPITAL LETTER HHA

# VITHKUQI CAPITAL LETTER I

# VITHKUQI CAPITAL LETTER IJE

# VITHKUQI CAPITAL LETTER JE

# VITHKUQI CAPITAL LETTER KA

# VITHKUQI CAPITAL LETTER LA

# VITHKUQI CAPITAL LETTER LLA

# VITHKUQI CAPITAL LETTER ME

# VITHKUQI CAPITAL LETTER NE

# VITHKUQI CAPITAL LETTER NJE

# VITHKUQI CAPITAL LETTER O

# VITHKUQI CAPITAL LETTER PE

# VITHKUQI CAPITAL LETTER QA

# VITHKUQI CAPITAL LETTER RE

# VITHKUQI CAPITAL LETTER SE

# VITHKUQI CAPITAL LETTER SHE

# VITHKUQI CAPITAL LETTER TE

# VITHKUQI CAPITAL LETTER THE

# VITHKUQI CAPITAL LETTER U

# VITHKUQI CAPITAL LETTER VE

# VITHKUQI CAPITAL LETTER XE

# VITHKUQI CAPITAL LETTER Y

# VITHKUQI CAPITAL LETTER ZE

# OLD HUNGARIAN CAPITAL LETTER A

# OLD HUNGARIAN CAPITAL LETTER AA

# OLD HUNGARIAN CAPITAL LETTER EB

# OLD HUNGARIAN CAPITAL LETTER AMB

# OLD HUNGARIAN CAPITAL LETTER EC

# OLD HUNGARIAN CAPITAL LETTER ENC

# OLD HUNGARIAN CAPITAL LETTER ECS

# OLD HUNGARIAN CAPITAL LETTER ED

# OLD HUNGARIAN CAPITAL LETTER AND

# OLD HUNGARIAN CAPITAL LETTER E

# OLD HUNGARIAN CAPITAL LETTER CLOSE E

# OLD HUNGARIAN CAPITAL LETTER EE

# OLD HUNGARIAN CAPITAL LETTER EF

# OLD HUNGARIAN CAPITAL LETTER EG

# OLD HUNGARIAN CAPITAL LETTER EGY

# OLD HUNGARIAN CAPITAL LETTER EH

# OLD HUNGARIAN CAPITAL LETTER I

# OLD HUNGARIAN CAPITAL LETTER II

# OLD HUNGARIAN CAPITAL LETTER EJ

# OLD HUNGARIAN CAPITAL LETTER EK

# OLD HUNGARIAN CAPITAL LETTER AK

# OLD HUNGARIAN CAPITAL LETTER UNK

# OLD HUNGARIAN CAPITAL LETTER EL

# OLD HUNGARIAN CAPITAL LETTER ELY

# OLD HUNGARIAN CAPITAL LETTER EM

# OLD HUNGARIAN CAPITAL LETTER EN

# OLD HUNGARIAN CAPITAL LETTER ENY

# OLD HUNGARIAN CAPITAL LETTER O

# OLD HUNGARIAN CAPITAL LETTER OO

# OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE

# OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE

# OLD HUNGARIAN CAPITAL LETTER OEE

# OLD HUNGARIAN CAPITAL LETTER EP

# OLD HUNGARIAN CAPITAL LETTER EMP

# OLD HUNGARIAN CAPITAL LETTER ER

# OLD HUNGARIAN CAPITAL LETTER SHORT ER

# OLD HUNGARIAN CAPITAL LETTER ES

# OLD HUNGARIAN CAPITAL LETTER ESZ

# OLD HUNGARIAN CAPITAL LETTER ET

# OLD HUNGARIAN CAPITAL LETTER ENT

# OLD HUNGARIAN CAPITAL LETTER ETY

# OLD HUNGARIAN CAPITAL LETTER ECH

# OLD HUNGARIAN CAPITAL LETTER U

# OLD HUNGARIAN CAPITAL LETTER UU

# OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE

# OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE

# OLD HUNGARIAN CAPITAL LETTER EV

# OLD HUNGARIAN CAPITAL LETTER EZ

# OLD HUNGARIAN CAPITAL LETTER EZS

# OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN

# OLD HUNGARIAN CAPITAL LETTER US

# WARANG CITI CAPITAL LETTER NGAA

# WARANG CITI CAPITAL LETTER A

# WARANG CITI CAPITAL LETTER WI

# WARANG CITI CAPITAL LETTER YU

# WARANG CITI CAPITAL LETTER YA

# WARANG CITI CAPITAL LETTER YO

# WARANG CITI CAPITAL LETTER II

# WARANG CITI CAPITAL LETTER UU

# WARANG CITI CAPITAL LETTER E

# WARANG CITI CAPITAL LETTER O

# WARANG CITI CAPITAL LETTER ANG

# WARANG CITI CAPITAL LETTER GA

# WARANG CITI CAPITAL LETTER KO

# WARANG CITI CAPITAL LETTER ENY

# WARANG CITI CAPITAL LETTER YUJ

# WARANG CITI CAPITAL LETTER UC

# WARANG CITI CAPITAL LETTER ENN

# WARANG CITI CAPITAL LETTER ODD

# WARANG CITI CAPITAL LETTER TTE

# WARANG CITI CAPITAL LETTER NUNG

# WARANG CITI CAPITAL LETTER DA

# WARANG CITI CAPITAL LETTER AT

# WARANG CITI CAPITAL LETTER AM

# WARANG CITI CAPITAL LETTER BU

# WARANG CITI CAPITAL LETTER PU

# WARANG CITI CAPITAL LETTER HIYO

# WARANG CITI CAPITAL LETTER HOLO

# WARANG CITI CAPITAL LETTER HORR

# WARANG CITI CAPITAL LETTER HAR

# WARANG CITI CAPITAL LETTER SSUU

# WARANG CITI CAPITAL LETTER SII

# WARANG CITI CAPITAL LETTER VIYO

# MEDEFAIDRIN CAPITAL LETTER M

# MEDEFAIDRIN CAPITAL LETTER S

# MEDEFAIDRIN CAPITAL LETTER V

# MEDEFAIDRIN CAPITAL LETTER W

# MEDEFAIDRIN CAPITAL LETTER ATIU

# MEDEFAIDRIN CAPITAL LETTER Z

# MEDEFAIDRIN CAPITAL LETTER KP

# MEDEFAIDRIN CAPITAL LETTER P

# MEDEFAIDRIN CAPITAL LETTER T

# MEDEFAIDRIN CAPITAL LETTER G

# MEDEFAIDRIN CAPITAL LETTER F

# MEDEFAIDRIN CAPITAL LETTER I

# MEDEFAIDRIN CAPITAL LETTER K

# MEDEFAIDRIN CAPITAL LETTER A

# MEDEFAIDRIN CAPITAL LETTER J

# MEDEFAIDRIN CAPITAL LETTER E

# MEDEFAIDRIN CAPITAL LETTER B

# MEDEFAIDRIN CAPITAL LETTER C

# MEDEFAIDRIN CAPITAL LETTER U

# MEDEFAIDRIN CAPITAL LETTER YU

# MEDEFAIDRIN CAPITAL LETTER L

# MEDEFAIDRIN CAPITAL LETTER Q

# MEDEFAIDRIN CAPITAL LETTER HP

# MEDEFAIDRIN CAPITAL LETTER NY

# MEDEFAIDRIN CAPITAL LETTER X

# MEDEFAIDRIN CAPITAL LETTER D

# MEDEFAIDRIN CAPITAL LETTER OE

# MEDEFAIDRIN CAPITAL LETTER N

# MEDEFAIDRIN CAPITAL LETTER R

# MEDEFAIDRIN CAPITAL LETTER O

# MEDEFAIDRIN CAPITAL LETTER AI

# MEDEFAIDRIN CAPITAL LETTER Y

# ADLAM CAPITAL LETTER ALIF

# ADLAM CAPITAL LETTER DAALI

# ADLAM CAPITAL LETTER LAAM

# ADLAM CAPITAL LETTER MIIM

# ADLAM CAPITAL LETTER BA

# ADLAM CAPITAL LETTER SINNYIIYHE

# ADLAM CAPITAL LETTER PE

# ADLAM CAPITAL LETTER BHE

# ADLAM CAPITAL LETTER RA

# ADLAM CAPITAL LETTER E

# ADLAM CAPITAL LETTER FA

# ADLAM CAPITAL LETTER I

# ADLAM CAPITAL LETTER O

# ADLAM CAPITAL LETTER DHA

# ADLAM CAPITAL LETTER YHE

# ADLAM CAPITAL LETTER WAW

# ADLAM CAPITAL LETTER NUN

# ADLAM CAPITAL LETTER KAF

# ADLAM CAPITAL LETTER YA

# ADLAM CAPITAL LETTER U

# ADLAM CAPITAL LETTER JIIM

# ADLAM CAPITAL LETTER CHI

# ADLAM CAPITAL LETTER HA

# ADLAM CAPITAL LETTER QAAF

# ADLAM CAPITAL LETTER GA

# ADLAM CAPITAL LETTER NYA

# ADLAM CAPITAL LETTER TU

# ADLAM CAPITAL LETTER NHA

# ADLAM CAPITAL LETTER VA

# ADLAM CAPITAL LETTER KHA

# ADLAM CAPITAL LETTER GBE

# ADLAM CAPITAL LETTER ZAL

# ADLAM CAPITAL LETTER KPO

# ADLAM CAPITAL LETTER SHA

# work around ""unichr() arg not in range(0x10000) (narrow Python build)""

#')
''' marks.
# The text is expected to have only blank lines andlines with 1st character #,
# all ignored, and fold definitions like this:
# `from_hex_code; space_separated_to_hex_code_list; comment`

_map_str = '''
"
cbc.py,"# coding: utf-8

#]+)'

# with mediaId

# with clipId, feed available via tpfeed.cbc.ca and feed.theplatform.com

# with clipId, feed only available via tpfeed.cbc.ca

# multiple iframes

# multiple CBC.APP.Caffeine.initInstance(...)

# Redirected from http://www.cbc.ca/player/AudioMobile/All%20in%20a%20Weekend%20Montreal/ID/2657632011/

# token

# Device token has expired, re-acquiring device token

# geo-restricted to Canada, bypassable

# geo-restricted to Canada, bypassable

# m3u8 download

# geo-restricted to Canada, bypassable

#]+)'

# d3.VideoPlayer._init in https://olympics.cbc.ca/components/script/base.js

# AKAMAI CDN cookie
"
cbs.py,"# m3u8 download
"
cbsinteractive.py,"# coding: utf-8

# m3u8 download

# m3u8 download
"
cbslocal.py,"# coding: utf-8

# Anvato backend

# SendtoNews embed

# m3u8 download
"
cbsnews.py,"# coding: utf-8

#]*#(?P<id>.+)'

#1Vb7b9s2EP5XBAHbT6Gt98PAMKTJ0se6LVjWYWtdGBR1stlIpEBSTtwi%2F%2FvuJNkNhmHdGxgM2NL57vjd6zt%2B8PngdN%2Fyg79qeGvhzN%2FLGrS%2F%2BuBLB531V28%2B%2BO7Qg7%2Fy97r2z3xZ42NW8yLhDbA0S0KWlHnIijwKWJBHZZnHBa8Cgbpdf%2F89NM9Hi9fXifhpr8sr%2FlP848tn%2BTdXycX25zh4cdX%2FvHl6PmmPqnWQv9w8Ed%2B9GjYRim07bFEqdG%2BZVHuwTm65A7bVRrYtR5lAyMox7pigF6W4k%2By91mjspGsJ%2BwVae4%2BsvdnaO1p73HkXs%2FVisUDTGm7R8IcdnOROeq%2B19qT1amhA1VJtPenoTUgrtfKc9m7Rq8dP7nnjwOB7wg7ADdNt7VX64DWAWlKhPtmDEq22g4GF99x6Dk9E8OSsankHXqPNKDxC%2FdK7MLKTircTDgsI3mmj4OBdSq64dy7fd1x577RU1rt4cvMtOaulFYOd%2FLewRWvDO9lIgXFpZSnkZmjbv5SxKTPoQXClFbpsf%2Fhbbpzs0IB3vb8KkyzJQ%2BywOAgCrMpgRrz%2BKk4fvb7kFbR4XJCu0gAdtNO7woCwZTu%2BBUs9bam%2Fds71drVerpeisgrubLjAB4nnOSkWQnfr5W6o1ku5Xpr1MgrCbL0M0vUyDtfLLK15WiYp47xKWSLyjFVpwVmVJSLIoCjSOFkv3W7oKsVliwZJcB9nwXpZ5GEQQwY8jNKqKCBrgjTLeFxgdCIpazojDgnRtn43J6kG7nZ6cAbxh0EeFFk4%2B1u867cY5u4344n%2FxXjCqAjucdTHgLKojNKmSfO8KRsOFY%2FzKEYCKEJBzv90QA9nfm9gL%2BHulaFqUkz9ULUYxl62B3U%2FRVNLA8IhggaPycOoBuwOCESciDQVSSUgiOMsROB%2FhKfwCKOzEk%2B4k6rWd4uuT%2FwTDz7K7t3d3WLO8ISD95jSPQbayBacthbz86XVgxHwhex5zawzgDOmtp%2F3GPcXn0VXHdSS029%2Fj99UC%2FwJUvyKQ%2FzKyixIEVlYJOn4RxxuaH43Ty9fbJ5OObykHH435XAzJTHeOF4hhEUXD8URe%2FQ%2FBT%2BMpf8d5GN02Ox%2FfiGsl7TA7POu1xZ5%2BbTzcAVKMe48mqcC21hkacVEVScM26liVVBnrKkC4CLKyzAvHu0lhEaTKMFwI3a4SN9MsrfYzdBLq2vkwRD1gVviLT8kY9h2CHH6Y%2Bix6609weFtey4ESp60WtyeWMy%2BsmBuhsoKIyuoT%2Bq2R%2FrW5qi3g%2FvzS2j40DoixDP8%2BKP0yUdpXJ4l6Vla%2Bg9vce%2BC4yM5YlUcbA%2F0jLKdpmTwvsdN5z88nAIe08%2F0HgxeG1iv%2B6Hlhjh7uiW0SDzYNI92L401uha3JKYk268UVRzdOzNQvAaJqoXzAc80dAV440NZ1WVVAAMRYQ2KrGJFmDUsq8saWSnjvIj8t78y%2FRa3JRnbHVfyFpfwoDiGpPgjzekyUiKNlU3OMlwuLMmzgvEojllYVE2Z1HhImvsnk%2BuhusTEoB21PAtSFodeFK3iYhXEH9WOG2%2FkOE833sfeG%2Ff5cfHtEFNXgYes0%2FXj7aGivUgJ9XpusCtoNcNYVVnJVrrDo0OmJAutHCpuZul4W9lLcfy7BnuLPT02%2ByXsCTk%2B9zhzswIN04YueNSK%2BPtM0jS88QdLqSLJDTLsuGZJNolm2yO0PXh3UPnz9Ix5bfIAqxPjvETQsDCEiPG4QbqNyhBZISxybLnZYCrW5H3Axp690%2F0BJdXtDZ5ITuM4xj3f4oUHGzc5JeJmZKpp%2FjwKh4wMV%2FV1yx3emLoR0MwbG4K%2F%2BZgVep3PnzXGDHZ6a3i%2Fk%2BJrONDN13%2Bnq6tBTYk4o7cLGhBtqCC4KwacGHpEVuoH5JNro%2FE6JfE6d5RydbiR76k%2BW5wioDHBIjw1euhHjUGRB0y5A97KoaPx6MlL%2BwgboUVtUFRI%2FLemgTpdtF59ii7pab08kuPcfWzs0l%2FRI5takWnFpka0zOgWRtYcuf9aIxZMxlwr6IiGpsb6j2DQUXPl%2FimXI599Ev7fWjoPD78A',

# 60 minutes

# rtmp download

# m3u8 download

# 48 hours

#]*#[^""]+)""', webpage):

#]+)'


# Live videos get deleted soon. See http://www.cbsnews.com/live/ for the latest examples
"
cbssports.py,"# from .cbs import CBSBaseIE

# class CBSSportsEmbedIE(CBSBaseIE):

# def _extract_video_info(self, filter_query, video_id):

#     return self._extract_feed_info('dJ5BDC', 'VxxJg8Ymh8sE', filter_query, video_id)


# return self._extract_video_info('byId=%d' % metadata['mpxOutletId'], video_id)

# return self._extract_video_info('byGuid=' + metadata['mpxRefId'], video_id)


#&]+)'

#&]+-)?(?P<id>\d+)'
'''(?ix)https?://(?:(?:www\.)?cbs|embed\.247)sports\.com/player/embed.+?
        (?:
            ids%3D(?P<id>[\da-f]{8}-(?:[\da-f]{4}-){3}[\da-f]{12})|
            pcid%3D(?P<pcid>\d+)
        )'''
"
ccc.py,"# coding: utf-8

#&]+)'


#video',

#download',

#&]+)'
"
ccma.py,"# coding: utf-8
"
cctv.py,"# coding: utf-8

#&]+?)(?:/index)?(?:\.s?html|[?#&]|$)'

# fo.addVariable(""videoCenterId"",""id"")

# var guid = ""id""

# changePlayer('id')

# loadvideo('id')

# var initMyAray = 'id'

# var ids = [""id""]
"
cda.py,"# coding: utf-8

# Age-restricted

# Source: https://www.cda.pl/js/player.js?t=1606154898

# Manually report warning because empty page is returned when

# invalid version is requested.
'''(?x)
            <(span|meta)[^>]+itemprop=([""\'])author\2[^>]*>
            (?:<\1[^>]*>[^<]*</\1>|(?!</\1>)(?:.|\n))*?
            <(span|meta)[^>]+itemprop=([""\'])name\4[^>]*>(?P<uploader>[^<]+)</\3>
        '''"
ceskatelevize.py,"# coding: utf-8

#&]+/)*(?P<id>[^/#?]+)'

# m3u8 download

# live stream

# m3u8 download

# another

# 'skip': 'Georestricted to Czech Republic',

# video with 18+ caution trailer

# m3u8 download

# iframe embed

# See https://github.com/ytdl-org/youtube-dl/issues/12119#issuecomment-280037031
"""""" Convert millisecond-based subtitles to SRT """"""


"""""" Helper utility to convert milliseconds to timecode """"""
"
channel9.py,"#&]|$)'


# low quality mp4 is best
"
charlierose.py,
chaturbate.py,"#]+)'

# ffmpeg skips segments for fast m3u8
"
check-porn.py,"#!/usr/bin/env python

# Allow direct execution
""""""
This script employs a VERY basic heuristic ('porn' in webpage.lower()) to check
if we are not 'age_limit' tagging some porn site

A second approach implemented relies on a list of porn domains, to activate it
pass the list filename as the only argument
""""""

"
chilloutzone.py,"# get video information from dict

# If nativePlatform is None a fallback mechanism is used (i.e. youtube embed)

# Non Fallback: Decide to use native source (e.g. youtube or vimeo) or

# the own CDN
"
chirbit.py,"# coding: utf-8

# Reverse engineered from https://chirb.it/js/chirbit.player.js (look

# for soundURL)
"
cinchcast.py,"# coding: utf-8

# Actual test is run in generic, look for undergroundwellness

#038;assetType=single&#038;assetId=7141703',

# duration is present but wrong

# seems to be more reliable
"
cinemax.py,"# coding: utf-8
"
ciscolive.py,"# coding: utf-8

# These appear to be constant across all Cisco Live presentations

# and are not tied to any user session or event

#]*#/session/(?P<id>[^/?&]+)'

#/session/1423353499155001FoSs',

#/session/15361595531500013WOU',

#/session/1490051371645001kNaS',

#/',

#/',

#/',
"
cjsw.py,"# coding: utf-8

# no description
"
cliphunter.py,"#\?])
'''(?x)https?://(?:www\.)?cliphunter\.com/w/
        (?P<id>[0-9]+)/
        (?P<seo>.+?)(?:$|[#\?])
    '''
"
clippit.py,"# coding: utf-8


#BattleBots  - Clippit',
"
cliprs.py,"# coding: utf-8
"
clipsyndicate.py,"# it includes a required token
"
closertotruth.py,"# coding: utf-8

#&]+)'

#video-3688',

#.+?)?\1[^>]*>(?P<title>[^<]+)',
"
cloudflarestream.py,"# coding: utf-8
'''(?x)
                    https?://
                        (?:
                            (?:watch\.)?%s/|
                            %s
                        )
                        (?P<id>%s)
                    '''"
cloudy.py,"# coding: utf-8
"
clubic.py,"# coding: utf-8
"
clyp.py,"#Krisson80BitsWipWip #chiptune\n#wip',
"
cmt.py,"#artist=30061',

#id=1739908',

#id=1738172',
"
cnbc.py,"# coding: utf-8

# m3u8 download

#&]+)\.html)'
'''{
  page(path: ""%s"") {
    vcpsId
  }
}'''"
cnn.py,"# m3u8 download

# http://edition.cnn.com/.element/apps/cvp/3.0/cfg/spider/cnn/expansion/config.xml

# http://money.cnn.com/.element/apps/cvp2/cfg/config.xml

# TODO: fix timestamp extraction
'''(?x)https?://(?:(?P<sub_domain>edition|www|money)\.)?cnn\.com/(?:video/(?:data/.+?|\?)/)?videos?/
        (?P<path>.+?/(?P<title>[^/]+?)(?:\.(?:[a-z\-]+)|(?=&)))'''

"
comedycentral.py,
common.py,"# by default, keep file and do nothing

""""""Post Processor class.

    PostProcessor objects can be added to downloaders with their
    add_post_processor() method. When the downloader has finished a
    successful download, it will take its internal chain of PostProcessors
    and start calling the run() method on each one of them, first with
    an initial argument and then with the returned value of the previous
    PostProcessor.

    The chain will be stopped if one of them ever returns None or the end
    of the chain is reached.

    PostProcessor objects follow a ""mutual registration"" process similar
    to InfoExtractor objects.

    Optionally PostProcessor can use a list of additional command-line arguments
    with self._configuration_args.
    """"""


""""""Sets the downloader for this PP.""""""

""""""Run the PostProcessor.

        The ""information"" argument is a dictionary like the ones
        composed by InfoExtractors. The only difference is that this
        one has an extra field called ""filepath"" that points to the
        downloaded file.

        This method returns a tuple, the first element is a list of the files
        that can be deleted, and the second of which is the updated
        information.

        In addition, this method may raise a PostProcessingError
        exception if post processing fails.
        """"""
"
commonmistakes.py,"# Do not list

# Disable test for python 3.2 since BOM is broken in re in this version

# (see https://github.com/ytdl-org/youtube-dl/issues/9751)
'''(?x)
        (?:url|URL)$
    '''

"
commonprotocols.py,"# Do not list

# Do not list

# Direct MMS link

# rtsp downloads, requiring mplayer or mpv
"
compat.py,"# coding: utf-8

# deal with critical unicode/str things first

# Python 2

# Python 2

# Python 2

# Python 2

# Python 2

# Python 2

# Python 2

# Python 2

# Python 2

# Python 2

# Python >= 3.3

# Copied from CPython 3.5.1 html/entities.py

#',

# Python 2

# Python 2

# Python 2

# Python 2

# Python 2

# Python <3.4

# Python >3.4


# HTMLParseError has been deprecated in Python 3.3 and removed in

# Python 3.5. Introducing dummy exception for Python >3.5 for compatible

# and uniform cross-version exception handling

# Python 2

# HACK: The following are the correct unquote_to_bytes, unquote and unquote_plus

# implementations from cpython 3.4.3's stdlib. Python 2's version

# is apparently broken (see https://github.com/ytdl-org/youtube-dl/pull/6244)


# Note: strings are encoded as UTF-8. This is only an issue if it contains

# unescaped non-ASCII characters, which URIs should not.

# Is it a string-like object?

# Python 2

# Python 2 will choke in urlencode on mixture of byte and unicode strings.

# Possible solutions are to either port it from python 3 with all

# the friends or manually ensure input query contains only byte strings.

# We will stick with latter thus recursively encoding the whole query.

# Python < 3.4

# Ported from CPython 98774:1733b3bd46db, Lib/urllib/request.py

# data URLs as specified in RFC 2397.

#

# ignores POSTed data

#

# syntax:

# dataurl   := ""data:"" [ mediatype ] [ "";base64"" ] "","" data

# mediatype := [ type ""/"" subtype ] *( "";"" parameter )

# data      := *urlchar

# parameter := attribute ""="" value

# even base64 encoded data URLs might be quoted so unquote in any case:

# Python 2.6

# xml.etree.ElementTree.Element is a method in Python <=2.6 and

# the following will crash with:

#  TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types

# Python <=2.6

# python 2.x tries to encode unicode strings with ascii (see the

# XMLParser._fixtext method)

# Python <=2.6

# on 2.6 XML doesn't have a parser argument, function copied from CPython

# 2.7 source

# Here comes the crazy part: In 2.6, if the xpath is a unicode,

# .//node does not match if a node is a direct child of . !

# Python 2

# HACK: The following is the correct parse_qs implementation from cpython 3's stdlib.

# Python 2's version is apparently totally broken


# Handle case of a control-name with no equal sign

# Python < 3.3

# Working around shlex issue with unicode strings on some python 2

# versions (see http://bugs.python.org/issue1548891)

# Environment variables should be decoded with filesystem encoding.

# Otherwise it will fail if any non-ASCII characters present (see #3854 #3217 #2918)


# HACK: The default implementations of os.path.expanduser from cpython do not decode

# environment variables with filesystem encoding. We will work around this by

# providing adjusted implementations.

# The following are os.path.expanduser implementations from cpython 2.7.8 stdlib

# for different platforms with correct environment variables decoding.


# ~user

# os.path.realpath on Windows does not follow symbolic links

# prior to Python 3.8 (see https://bugs.python.org/issue9949)

# Python 3

# Python < 2.6.5 require kwargs to be bytes

# Python 3

# Python 3

# Fix https://github.com/ytdl-org/youtube-dl/issues/4223

# See http://bugs.python.org/issue9161 for what is broken

# Python >= 3.3

# Python 2.6

# In Python 2.6 and 2.7.x < 2.7.7, struct requires a bytes argument

# See https://bugs.python.org/issue19099

# noqa: F821

# noqa: F821

# compat_map/filter() returning an iterator, supposedly the

# same versioning as for zip below

# not 2.6+ or is 3.x

# < 2.5 or 3.x

# method renamed between Py2/3

# new class in collections

# Py3.3's ChainMap is deficient

# Py <= 3.3

# to match Py3, don't del directly

# Pythons disagree on the type of a pattern (RegexObject, _sre.SRE_Pattern, Pattern, ...?)

# and on the type of a match

# PyPy2 prior to version 5.4.0 expects byte strings as Windows function

# names, see the original PyPy issue [1] and the youtube-dl one [2].

# 1. https://bitbucket.org/pypy/pypy/issues/2360/windows-ctypescdll-typeerror-function-name

# 2. https://github.com/ytdl-org/youtube-dl/pull/4392
""""""unquote_to_bytes('abc%20def') -> b'abc def'.""""""

""""""Replace %xx escapes by their single-character equivalent. The optional
        encoding and errors parameters specify how to decode percent-encoded
        sequences into Unicode characters, as accepted by the bytes.decode()
        method.
        By default, percent-encoded sequences are decoded with UTF-8, and invalid
        sequences are replaced by a placeholder character.

        unquote('abc%20def') -> 'abc def'.
        """"""

""""""Like unquote(), but also replace plus signs by spaces, as required for
        unquoting HTML form values.

        unquote_plus('%7e/abc+def') -> '~/abc def'
        """"""

""""""Register a namespace prefix.
        The registry is global, and any existing mapping for either the
        given prefix or the namespace URI will be removed.
        *prefix* is the namespace prefix, *uri* is a namespace uri. Tags and
        attributes in this namespace will be serialized with prefix if possible.
        ValueError is raised if prefix is reserved or is invalid.
        """"""

""""""Expand ~ and ~user constructions.  If user or $HOME is unknown,
            do nothing.""""""

""""""Expand ~ and ~user constructs.

            If user or $HOME is unknown, do nothing.""""""
"
condenast.py,"# coding: utf-8

# The keys are the supported sites and the values are the name to be shown

# to the user and in the extractor description.

#]+)

# JS embed

# New API path

# Old fallbacks
'''(?x)https?://(?:video|www|player(?:-backend)?)\.(?:%s)\.com/
        (?:
            (?:
                embed(?:js)?|
                (?:script|inline)/video
            )/(?P<id>[0-9a-f]{24})(?:/(?P<player_id>[0-9a-f]{24}))?(?:.+?\btarget=(?P<target>[^&]+))?|
            (?P<type>watch|series|video)/(?P<display_id>[^/?#]+)
        )'''""""""
    Condé Nast is a media group, some of its sites use a custom HTML5 player
    that works the same in all of them.
    """"""

"
conf.py,"# coding: utf-8

#

# youtube-dl documentation build configuration file, created by

# sphinx-quickstart on Fri Mar 14 21:05:43 2014.

#

# This file is execfile()d with the current directory set to its

# containing dir.

#

# Note that not all possible configuration values are present in this

# autogenerated file.

#

# All configuration values have a default; values that are commented out

# serve to show the default.


# Allows to import youtube_dl

# -- General configuration ------------------------------------------------


# Add any Sphinx extension module names here, as strings. They can be

# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom

# ones.

# Add any paths that contain templates here, relative to this directory.

# The suffix of source filenames.

# The master toctree document.

# General information about the project.

# The version info for the project you're documenting, acts as replacement for

# |version| and |release|, also used in various other places throughout the

# built documents.

#

# The short X.Y version.

# The full version, including alpha/beta/rc tags.

# List of patterns, relative to source directory, that match files and

# directories to ignore when looking for source files.

# The name of the Pygments (syntax highlighting) style to use.

# -- Options for HTML output ----------------------------------------------


# The theme to use for HTML and HTML Help pages.  See the documentation for

# a list of builtin themes.

# Add any paths that contain custom static files (such as style sheets) here,

# relative to this directory. They are copied after the builtin static files,

# so a file named ""default.css"" will overwrite the builtin ""default.css"".

# Output file base name for HTML help builder.
"
contv.py,"# coding: utf-8

# m3u8 download
"
corus.py,"# coding: utf-8

#video',

#video',
'''(?x)
                    https?://
                        (?:www\.)?
                        (?P<domain>
                            (?:
                                globaltv|
                                etcanada|
                                seriesplus|
                                wnetwork|
                                ytv
                            )\.com|
                            (?:
                                hgtv|
                                foodnetwork|
                                slice|
                                history|
                                showcase|
                                bigbrothercanada|
                                abcspark|
                                disney(?:channel|lachaine)
                            )\.ca
                        )
                        /(?:[^/]+/)*
                        (?:
                            video\.html\?.*?\bv=|
                            videos?/(?:[^/]+/)*(?:[a-z0-9-]+-)?
                        )
                        (?P<id>
                            [\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}|
                            (?:[A-Z]{4})?\d{12,20}
                        )
                    '''
"
coub.py,"# coding: utf-8

# longer video id
"
cpac.py,"# coding: utf-8

# compat_range

# 'url': 'http://www.cpac.ca/en/programs/primetime-politics/episodes/65490909',

# prefer language to match URL
"
cracked.py,"# youtube embed
"
crackle.py,"# coding: utf-8

# geo restricted to CA

# m3u8 download

# Authorization generation algorithm is reverse engineered from:

# https://www.sonycrackle.com/static/js/main.ea93451f.chunk.js

# 401 means geo restriction, trying next country
"
create-github-release.py,"#!/usr/bin/env python

# Our files are small enough to be loaded directly into memory.
"
crooksandliars.py,
crunchyroll.py,"# coding: utf-8

# Already logged in

# Successful login

# Always force skip_wall to bypass maturity wall, namely 18+ confirmation message:

# > This content may be inappropriate for some people.

# > Are you sure you want to continue?

# since it's not disabled by default in crunchyroll account's settings.

# See https://github.com/ytdl-org/youtube-dl/issues/7202.

# rtmp

# rtmp

# m3u8 download

# m3u8 download

# geo-restricted (US), 18+ maturity wall, non-premium available

# A description with double quotes

# Just test metadata extraction

# make sure we can extract an uploader name that's not a link

# just test metadata extraction

# A video with a vastly different season name compared to the series name

# Just test metadata extraction

# Accept-Language must be set explicitly to accept any language to avoid issues

# similar to https://github.com/ytdl-org/youtube-dl/issues/6797.

# Along with IP address Crunchyroll uses Accept-Language to guess whether georestriction

# should be imposed or not (from what I can see it just takes the first language

# ignoring the priority and requires it to correspond the IP). By the way this causes

# Crunchyroll to not work in georestriction cases in some browsers that don't place

# the locale lang first in header. However allowing any language seems to workaround the issue.

# cut off start values

# Extend 160 Bit hash to 256 Bit

# try looking for both an uploader that's a link and one that's not

# webpage provide more accurate data than series_title from XML

# geo-restricted (US), 18+ maturity wall, non-premium available

# geo-restricted (US), 18+ maturity wall, non-premium will be available since 2015.11.14
""""""
[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
""""""

""""""
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
""""""
"
cspan.py,"# md5 is unstable

# Video from senate.gov

# m3u8 downloads

# Ustream embedded video

# Audio Only

# As of 01.12.2020 this path looks to cover all cases making the rest

# of the code unnecessary

# Obsolete

# We first look for clipid, because clipprog always appears before

#text')

"
ctsnews.py,"# coding: utf-8

# News count not appear on page but still available in database

# With Youtube embedded video
"
ctv.py,"# coding: utf-8

#&]+)'
'''{
  resolvedPath(path: ""/%s"") {
    lastSegment {
      content {
        ... on AxisContent {
          axisId
          videoPlayerDestCode
        }
      }
    }
  }
}'''"
ctvnews.py,"# coding: utf-8
"
cultureunplugged.py,"# request setClientTimezone.php to get PHPSESSID cookie which is need to get valid json data in the next request
"
curiositystream.py,"# coding: utf-8

# m3u8 download

# use `m3u8` entry_protocol until EXT-X-MAP is properly supported by `m3u8_native` entry_protocol
"
cwtv.py,"# coding: utf-8

# m3u8 download

# m3u8 download
"
dailymail.py,"# coding: utf-8
"
dailymotion.py,"# coding: utf-8

#)/)?video|swf)|

# Vevo video

# age-restricted video

# geo-restricted, player v5

# with subtitles

# Look for embedded Dailymotion player

# https://developer.dailymotion.com/player#player-parameters

# See https://developer.dailymotion.com/api#access-error

#')[0]

#video=xl8v3q',

#|video|playlist)/)(?:(?:old/)?user/)?(?P<id>[^/]+)'
'''{
  %s(xid: ""%s""%s) {
    %s
  }
}'''
'''(?ix)
                    https?://
                        (?:
                            (?:(?:www|touch)\.)?dailymotion\.[a-z]{2,3}/(?:(?:(?:embed|swf|\#)/)?video|swf)|
                            (?:www\.)?lequipe\.fr/video
                        )
                        /(?P<id>[^/?_]+)(?:.+?\bplaylist=(?P<playlist_id>x[0-9a-z]+))?
                    '''

'''description
      geoblockedCountries {
        allowed
      }
      xid'''


'''... on Video {
      %s
      stats {
        likes {
          total
        }
        views {
          total
        }
      }
    }
    ... on Live {
      %s
      audienceCount
      isOnAir
    }'''
'''videos(allowExplicit: %s, first: %d, page: %d) {
      edges {
        node {
          xid
          url
        }
      }
    }'''"
dash.py,"# In DASH, the first segment contains necessary headers to

# generate a valid MP4 file, so always abort for the first segment

# YouTube may often return 404 HTTP error for a fragment causing the

# whole download to fail. However if the same fragment is immediately

# retried with the same request data this usually succeeds (1-2 attempts

# is usually enough) thus allowing to download the whole file successfully.

# To be future-proof we will retry all fragments that fail with any

# HTTP error.

# Don't retry fragment if error occurred during HTTP downloading

# itself since it has own retry settings
""""""
    Download segments in a DASH manifest
    """"""

"
daum.py,"# coding: utf-8


#&]+)'

# Requires dte_type=WEB (#9972)
"
dbtv.py,"# coding: utf-8
"
dctp.py,"# coding: utf-8

#/)?filme/(?P<id>[^/?#&]+)'

# 4x3

# 16x9
"
deezer.py,"# Only the first 30 seconds
"
defense.py,"#]*)'

"
democracynow.py,"# coding: utf-8

# chapter_file are not subtitles
"
dfb.py,"# see http://tv.dfb.de/player/js/ajax.js for the method to extract m3u8 formats
"
dhm.py,
digg.py,"#&]+)'

# JWPlatform via provider

# Youtube via provider

# vimeo as regular embed
"
digiteka.py,"# coding: utf-8

# news

# music
'''(?x)
        https?://(?:www\.)?(?:digiteka\.net|ultimedia\.com)/
        (?:
            deliver/
            (?P<embed_type>
                generic|
                musique
            )
            (?:/[^/]+)*/
            (?:
                src|
                article
            )|
            default/index/video
            (?P<site_type>
                generic|
                music
            )
            /id
        )/(?P<id>[\d+a-z]+)'''
"
discovery.py,"#]+)'''

# requires ffmpeg

# using `show_slug` is important to get the correct video data

# prefer Affiliate Auth Token over Anonymous Auth Token
'''(?x)https?://
        (?P<site>
            go\.discovery|
            www\.
                (?:
                    investigationdiscovery|
                    discoverylife|
                    animalplanet|
                    ahctv|
                    destinationamerica|
                    sciencechannel|
                    tlc
                )|
            watch\.
                (?:
                    hgtv|
                    foodnetwork|
                    travelchannel|
                    diynetwork|
                    cookingchanneltv|
                    motortrend
                )
        )\.com/tv-shows/(?P<show_slug>[^/]+)/(?:video|full-episode)s/(?P<id>[^./?#]+)'''
"
discoverygo.py,"#&]+)'''

'''(?x)https?://(?:www\.)?(?:
            discovery|
            investigationdiscovery|
            discoverylife|
            animalplanet|
            ahctv|
            destinationamerica|
            sciencechannel|
            tlc|
            velocitychannel
        )go\.com/%s(?P<id>[^/?#&]+)'''

"
discoverynetworks.py,"# coding: utf-8
"
discoveryvr.py,"# coding: utf-8

#]+)'
"
disney.py,"# coding: utf-8

#]+))'''

# Disney.EmbedVideo

# m3u8 download

# Grill.burger

# m3u8 download

# wrong ks(Kaltura Signature) causes 404 Error

# Apple FairPlay
'''(?x)
        https?://(?P<domain>(?:[^/]+\.)?(?:disney\.[a-z]{2,3}(?:\.[a-z]{2})?|disney(?:(?:me|latino)\.com|turkiye\.com\.tr|channel\.de)|(?:starwars|marvelkids)\.com))/(?:(?:embed/|(?:[^/]+/)+[\w-]+-)(?P<id>[a-z0-9]{24})|(?:[^/]+/)?(?P<display_id>[^/?#]+))'''
"
dispeak.py,"# From http://gdcvault.com/play/1023460/Tenacious-Design-and-The-Interface

# From http://www.gdcvault.com/play/1014631/Classic-Game-Postmortem-PAC

# From http://www.gdcvault.com/play/1013700/Advanced-Material

# From https://gdcvault.com/play/1016624, empty speakerVideo

# From http://www.gdcvault.com/play/1014846/Conference-Keynote-Shigeru, empty slideVideo

# Hard-coded in http://evt.dispeak.com/ubm/gdc/sf16/custom/player2.js

# Works for GPUTechConf, too
"
dlive.py,"#&]+)'
'''query {
  pastBroadcast(permlink:""%s+%s"") {
    content
    createdAt
    length
    playbackUrl
    title
    thumbnailUrl
    viewCount
  }
}'''
'''query {
  userByDisplayName(displayname:""%s"") {
    livestream {
      content
      createdAt
      title
      thumbnailUrl
      watchingCount
    }
    username
  }
}'''"
dotsub.py,
douyutv.py,"# coding: utf-8

# \""room_id\""

# Grab metadata from mobile API

# 1 = live, 2 = offline

# Grab the URL from PC client API

# The m3u8 url from mobile API requires re-authentication every 5 minutes

# Sometimes Douyu rejects our request. Let's try it more times
"
dplay.py,"# coding: utf-8

#]+)'

# non geo restricted, via secure api, unsigned download hls URL

# geo restricted, via secure api, unsigned download hls URL

# disco-api
'''(?x)https?://
        (?P<domain>
            (?:www\.)?(?P<host>d
                (?:
                    play\.(?P<country>dk|fi|jp|se|no)|
                    iscoveryplus\.(?P<plus_country>dk|es|fi|it|se|no)
                )
            )|
            (?P<subdomain_country>es|it)\.dplay\.com
        )/[^/]+'''"
drbonanza.py,"#&]+)'
"
dreisat.py,"#&]+)\.html'

# Same as https://www.zdf.de/dokumentation/ab-18/10-wochen-sommer-102.html

# Same as https://www.zdf.de/filme/filme-sonstige/der-hauptmann-112.html

# Same as https://www.zdf.de/wissen/nano/nano-21-mai-2019-102.html, equal media ids
"
dropbox.py,"# coding: utf-8
"
drtuber.py,
drtv.py,"# coding: utf-8

# embed

# with SignLanguage formats

# m3u8 download
'''(?x)
                    https?://
                        (?:
                            (?:www\.)?dr\.dk/(?:tv/se|nyheder|radio(?:/ondemand)?)/(?:[^/]+/)*|
                            (?:www\.)?(?:dr\.dk|dr-massive\.com)/drtv/(?:se|episode|program)/
                        )
                        (?P<id>[\da-z_-]+)
                    '''
"
dtube.py,"# coding: utf-8

#!/)?v/(?P<uploader_id>[0-9a-z.-]+)/(?P<id>[0-9a-z]{8})'

#!/v/broncnutz/x380jtr1',
"
dumpert.py,"# coding: utf-8
"
dvtv.py,"# coding: utf-8

# Test live stream video (liveStarter) parsing

# Video content is no longer available

# remove function calls (ex. htmldeentitize)

# TODO this should be fixed in a general way in the js_to_json
"
dw.py,"# coding: utf-8

# video

# audio

# DW documentaries, only last for one or two weeks
"
eagleplatform.py,"# coding: utf-8

# http://lenta.ru/news/2015/03/06/navalny/

# Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used

# http://muz-tv.ru/play/7129/

# http://media.clipyou.ru/index/player?record_id=12820&width=730&height=415&autoplay=true

# referrer protected video (https://tvrain.ru/lite/teleshow/kak_vse_nachinalos/namin-418921/)

# Regular iframe embedding

# ""Basic usage"" embedding (see http://dultonmedia.github.io/eplayer/)

# Generalization of ""Javascript code usage"", ""Combined usage"" and

# ""Usage without attaching to DOM"" embeddings (see

# http://dultonmedia.github.io/eplayer/)

# Secure mp4 URL is constructed according to Player.prototype.mp4 from

# http://lentaru.media.eagleplatform.com/player/player.js
'''(?x)
                    (?:
                        eagleplatform:(?P<custom_host>[^/]+):|
                        https?://(?P<host>.+?\.media\.eagleplatform\.com)/index/player\?.*\brecord_id=
                    )
                    (?P<id>\d+)
                '''

'''
                        <script[^>]+
                            src=(?P<qjs>[""\'])(?:https?:)?//(?P<host>(?:(?!(?P=qjs)).)+\.media\.eagleplatform\.com)/player/player\.js(?P=qjs)
                        .+?
                    '''

'''(?xs)
                    %s
                    <div[^>]+
                        class=(?P<qclass>[""\'])eagleplayer(?P=qclass)[^>]+
                        data-id=[""\'](?P<id>\d+)
            '''
'''(?xs)
                    %s
                    <script>
                    .+?
                    new\s+EaglePlayer\(
                        (?:[^,]+\s*,\s*)?
                        {
                            .+?
                            \bid\s*:\s*[""\']?(?P<id>\d+)
                            .+?
                        }
                    \s*\)
                    .+?
                    </script>
            '''"
ebaumsworld.py,
echomsk.py,"# coding: utf-8
"
egghead.py,"# coding: utf-8

#&]+)'

#&]+)'
"
ehow.py,
eighttracks.py,"# coding: utf-8

#]+)(?:#.*)?$'

# duration is sometimes negative, use predefined avg duration
"
einthusan.py,"# coding: utf-8

#&]+)'

# reversed from jsoncrypto.prototype.decrypt() in einthusan-PGMovieWatcher.js
'''<img[^>]+src=([""'])(?P<url>(?!\1).+?/moviecovers/(?!\1).+?)\1'''"
eitb.py,"# coding: utf-8
"
ellentube.py,"# coding: utf-8
'''(?x)
                        (?:
                            ellentube:|
                            https://api-prod\.ellentube\.com/ellenapi/api/item/
                        )
                        (?P<id>[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12})
                    '''
"
elpais.py,"# coding: utf-8

#?]+)\.html(?:$|[?#])'

#?id_externo_nwl=newsletter_diaria20160303t',
"
embedly.py,"# coding: utf-8

#]*?&)?url=(?P<id>[^#&]+)'
"
embedthumbnail.py,"# coding: utf-8

# Correct extension for WebP file with wrong extension (see #25687, #25717)

# Convert unsupported thumbnail formats to JPEG (see #25687, #25717)

# NB: % is supposed to be escaped with %% but this does not work

# for input files so working around with standard substitution

#')

# Rename back to unescaped for further processing

# for formats that don't support thumbnails (like 3gp) AtomicParsley

# won't create to the temporary file
"
engadget.py,"#]+)'


# video with 5min ID

# video with vidible ID
"
eporner.py,"# coding: utf-8

# New (May 2016) URL layout

# Reverse engineered from vjs.js
"
eroprofile.py,
escapist.py,
espn.py,"#]+)'
'''(?x)
                    https?://
                        (?:
                            (?:
                                (?:
                                    (?:(?:\w+\.)+)?espn\.go|
                                    (?:www\.)?espn
                                )\.com/
                                (?:
                                    (?:
                                        video/(?:clip|iframe/twitter)|
                                        watch/player
                                    )
                                    (?:
                                        .*?\?.*?\bid=|
                                        /_/id/
                                    )|
                                    [^/]+/video/
                                )
                            )|
                            (?:www\.)espnfc\.(?:com|us)/(?:video/)?[^/]+/\d+/video/
                        )
                        (?P<id>\d+)
                    '''

"
esri.py,"# coding: utf-8
"
europa.py,"# coding: utf-8
"
execafterdownload.py,
expotv.py,"#]*/(?P<id>[0-9]+)($|[?#])'
"
expressen.py,"# coding: utf-8

#&]+)
'''(?x)
                    https?://
                        (?:www\.)?(?:expressen|di)\.se/
                        (?:(?:tvspelare/video|videoplayer/embed)/)?
                        tv/(?:[^/]+/)*
                        (?P<id>[^/?#&]+)
                    '''
"
external.py,"# Live stream downloading cancellation should be considered as

# correct and expected termination thus all postprocessing

# should take place

# curl writes the progress to stderr so don't capture it.

# setting -seekable prevents ffmpeg from guessing if the server

# supports seeking(by adding the header `Range: bytes=0-`), which

# can cause problems in some cases

# https://github.com/ytdl-org/youtube-dl/issues/11800#issuecomment-275037127

# http://trac.ffmpeg.org/ticket/6125#comment:10

# start_time = info_dict.get('start_time') or 0

# if start_time:

#     args += ['-ss', compat_str(start_time)]

# end_time = info_dict.get('end_time')

# if end_time:

#     args += ['-t', compat_str(end_time - start_time)]


# Trailing \r\n after each HTTP header is important to prevent warning from ffmpeg/avconv:

# [http @ 00000000003d2fa0] No trailing CRLF found in HTTP header.

# Since December 2015 ffmpeg supports -http_proxy option (see

# http://git.videolan.org/?p=ffmpeg.git;a=commit;h=b4eb1f29ebddd60c41a2eb39f5af701e38e0d3fd)

# We could switch to the following code if we are able to detect version properly

# args += ['-http_proxy', proxy]

# subprocess.run would send the SIGKILL signal to ffmpeg and the

# mp4 file couldn't be played, but if we ask ffmpeg to quit it

# produces a file that is playable (this is mostly useful for live

# streams). Note that Windows is not affected and produces playable

# files (see https://github.com/ytdl-org/youtube-dl/issues/8300).

# Drop .exe extension on Windows
"""""" Either overwrite this or implement _make_cmd """"""

"""""" Given the name of the executable, see whether we support the given
        downloader . """"""
"
extractors.py,"# flake8: noqa
"
extremetube.py,"#?&]+)'
"
eyedotv.py,"# coding: utf-8

#!/)?Live/Detail/(?P<id>[0-9]+)'

#!/Live/Detail/16301',

# http://eyedo.tv/Content/Html5/Scripts/html5view.js
"
f4m.py,"# Utility functions for reading numbers and strings

# version

# flags

# QualityEntryCount

# version

# flags

# time scale

# QualitySegmentUrlModifiers

# version

# flags

# BootstrapinfoVersion

# Profile,Live,Update,Reserved

# time scale

# CurrentMediaTime

# SmpteTimeCodeOffset

# MovieIdentifier

# ServerEntryTable

# QualityEntryTable

# DrmData

# MetaData

# In some live HDS streams (for example Rai), `fragments_count` is

# abnormal and causing out-of-memory errors. It's OK to change the

# number of fragments for live streams as they are updated periodically

# FLV header

# If id attribute is missing it's valid for all media nodes

# without drmAdditionalHeaderId or drmAdditionalHeaderSetId attribute

# Retry after a while

# Sometimes non empty inline bootstrap info can be specified along

# with bootstrap url attribute (e.g. dummy inline bootstrap info

# contains whitespace characters in [1]). We will prefer bootstrap

# url over inline bootstrap info when present.

# 1. http://live-1-1.rutube.ru/stream/1024/HDS/SD/C2NKsS85HQNckgn5HdEmOQ/1454167650/S-s604419906/move/four/dirs/upper/1024-576p.f4m

# Some manifests may be malformed, e.g. prosiebensat1 generated manifests

# (see https://github.com/ytdl-org/youtube-dl/issues/6215#issuecomment-121704244

# and https://github.com/ytdl-org/youtube-dl/issues/7823)

# get the best format

# Prefer baseURL for relative URLs as per 11.2 of F4M 3.0 spec.

# We only download the first fragment

# For some akamai manifests we'll need to add a query to the fragment url

# In tests, segments may be truncated, and thus

# FlvReader may not be able to parse the whole

# chunk. If so, write the segment as is

# See https://github.com/ytdl-org/youtube-dl/issues/9214

# We didn't keep up with the live window. Continue

# with the next available fragment.
""""""
    Reader for Flv files
    The file format is documented in https://www.adobe.com/devnet/f4v.html
    """"""


""""""
        Read a box and return the info as a tuple: (box_size, box_type, box_data)
        """"""

"""""" Return a list of (segment, fragment) for each fragment in the video """"""

""""""Writes the FLV header to stream""""""

""""""Writes optional metadata tag to stream""""""

""""""
    A downloader for f4m manifests or AdobeHDS.
    """"""

"
facebook.py,"# coding: utf-8

#]*?\#!/)?

# data.video

# have 1080P, but only up to 720p in swf params

# data.video.story.attachments[].media

# bigPipe.onPageletArrive ... onPageletArrive pagelet_group_mall

# data.node.comet_sections.content.story.attachments[].style_type_renderer.attachment.media

# data.node.comet_sections.content.story.attachments[].style_type_renderer.attachment.media

# data.mediaset.currMedia.edges

# data.video.story.attachments[].media

# data.node.comet_sections.content.story.attachments[].style_type_renderer.attachment.media

# data.video.creation_story.attachments[].media

# data.video

# no title

# data.video

#ESLOne VoD - Birmingham Finals Day#1 Fnatic vs. @Evil Geniuses',

# data.node.comet_sections.content.story.attachments[].style_type_renderer.attachment.all_subattachments.nodes[].media

# data.video.story.attachments[].media

# data.node.comet_sections.content.story.attachments[].style_type_renderer.attachment.all_subattachments.nodes[].media

# data.nodes[].comet_sections.content.story.attachments[].style_type_renderer.attachment.media

# TODO: title can be extracted from video page

#117576630041613',

# node.comet_sections.content.story.attached_story.attachments.style_type_renderer.attachment.media

#211567722618337',

# data.video.creation_story.attachments[].media

# Facebook API embed

# see https://developers.facebook.com/docs/plugins/embedded-video-player

# Downloads with browser's User-Agent are rate limited. Working around

# with non-browser User-Agent.

#%s' % v_id

# Video info not in first request, do a secondary request using

# tahoe player specific URL

#%s' % video_id
'''(?x)
                (?:
                    https?://
                        (?:[\w-]+\.)?(?:facebook\.com|facebookcorewwwi\.onion)/
                        (?:[^#]*?\#!/)?
                        (?:
                            (?:
                                video/video\.php|
                                photo\.php|
                                video\.php|
                                video/embed|
                                story\.php|
                                watch(?:/live)?/?
                            )\?(?:.*?)(?:v|video_id|story_fbid)=|
                            [^/]+/videos/(?:[^/]+/)?|
                            [^/]+/posts/|
                            groups/[^/]+/permalink/|
                            watchparty/
                        )|
                    facebook:
                )
                (?P<id>[0-9]+)
                '''

'''(?x)<div[^>]+
                class=(?P<q1>[\'""])[^\'""]*\bfb-(?:video|post)\b[^\'""]*(?P=q1)[^>]+
                data-href=(?P<q2>[\'""])(?P<url>(?:https?:)?//(?:www\.)?facebook.com/.+?)(?P=q2)'''"
faz.py,"# coding: utf-8

#/?[0-9a-f]{26}\.[0-9a-z]{26})"",
"
fc2.py,"# coding: utf-8

# Log in

# this is also needed

# must clear

# most of the time we can still download wideo even if err_code is 403 or 602

# See thumbnailImagePath() in ServerConst.as of flv2.swf
"
fczenit.py,"# coding: utf-8
"
ffmpeg.py,"# Ubuntu, see [1]

# Arch Linux

# 1. http://www.ducea.com/2006/06/17/ubuntu-package-version-naming-explanation/

# Stream #FILE_INDEX:STREAM_INDEX[STREAM_ID](LANGUAGE): CODEC_TYPE: CODEC_NAME

#\d+:\d+(?:\[0x[0-9a-f]+\])?(?:\([a-z]{3}\))?:\s*Audio:\s*([0-9a-z]+)',

# avconv does not have repeat option

# Always use 'file:' because the filename may contain ':' (ffmpeg

# interprets that as a protocol) or can start with '-' (-- is broken in

# ffmpeg, see https://ffmpeg.org/trac/ffmpeg/ticket/2127 for details)

# Also leave '-' intact in order not to break streaming to stdout.

# Lossless, but in another container

# Lossless if possible

# MP3 otherwise.

# We convert the audio (lossy if codec is lossy)

# The opus codec doesn't support the -aq option

# not os.path.splitext, since the latter does not work on unicode in all setups

# If we download foo.mp3 and convert it to... foo.mp3, then don't delete foo.mp3, silly.

# Try to update the date time for extracted audio file.

# Don't copy the existing subtitles, we may be running the

# postprocessor a second time

# Don't copy Apple TV chapters track, bin_data (see #19042, #19024,

# https://trac.ffmpeg.org/ticket/6016)

# See [1-4] for some info on media metadata/metadata supported

# by ffmpeg.

# 1. https://kdenlive.org/en/project/adding-meta-data-to-mp4-video/

# 2. https://wiki.multimedia.cx/index.php/FFmpeg_Metadata

# 3. https://kodi.wiki/view/Video_file_tagging

# 4. http://atomicparsley.sourceforge.net/mpeg-4files.html


#|\\|\n)', r'\\\1', text)


# TODO: figure out merge-capable ffmpeg version
"
filmon.py,"# coding: utf-8

# VOD

# LIVE

# this is an m3u8 stream, but we are deliberately not using _extract_m3u8_formats

# because it doesn't have bitrate variants anyway
"
filmweb.py,
firsttv.py,"# coding: utf-8

#]+)'


# single format

# multiple formats

# quality metadata of http formats may be incorrect

# m3u8 URL format is reverse engineered from [1] (search for

# master.m3u8). dashEdges (that is currently balancer-vod.1tv.ru)

# is taken from [2].

# 1. http://static.1tv.ru/player/eump1tv-current/eump-1tv.all.min.js?rnd=9097422834:formatted

# 2. http://static.1tv.ru/player/eump1tv-config/config-main.js?rnd=9097422834
"
fish-completion.py,"#!/usr/bin/env python

# Options that need a file parameter
"
fivemin.py,"# From http://www.engadget.com/2013/11/15/ipad-mini-retina-display-review/

# m3u8 download

# From http://on.aol.com/video/how-to-make-a-next-level-fruit-salad-518086247
"
fivetv.py,"# coding: utf-8

#]+)(?:[/?#])?

# redirect to https://www.5-tv.ru/projects/1000095/izvestia-glavnoe/

#itemDetails',
'''(?x)
                    https?://
                        (?:www\.)?5-tv\.ru/
                        (?:
                            (?:[^/]+/)+(?P<id>\d+)|
                            (?P<path>[^/?#]+)(?:[/?#])?
                        )
                    '''

"
flickr.py,"# https://help.yahoo.com/kb/flickr/SLN25525.html
"
folketinget.py,"# coding: utf-8

#]*?\.(?P<id>[0-9]+)\.aspx'

#player',

# rtmp download
"
footyroom.py,"# coding: utf-8
"
formula1.py,"# coding: utf-8
"
fourtube.py,"#&]+))?'

#&]+))?'
"
fox.py,"# coding: utf-8

# clip

# episode, geo-restricted

# episode, geo-restricted, tv provided required
"
fox9.py,"# coding: utf-8

#]+)'
"
foxgay.py,"# The default user-agent with foxgay cookies leads to pages without videos

# Find the URL for the iFrame which contains the actual video.
"
foxnews.py,"#sp=show-clips',

#sp=show-clips',

# m3u8 download

# From http://insider.foxnews.com/2016/08/25/univ-wisconsin-student-group-pushing-silence-certain-words

# data-video-id

# iframe embed
"
foxsports.py,"# TODO: fix timestamp

# '20150423',

# 'timestamp': 1429761109,

# m3u8 download
"
fragment.py,"# Establish possible resume length

# Should be initialized before ytdl file check

# Total complete fragments downloaded so far in bytes

# This dict stores the download progress, it's updated by the progress

# hook

# Amount of fragment's bytes downloaded by the time of the previous

# frag progress hook invocation
""""""
    A base file downloader class for fragmented media (e.g. f4m/m3u8 manifests).

    Available options:

    fragment_retries:   Number of times to retry a fragment for HTTP error (DASH
                        and hlsnative only)
    skip_unavailable_fragments:
                        Skip unavailable fragments (DASH and hlsnative only)
    keep_fragments:     Keep downloaded fragments on disk after downloading is
                        finished

    For each incomplete fragment download youtube-dl keeps on disk a special
    bookkeeping file with download state and metadata (in future such files will
    be used for any incomplete download handled by youtube-dl). This file is
    used to properly handle resuming, check download file consistency and detect
    potential errors. The file has a .ytdl extension and represents a standard
    JSON file of the following format:

    extractor:
        Dictionary of extractor related data. TBD.

    downloader:
        Dictionary of downloader related data. May contain following data:
            current_fragment:
                Dictionary with current (being downloaded) fragment data:
                index:  0-based index of current fragment among all fragments
            fragment_count:
                Total count of fragments

    This feature is experimental and file format may change in future.
    """"""

"
franceculture.py,"# coding: utf-8

#&]+)'

# no thumbnail
'''(?sx)
                (?:
                    </h1>|
                    <div[^>]+class=""[^""]*?(?:title-zone-diffusion|heading-zone-(?:wrapper|player-button))[^""]*?""[^>]*>
                ).*?
                (<button[^>]+data-(?:url|asset-source)=""[^""]+""[^>]+>)
            '''"
franceinter.py,"# coding: utf-8

#]+)'

"
francetv.py,"# coding: utf-8


# without catalog

# with catalog

# france-3 live

# Videos are identified by idDiffusion so catalogue part is optional.

# However when provided, some extra formats may be returned so we pass

# it if available.

# See https://github.com/ytdl-org/youtube-dl/issues/3963

# m3u8 urls work fine

# france3

# france4

# france5

# franceo

# france2 live

# france-3 live

#&.]+)'


# Dailymotion embed

# ""<figure id="" pattern (#28792)

#&]+)'

#&]+)'


#&]+)'


#&]+))'

'''(?x)
                    (?:
                        https?://
                            sivideo\.webservices\.francetelevisions\.fr/tools/getInfosOeuvre/v2/\?
                            .*?\bidDiffusion=[^&]+|
                        (?:
                            https?://videos\.francetv\.fr/video/|
                            francetv:
                        )
                        (?P<id>[^@]+)(?:@(?P<catalog>.+))?
                    )
                    '''

"
freesound.py,
freespeech.py,
freshlive.py,"# coding: utf-8
"
frontendmasters.py,"# coding: utf-8

# Successful login
"
fujitv.py,"# coding: utf-8
"
funimation.py,"# coding: utf-8

#&]+)'


# m3u8 download

# m3u8 download

# with lang code
"
funk.py,"# coding: utf-8
"
fusion.py,
gaia.py,"# coding: utf-8

# m3u8 download

# m3u8 download
"
gameinformer.py,"# coding: utf-8

#]+)'

# normal Brightcove embed code extracted with BrightcoveNewIE._extract_url

# Brightcove id inside unique element with field--name-field-brightcove-video-id class
"
gamespot.py,
gamestar.py,"# coding: utf-8

# TODO: there are multiple ld+json objects in the webpage,

# while _search_json_ld finds only the first one
"
gaskrank.py,"# coding: utf-8
"
gazeta.py,"# coding: utf-8
"
gdcvault.py,"# Requires rtmpdump

# Hard-coded hostname

# Multiple audios

# 'params': {

#     'skip_download': True,  # Requires rtmpdump

#     'format': 'jp',  # The japanese audio

# }

# gdc-player.html

# Kaltura Embed

# Kaltura embed, whitespace between quote and embedded URL in iframe's src

# HTML5 video

# resolve the url so that we can detect the correct extension

# Probably need to authenticate

# Grab the url from the authenticated page
"
gedidigital.py,"# coding: utf-8

#]|$)'''
'''(?x)https?://video\.
        (?:
            (?:
                (?:espresso\.)?repubblica
                |lastampa
                |ilsecoloxix
            )|
            (?:
                iltirreno
                |messaggeroveneto
                |ilpiccolo
                |gazzettadimantova
                |mattinopadova
                |laprovinciapavese
                |tribunatreviso
                |nuovavenezia
                |gazzettadimodena
                |lanuovaferrara
                |corrierealpi
                |lasentinella
            )\.gelocal
        )\.it(?:/[^/]+){2,3}?/(?P<id>\d+)(?:[/?&#]|$)'''
"
generate-download.py,"#!/usr/bin/env python3

# Read template page
"
generate_aes_testdata.py,
generic.py,"# coding: utf-8


# Direct link to a video

# Direct link to media delivered compressed (until Accept-Encoding is *)

# Direct download with broken HEAD

# infinite live stream

# Direct link with incorrect MIME type

# RSS feed

# RSS feed with enclosure

# RSS feed with item with description and thumbnails

# RSS feed with enclosures and unsupported link URLs

# SMIL from http://videolectures.net/promogram_igor_mekjavic_eng

# SMIL from http://www1.wdr.de/mediathek/video/livestream/index.html

# SMIL from https://www.restudy.dk/video/play/id/1637

# SMIL from http://adventure.howstuffworks.com/5266-cool-jobs-iditarod-musher-video.htm

# SMIL from http://new.livestream.com/CoheedandCambria/WebsterHall/videos/4719370

# XSPF playlist from http://www.telegraaf.nl/tv/nieuws/binnenland/24353229/__Tikibad_ontruimd_wegens_brand__.html

# MPD from http://dash-mse-test.appspot.com/media.html

# m3u8 served with Content-Type: audio/x-mpegURL; charset=utf-8

# m3u8 downloads

# m3u8 served with Content-Type: text/plain

# m3u8 downloads

# google redirect

# redirect in Refresh HTTP header

# bandcamp page with custom domain

# embedded brightcove video

# it also tests brightcove videos that need to set the 'Referer'

# in the http requests

# embedded with itemprop embedURL and video id spelled as `idVideo`

# https://github.com/ytdl-org/youtube-dl/issues/2253

# https://github.com/ytdl-org/youtube-dl/issues/3541

# m3u8 download

# Brightcove video in <iframe>

# Brightcove with alternative playerID key

# Brightcove with UUID in videoPlayer

# m3u8 download

# Brightcove:new type [2].

# Alternative brightcove <video> attributes

# Brightcove with UUID in videoPlayer

# m3u8 download

# ooyala video

# that's what we get

# ooyala video embedded with http://player.ooyala.com/iframe.js

# ooyala video embedded with http://player.ooyala.com/static/v4/production/latest/core.min.js

# embed.ly video

# No need to test YoutubeIE here

# funnyordie embed

# HEAD requests lead to endless 301, while GET is OK

# RUTV embed

# m3u8 download

# TVC embed

# SportBox embed

# m3u8 download

# Myvi.ru embed

# XHamster embed

# This forum does not allow <iframe> syntaxes anymore

# Now HTML tags are displayed as-is

# Embedded TED video

# nowvideo embed hidden behind percent encoding

# arte embed

# francetv embed

# m3u8 downloads

# Condé Nast embed

# Dailymotion embed

# DailyMail embed

# YouTube embed

# MTVServices embed

# YouTube embed via <data-embed-url="""">

# YouTube <object> embed

# Camtasia studio

# Flowplayer

# Multiple brightcove videos

# https://github.com/ytdl-org/youtube-dl/issues/2283

# MLB embed

# Wistia embed

#lesson',

# Wistia standard embed (async)

# Soundcloud embed

# Soundcloud multiple embeds

# TuneIn station embed

# Live stream

# Livestream embed

#CometLanding webcast HL 10',

# Another Livestream embed, without 'new.' in URL

# Live stream

# LazyYT

# Cinchcast embed

# Cinerama player

# embedded viddler video

# Libsyn embed

# jwplayer YouTube

# jwplayer rtmp

# Complex jwplayer

# JWPlayer config passed as variable

# JWPlatform iframe

# Video.js embed, multiple formats

# Video.js embed, single format

# rtl.nl embed

# Zapiks embed

# Kaltura embed (different embed code)

# Kaltura embed with single quotes

# Kaltura embedded via quoted entry_id

# Kaltura embedded, some fileExt broken (#11480)

# Kaltura iframe embed

# Kaltura iframe embed, more sophisticated

# meta twitter:player

# referrer protected EaglePlatform embed

# ClipYou (EaglePlatform) embed (custom URL)

# Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used

# Pladform embed

# Playwire embed

# 5min embed

# m3u8 download

# Crooks and Liars embed

# Crooks and Liars external embed

# NBC Sports vplayer embed

# NBC News embed

# UDN embed

# m3u8 download

# Brightcove URL in single quotes

# Kinja embed

# SnagFilms embed

#whilewewatch',

# AdobeTVVideo embed

# BrightcoveInPageEmbed embed

# Brightcove embed, with no valid 'renditions' but valid 'IOSRenditions'

# This video can't be played in browsers if Flash disabled and UA set to iPhone, which is actually a false alarm

# m3u8 downloads

# Brightcove embed with whitespace around attribute names

# Another form of arte.tv embed

# Duplicated embedded video URLs

# twitter:player:stream embed

# m3u8 downloads

# twitter:player embed

# Facebook <iframe> embed

#599637780109885',

# Facebook <iframe> embed, plugin video

# Facebook API embed

#10153467542406923',

# Wordpress ""YouTube Video Importer"" plugin

# video stored on custom kaltura server

# multiple kaltura embeds, nsfw

# Non-standard Vimeo embed

# generic vimeo embed that requires original URL passed as Referer

# DBTV embeds

# Videa embeds

# 20 minuten embed

# VideoPress embed

# Rutube embed

# ThePlatform embedded with whitespaces in URLs

# Senate ISVP iframe https

# Limelight embeds (1 channel embed + 4 media embeds)

# Limelight embed (LimelightPlayerUtil.embed)

# WashingtonPost embed

# Mediaset embed

# JOJ.sk embeds

# AMP embed (see https://www.ampproject.org/docs/reference/components/amp-video)

# vzaar embed

# multiple HTML5 videos on one page

# vshare embed

# CloudflareStream embed

# PeerTube embed

#JoinPeertube',

# Indavideo embed

# APA embed via JWPlatform embed

# Viqeo embeds

# Squarespace video embed, 2019-08-28

# {

#     # Zype embed

#     'url': 'https://www.cookscountry.com/episode/554-smoky-barbecue-favorites',

#     'info_dict': {

#         'id': '5b400b834b32992a310622b9',

#         'ext': 'mp4',

#         'title': 'Smoky Barbecue Favorites',

#         'thumbnail': r're:^https?://.*\.jpe?g',

#         'description': 'md5:5ff01e76316bd8d46508af26dc86023b',

#         'upload_date': '20170909',

#         'timestamp': 1504915200,

#     },

#     'add_ie': [ZypeIE.ie_key()],

#     'params': {

#         'skip_download': True,

#     },

# },

# videojs embed

# DailyMotion embed with DM.player

# {

#     # TODO: find another test

#     # http://schema.org/VideoObject

#     'url': 'https://flipagram.com/f/nyvTSJMKId',

#     'md5': '888dcf08b7ea671381f00fab74692755',

#     'info_dict': {

#         'id': 'nyvTSJMKId',

#         'ext': 'mp4',

#         'title': 'Flipagram by sjuria101 featuring Midnight Memories by One Direction',

#         'description': '#love for cats.',

#         'timestamp': 1461244995,

#         'upload_date': '20160421',

#     },

#     'params': {

#         'force_generic_extractor': True,

#     },

# },

# VHX Embed

# ArcPublishing PoWa video player

# MyChannels SDK embed

# https://www.24kitchen.nl/populair/deskundige-dit-waarom-sommigen-gevoelig-zijn-voor-voedselallergieen

# Simplecast player embed

# Sibnet embed (https://help.sibnet.ru/?sibnet_video_embed)

# KVS Player

# KVS Player

# KVS Player (tested also in thisvid.py)

# KVS Player

# KVS Player

# KVS Player (for sites that serve kt_player.js via non-https urls)

# not obfuscated


# extract the part after the last / as the display_id from the

# canonical URL.

# Check for redirect

# Check for direct link to a video

# Some webservers may serve compressed content of rather big size (e.g. gzipped flac)

# making it impossible to download only chunk of the file (yet we need only 512kB to

# test whether it's HTML or not). According to youtube-dl default Accept-Encoding

# that will always result in downloading the whole file that is not desirable.

# Therefore for extraction pass we have to override Accept-Encoding to any in order

# to accept raw bytes and being able to download only a chunk.

# It may probably better to solve this by checking Content-Type for application/octet-stream

# after HEAD request finishes, but not sure if we can rely on this.

# Is it an M3U playlist?

#EXTM3U'):

# Maybe it's a direct link to a video?

# Be careful not to download the whole thing!

# Is it an RSS feed, a SMIL file, an XSPF playlist or a MPD manifest?

# Is it a Camtasia project?

# Sometimes embedded video player is hidden behind percent encoding

# (e.g. https://github.com/ytdl-org/youtube-dl/issues/2448)

# Unescaping the whole page allows to handle those cases in a generic way

# FIXME: unescaping the whole page may break URLs, commenting out for now.

# There probably should be a second run of generic extractor on unescaped webpage.

# webpage = compat_urllib_parse_unquote(webpage)


# Unescape squarespace embeds to be detected by generic extractor,

# see https://github.com/ytdl-org/youtube-dl/issues/21294

# it's tempting to parse this further, but you would

# have to take into account all the variations like

#   Video Title - Site Name

#   Site Name | Video Title

#   Video Title - Tagline | Site Name

# and so on and so forth; it's just not practical

# Try to detect age limit automatically

# And then there are the jokers who advertise that they use RTA,

# but actually don't.

# video uploader is domain name

# Look for Brightcove Legacy Studio embeds

# Look for Brightcove New Studio embeds

# Look for Nexx embeds

# Look for Nexx iFrame embeds

# Look for ThePlatform embeds

# Look for embedded rtl.nl player

# Look for YouTube embeds

# Look for embedded Dailymotion playlist player (#3822)

# Look for DailyMail embeds

# Look for Teachable embeds, must be before Wistia

# Look for embedded Wistia player

# Look for SVT player

# Look for Bandcamp pages with custom domain

# Don't set the extractor because it can be a track url or an album

# Look for embedded Vevo player

# Look for embedded Viddler player

# Look for NYTimes player

# Look for Libsyn player

# Look for Ooyala videos

#][^""]*?(?:embedCode|ec)=(?P<ec>[^""&]+)', webpage)

# Look for multiple Ooyala embeds on SBN network websites

# Look for Aparat videos

# Look for MPORA videos

# Look for embedded Facebook player

# Look for embedded VK player

# Look for embedded Odnoklassniki player

# Look for sibnet embedded player

# Look for embedded ivi player

# Look for embedded Huffington Post player

# Look for embed.ly

# Look for funnyordie embed

# Look for Simplecast embeds

# Look for BBC iPlayer embed

# Look for embedded RUTV player

# Look for embedded TVC player

# Look for embedded SportBox player

# Look for embedded XHamster player

# Look for embedded TNAFlixNetwork player

# Look for embedded PornHub player

# Look for embedded DrTuber player

# Look for embedded RedTube player

# Look for embedded Tube8 player

# Look for embedded Mofosex player

# Look for embedded Spankwire player

# Look for embedded YouPorn player

# Look for embedded Tvigle player

# Look for embedded TED player

# Look for embedded Ustream videos

# Look for embedded arte.tv player

# Look for embedded francetv player

# Look for embedded Myvi.ru player

# Look for embedded soundcloud player

# Look for tunein player

# Look for embedded mtvservices player

# Look for embedded yahoo player

# Look for embedded sbs.com.au player

# Look for embedded Cinchcast player

# Look for Zapiks embed

# Look for Kaltura embeds

# Look for EaglePlatform embeds

# Look for ClipYou (uses EaglePlatform) embeds

# Look for Pladform embeds

# Look for Videomore embeds

# Look for Webcaster embeds

# Look for Playwire embeds

# Look for 5min embeds

# Look for Crooks and Liars embeds

# Look for NBC Sports VPlayer embeds

# Look for NBC News embeds

# Look for Google Drive embeds

# Look for UDN embeds

# Look for Senate ISVP iframe

# Look for Kinja embeds

# Look for OnionStudios embeds

# Look for ViewLift embeds

# Look for JWPlatform embeds

# Look for Digiteka embeds

# Look for Arkena embeds

# Look for Piksel embeds

# Look for Limelight embeds

# Look for Anvato embeds

# Look for AdobeTVVideo embeds

# Look for Vine embeds

# Look for VODPlatform embeds

# Look for Mangomolo embeds

# Look for Instagram embeds

# Look for 3Q SDN embeds

# Look for VBOX7 embeds

# Look for DBTV embeds

# Look for Videa embeds

# Look for 20 minuten embeds

# Look for VideoPress embeds

# Look for Rutube embeds

# Look for WashingtonPost embeds

# Look for Mediaset embeds

# Look for JOJ.sk embeds

# Look for megaphone.fm embeds

# Look for vzaar embeds

# Look for Mediasite embeds

# Look for HTML5 media

# See https://github.com/ytdl-org/youtube-dl/pull/16735

# Video.js embed

# Look for generic KVS player (before ld+json for tests)

# kt_player('kt_player', 'https://i.shoosh.co/player/kt_player.swf?v=5.5.1', ...

# Looking for http://schema.org/VideoObject

# Start with something easy: JW Player in SWFObject

# Look for gorilla-vid style embedding

# Broaden the search a little bit

# Broaden the findall a little bit: JWPlayer JS loader

# Flow player

# Cinerama player

# Try to find twitter cards info

# twitter:player:stream should be checked before twitter:player since

# it is expected to contain a raw stream (see

# https://dev.twitter.com/cards/types/player#On_twitter.com_via_desktop_browser)

# We look for Open Graph info:

# We have to match any number spaces between elements, some sites try to align them (eg.: statigr.am)

# We only look in og:video if the MIME type is a video, don't try if it's a Flash player:

# Look also in Refresh HTTP header

# In python 2 response HTTP headers are bytestrings

# twitter:player is a https URL to iframe player that may or may not

# be supported by youtube-dl thus this is checked the very last (see

# https://dev.twitter.com/cards/types/player#On_twitter.com_via_desktop_browser)

# Sometimes, jwplayer extraction will result in a YouTube URL

# here's a fun little line of code for you:

# Just matching .ism/manifest is not enough to be reliably sure

# whether it's actually an ISM manifest or some other streaming

# manifest since there are various streaming URL formats

# possible (see [1]) as well as some other shenanigans like

# .smil/manifest URLs that actually serve an ISM (see [2]) and

# so on.

# Thus the most reasonable way to solve this is to delegate

# to generic extractor in order to look into the contents of

# the manifest itself.

# 1. https://azure.microsoft.com/en-us/documentation/articles/media-services-deliver-content-overview/#streaming-url-formats

# 2. https://svs.itworkscdn.net/lbcivod/smil:itwfcdn/lbci/170976.smil/Manifest

# 'url' results don't have a title
'''(?x)
            (?:
                <meta\s+property=""og:video""\s+content=|
                <iframe[^>]+?src=
            )
            ([""\'])(?P<url>https?://(?:www\.)?sbs\.com\.au/ondemand/video/.+?)\1'''
'''(?x)<iframe[^>]+src=([""\'])(?P<url>(?:https?:)?//
                (?:
                    admin\.mangomolo\.com/analytics/index\.php/customers/embed|
                    player\.mangomolo\.com/v1
                )/
                (?:
                    video\?.*?\bid=(?P<video_id>\d+)|
                    (?:index|live)\?.*?\bchannelid=(?P<channel_id>(?:[A-Za-z0-9+/=]|%2B|%2F|%3D)+)
                ).+?)\1'''
'''(?sx)
                (?:
                    jw_plugins|
                    JWPlayerOptions|
                    jwplayer\s*\(\s*[""'][^'""]+[""']\s*\)\s*\.setup
                )
                .*?
                ['""]?file['""]?\s*:\s*[""\'](.*?)[""\']'''
'''(?xs)
                flowplayer\(""[^""]+"",\s*
                    \{[^}]+?\}\s*,
                    \s*\{[^}]+? [""']?clip[""']?\s*:\s*\{\s*
                        [""']?url[""']?\s*:\s*[""']([^""']+)[""']
            '''""""""Report information extraction.""""""

"""""" Returns None if no camtasia video can be found. """"""

"
gfycat.py,"# coding: utf-8

#\.]+)'
"
giantbomb.py,
giga.py,"# coding: utf-8

#v=(\d+)'],

#v={0}[^""]*"")[^>]*>.+?<span class=""duration"">([^<]+)</span>'.format(video_id),
"
gigya.py,
glide.py,"# coding: utf-8
"
globo.py,"# coding: utf-8
"
go.py,"# coding: utf-8

#]+)

# m3u8 download

# m3u8 download

# m3u8 download

# m3u8 download

# m3u8 download

# brand 004

# brand 008

# https://abc.com/shows/modern-family/episode-guide/season-01/101-pilot

# There may be inner quotes, e.g. data-video-id=""'VDKA3609139'""

# from http://freeform.go.com/shows/shadowhunters/episodes/season-2/1-this-guilty-blood

# page.analytics.videoIdCode

# https://abc.com/shows/the-rookie/episode-guide/season-02/03-the-bet

# show extraction works for Disney, DisneyJunior and DisneyXD

# ABC and Freeform has different layout
'''(?x)
                    https?://
                        (?:
                            (?:(?P<sub_domain>%s)\.)?go|
                            (?P<sub_domain_2>abc|freeform|disneynow|fxnow\.fxnetworks)
                        )\.com/
                        (?:
                            (?:[^/]+/)*(?P<id>[Vv][Dd][Kk][Aa]\w+)|
                            (?:[^/]+/)*(?P<display_id>[^/?\#]+)
                        )
                    '''"
godtube.py,
golem.py,"# coding: utf-8
"
googledrive.py,"# video can't be watched anonymously due to view count limit reached,

# but can be downloaded (see https://github.com/ytdl-org/youtube-dl/issues/14046)

# video id is longer than 28 characters

# Use redirect URLs as download URLs in order to calculate

# correct cookies in _calc_cookies.

# Using original URLs may result in redirect loop due to

# google.com's cookies mistakenly used for googleusercontent.com

# redirect URLs (see #23919).

# the video Id for subtitles will be the last value in the ttsurl

# query string
'''(?x)
                        https?://
                            (?:
                                (?:docs|drive)\.google\.com/
                                (?:
                                    (?:uc|open)\?.*?id=|
                                    file/d/
                                )|
                                video\.google\.com/get_player\?.*?docid=
                            )
                            (?P<id>[a-zA-Z0-9_-]{28,})
                    '''
"
googlepodcasts.py,"# coding: utf-8

#]+)'

#]+)/?(?:[?#&]|$)'
"
googlesearch.py,"# Skip playlists
""""""Get a specified number of results for a query""""""

"
goshgay.py,"# coding: utf-8
"
gputechconf.py,"# coding: utf-8
"
groupon.py,"#&]+)'


#ooid=tubGNycTo_9Uxg82uESj4i61EYX8nyuf',
"
hbo.py,"# coding: utf-8

#]+)'
"
hearthisat.py,"# coding: utf-8

# 'download' link redirects to the original webpage

# Usually better quality
"
heise.py,"# coding: utf-8

# kaltura embed

# YouTube embed
"
hellporno.py,
helper.py,"# Different instances of the downloader can't share the same dictionary

# some test set the ""sublang"" parameter, which would break the md5 checks.

# Silence an expected warning matching a regex

# Check for the presence of mandatory fields

# Check for mandatory fields that are automatically set by YoutubeDL

# Are checkable fields missing from the test case definition?

# In Jython SSLSocket is not a subclass of socket.socket
'''
    Print the message to stderr, it will be prefixed with 'WARNING:'
    If stderr is a tty file the 'WARNING:' will be colored
    '''
"""""" Remove a file if it exists """"""
"
helsinki.py,"# coding: utf-8


# RTMP
"
hentaistigma.py,
hgtv.py,"# coding: utf-8

#&]+)'

# data-module=""video""

# data-deferred-module=""video""
"
hidive.py,"# coding: utf-8

#&]+)'

# Using X-Forwarded-For results in 403 HTTP error for HLS fragments,

# so disabling geo bypass completely
"
historicfilms.py,
hitbox.py,"# coding: utf-8

#6',

# m3u8 download

#&]+)'

# live

# Subscribe URLs are not playable
"
hitrecord.py,
hketv.py,"# coding: utf-8

# If we ever wanted to provide the final resolved URL that

# does not require cookies, albeit with a shorter lifespan:

#     urlh = self._downloader.urlopen(file_url)

#     resolved_url = urlh.geturl()

# Likes
"
hls.py,"#EXT-X-KEY:METHOD=(?!NONE|AES-128)',  # encrypted streams [1]

# r'#EXT-X-BYTERANGE',  # playlists composed of byte ranges of media files [2]


# Live streams heuristic does not always work (e.g. geo restricted to Germany

# http://hls-geo.daserste.de/i/videoportal/Film/c_620000/622873/format,716451,716457,716450,716458,716459,.mp4.csmil/index_4_av.m3u8?null=0)

# r'#EXT-X-MEDIA-SEQUENCE:(?!0$)',  # live streams [3]


# This heuristic also is not correct since segments may not be appended as well.

# Twitch vods of finished streams have EXT-X-PLAYLIST-TYPE:EVENT despite

# no segments will definitely be appended to the end of the playlist.

# r'#EXT-X-PLAYLIST-TYPE:EVENT',  # media segments may be appended to the end of

#                                 # event media playlists [4]

#EXT-X-MAP:',  # media initialization [5]


# 1. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.2.4

# 2. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.2.2

# 3. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.3.2

# 4. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.3.5

# 5. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.2.5

#EXT-X-KEY:METHOD=AES-128' in manifest

#EXT-X-BYTERANGE' in manifest))

#ANVATO-SEGMENT-INFO') and 'type=ad' in s

#UPLYNK-SEGMENT') and s.endswith(',ad'))


#ANVATO-SEGMENT-INFO') and 'type=master' in s

#UPLYNK-SEGMENT') and s.endswith(',segment'))


#'):

#'):

# Unavailable (possibly temporary) fragments may be served.

# First we try to retry then either skip or abort.

# See https://github.com/ytdl-org/youtube-dl/issues/10165,

# https://github.com/ytdl-org/youtube-dl/issues/10448).

# Don't decrypt the content in tests since the data is explicitly truncated and it's not to a valid block

# size (see https://github.com/ytdl-org/youtube-dl/pull/27660). Tests only care that the correct data downloaded,

# not what it decrypts to.

# We only download the first fragment during the test

#EXT-X-KEY'):

#EXT-X-MEDIA-SEQUENCE'):

#EXT-X-BYTERANGE'):
"""""" A limited implementation that does not require ffmpeg """"""

"
hornbunny.py,"# coding: utf-8
"
hotnewhiphop.py,
hotstar.py,"# coding: utf-8

# contentData

# m3u8 download

# contentDetail

# only available via api v2

# produce broken files
"
howcast.py,
howstuffworks.py,
hrfernsehen.py,"# coding: utf-8

"
hrti.py,"# coding: utf-8

# TODO: figure out authentication with cookies

#/)?video/show/(?P<id>[0-9]+)/(?P<display_id>[^/]+)?

#/video/show/2181385/republika-dokumentarna-serija-16-hd',

#/video/show/2181385/',

#/)?video/list/category/(?P<id>[0-9]+)/(?P<display_id>[^/]+)?'

#/video/list/category/212/ekumena',

#/video/list/category/212/',
'''(?x)
                        (?:
                            hrti:(?P<short_id>[0-9]+)|
                            https?://
                                hrti\.hrt\.hr/(?:\#/)?video/show/(?P<id>[0-9]+)/(?P<display_id>[^/]+)?
                        )
                    '''
""""""
        Base Information Extractor for Croatian Radiotelevision
        video on demand site https://hrti.hrt.hr
        Reverse engineered from the JavaScript app in app.min.js
    """"""
"
http.py,"# Do not include the Accept-Encoding header

# Establish possible resume length

# Establish connection

# reason may not be available, e.g. for urllib2.HTTPError on python 2.6

# When trying to resume, Content-Range HTTP header of response has to be checked

# to match the value of requested Range HTTP header. This is due to a webservers

# that don't support resuming and serve a whole file with no Content-Range

# set in response despite of requested Range (see

# https://github.com/ytdl-org/youtube-dl/issues/6057#issuecomment-126129799)

# Content-Range is present and matches requested Range, resume is possible

# Non-chunked download

# Chunked download and requested piece or

# its part is promised to be served

# Content-Range is either not present or invalid. Assuming remote webserver is

# trying to send the whole file, resume is not possible, so wiping the local file

# and performing entire redownload

# Unable to resume (requested range not satisfiable)

# Open the connection again without the range header

# Examine the reported length

# The file had already been fully downloaded.

# Explanation to the above condition: in issue #175 it was revealed that

# YouTube sometimes adds or removes a few bytes from the end of the file,

# changing the file size slightly and causing problems for some users. So

# I decided to implement a suggested change and consider the file

# completely downloaded if the file size differs less than 100 bytes from

# the one in the hard drive.

# The length does not match, we start the download over

# Unexpected HTTP error

# Connection reset is no problem, just retry

# Range HTTP header may be ignored/unsupported by a webserver

# (e.g. extractor/scivee.py, extractor/bambuser.py).

# However, for a test we still would like to download just a piece of a file.

# To achieve this we limit data_len to _TEST_FILE_SIZE and manually control

# block size when downloading a file.

# measure time over whole while-loop, so slow_down() and best_block_size() work together properly

# needed for slow_down() in the first loop run

# start measuring


# Download and write

# socket.timeout is a subclass of socket.error but may not have

# errno set

# SSLError on python 2 (inherits socket.error) may have

# no errno set but this error message

# exit loop when download is finished

# Open destination file just in time

# Apply rate limit

# end measuring of one loop run

# Adjust block size

# Progress message

# ctx.block_size = block_size

# Update file modification time
"
huajiao.py,"# coding: utf-8

#新人求关注#',
"
huffpost.py,"# m3u8 download
'''(?x)
        https?://(embed\.)?live\.huffingtonpost\.com/
        (?:
            r/segment/[^/]+/|
            HPLEmbedPlayer/\?segmentId=
        )
        (?P<id>[0-9a-f]+)'''

"
hungama.py,"# coding: utf-8
'''(?x)
                    https?://
                        (?:www\.)?hungama\.com/
                        (?:
                            (?:video|movie)/[^/]+/|
                            tv-show/(?:[^/]+/){2}\d+/episode/[^/]+/
                        )
                        (?P<id>\d+)
                    '''
"
hypem.py,
ign.py,"#]+)'

# Youtube embed

# Twitter embed

# Vimeo embed

#]+)'

# videoId pattern

# Youtube embed

# IMDB embed

# Facebook embed

# Brightcove embed
""""""
    Extractor for some of the IGN sites, like www.ign.com, es.ign.com de.ign.com.
    Some videos of it.ign.com are also supported
    """"""

"
iheart.py,"# coding: utf-8

#]+)-|iheartradio:)(?P<id>\d+)'

#]+-(?P<id>\d+)/?(?:[?#&]|$)'
"
imdb.py,"#lb-vi2524815897',

#lb-vi2524815897',
"
imggaming.py,"# coding: utf-8
"
imgur.py,"# no title
"
ina.py,"# coding: utf-8
"
inc.py,"# div with id=kaltura_player_1_kqs38cgm
"
indavideo.py,"# coding: utf-8

# Some example URLs covered by generic extractor:

#   http://indavideo.hu/video/Vicces_cica_1

#   http://index.indavideo.hu/video/2015_0728_beregszasz

#   http://auto.indavideo.hu/video/Sajat_utanfutoban_a_kis_tacsko

#   http://erotika.indavideo.hu/video/Amator_tini_punci

#   http://film.indavideo.hu/video/f_hrom_nagymamm_volt

#   http://palyazat.indavideo.hu/video/Embertelen_dal_Dodgem_egyuttes


# upload date is in CEST
"
infoq.py,"# coding: utf-8


# The server URL is hardcoded

# Extract video URL

# base URL is found in the Location header in the response returned by

# GET https://www.infoq.com/mp3download.action?filename=... when logged in.

# audio file seem to be missing some times even if there is a download link

# so probe URL to make sure

# for China videos, HTTP video URL exists but always fails with 403
"
instagram.py,"#&]+))'

#abc',

# missing description

# multi video post

# IGTV

# _sharedData.entry_data.PostPage is empty when authenticated (see

# https://github.com/ytdl-org/youtube-dl/pull/22880)

# A superclass for handling any kind of query based on GraphQL which

# results in a playlist.


# used to cache GIS request type


# Reads a webpage and returns its GraphQL data.

# Parses GraphQL queries containing videos and generates a playlist.

# try all of the ways to generate a GIS query, and not only use the

# first one that works, but cache it for future requests

# if it's an error caused by a bad query, and there are

# more GIS templates to try, ignore it and keep trying

#])'

# extracts the media timeline data from a GraphQL result

# returns a dictionary of variables to add to the timeline query based

# on the GraphQL of the original page

# extracts the media timeline data from a GraphQL result

# returns a dictionary of variables to add to the timeline query based

# on the GraphQL of the original page
"
internazionale.py,"# coding: utf-8

#&]+)'
"
internetvideoarchive.py,"# m3u8 download
"
iprima.py,"# coding: utf-8

#&]+)'

# m3u8 download

# m3u8 download

# geo restricted

# iframe api.play-backend.iprima.cz

# iframe prima.iprima.cz
"
iqiyi.py,"# coding: utf-8

# MD5 checksum differs on my machine and Travis CI

# This can be either Simplified Chinese or Traditional Chinese

# VIP-only video. The first 2 parts (6 minutes) are available without login

# MD5 sums omitted as values are different on Travis CI and my machine

# 216p, 240p

# 336p, 360p

# 480p, 504p

# 504p

# 720p

# 720p

# 1072p, 1080p

# 1080p

# public key extracted from http://static.iqiyi.com/js/qiyiV2/20160129180840/jobs/i18n/i18nIndex.js

# No authentication to be performed

# Start from 2 because links in the first page are already on webpage

# There's no simple way to determine whether an URL is a playlist or not

# Sometimes there are playlist links in individual videos, so treat it

# as a single video first
"
ir90tv.py,"# coding: utf-8
"
ism.py,"# major brand

# minor version

# compatible brands

# File Type Box


# rate

# volume

# reserved

# reserved

# pre defined

# next track id

# Movie Header Box


# track id

# reserved

# reserved

# layer

# alternate group

# volume

# reserved

# Track Header Box


# pre defined

# Media Header Box


# pre defined

# handler type

# reserved

# name

# Handler Reference Box


# balance

# reserved

# Sound Media Header

# graphics mode

# opcolor

# Video Media Header

# entry count

# Data Entry URL Box

# Data Reference Box

# Data Information Box


# entry count


# reserved

# data reference index

# reserved

# pre defined

# reserved

# pre defined

# reserved

# pre defined

# horiz resolution 72 dpi

# vert resolution 72 dpi

# reserved

# frame count

# compressor name

# depth

# pre defined


# configuration version

# avc profile indication + profile compatibility + avc level indication

# complete representation (1) + reserved (11111) + length size minus one

# reserved (0) + number of sps (0000001)

# number of pps

# AVC Decoder Configuration Record

# AVC Simple Entry

# Sample Description Box


# entry count

# Decoding Time to Sample Box


# entry count

# Sample To Chunk Box


# entry count

# Chunk Offset Box


# Sample Table Box


# Media Information Box


# Media Box


# Track Box


# Movie Extends Header Box


# track id

# default sample description index

# default sample duration

# default sample size

# default sample flags

# Track Extends Box


# Movie Extends Box

# Movie Box


""""""
    Download segments in a ISM manifest
    """"""

"
itv.py,"# coding: utf-8

# m3u8 download

# unavailable via data-playlist-url

# InvalidVodcrid

# ContentUnavailable

#&]+)'

# ITV does not like some GB IP ranges, so here are some

# IP blocks it accepts
"
ivi.py,"# coding: utf-8

# Single movie

# Serial's series

# with MP4-HD720 format

# Sorted by quality

# Season link

# Compilation link

# No seasons in this compilation
"
ivideon.py,"# coding: utf-8
"
iwara.py,"# coding: utf-8

# md5 is unstable

# md5 is unstable

# ecchi is 'sexy' in Japanese
"
izlesene.py,"# coding: utf-8
'''(?x)
        https?://(?:(?:www|m)\.)?izlesene\.com/
        (?:video|embedplayer)/(?:[^/]+/)?(?P<id>[0-9]+)
        '''
"
jamendo.py,"# coding: utf-8

#&]+))?

# 'title': 'Maya Filipič - Stories from Emona I',

# 'artist': 'Maya Filipič',

# webpage = self._download_webpage(

#     'https://www.jamendo.com/track/' + track_id, track_id)

# models = self._parse_json(self._html_search_regex(

#     r""data-bundled-models='([^']+)"",

#     webpage, 'bundled models'), track_id)

# track = models['track']['models'][0]

# get_model = lambda x: try_get(models, lambda y: y[x]['models'][0], dict) or {}

# artist = get_model('artist')

# artist_name = artist.get('name')

# if artist_name:

#     title = '%s - %s' % (artist_name, title)

# album = get_model('album')


# 'artist': artist_name,

# 'album': album.get('name'),
'''(?x)
                    https?://
                        (?:
                            licensing\.jamendo\.com/[^/]+|
                            (?:www\.)?jamendo\.com
                        )
                        /track/(?P<id>[0-9]+)(?:/(?P<display_id>[^/?#&]+))?
                    '''
"
jeuxvideo.py,"# coding: utf-8

"
joj.py,"# coding: utf-8

#^]+)
'''(?x)
                    (?:
                        joj:|
                        https?://media\.joj\.sk/embed/
                    )
                    (?P<id>[^/?#^]+)
                '''
"
jove.py,
jsinterp.py,"# even 0 ** 0 !!

# NB: NaN cannot be checked by membership

# (op, definition) in order of binding priority, tightest first

# avoid dict to maintain order

# definition None => Defined in JSInterpreter._operator

# special knowledge: Python's re flags are bitmask values, current max 128

# invent new bitmask values well above that for literal parsing

# TODO: new pattern class to execute matches with these flags

# Generate indices for substring matches

# Global search

# Case-insensitive search

# Multi-line search

# Allows . to match newline characters

# Treat a pattern as a sequence of unicode code points

# Perform a ""sticky"" search that matches starting at the current position in the target string

# collections.Counter() is ~10% slower in both 2.7 and 3.9

# Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

# short circuiting

# , strict=True))

# , strict=True))

# try for object expression (Map)

# or statement list

# XXX: This works for now, but makes debugging future issues very hard

# FIXME

# Comma separated statements

# strict=True)

# hackety: </> have higher priority than <</>>, but don't confuse them

# Member access

# Function call

# assertion(len(argvals) == 1, 'takes exactly one argument') # but not enforced

# Currently, it only supports function definitions

# refine the match
'''(?x)
                (?P<try>try)\s*\{|
                (?P<switch>switch)\s*\(|
                (?P<for>for)\s*\(
                '''
'''(?x)
                (?P<pre_sign>\+\+|--)(?P<var1>{_NAME_RE})|
                (?P<var2>{_NAME_RE})(?P<post_sign>\+\+|--)'''
'''(?x)
            (?P<assign>
                (?P<out>{_NAME_RE})(?:\[(?P<index>[^\]]+?)\])?\s*
                (?P<op>{_OPERATOR_RE})?
                =(?!=)(?P<expr>.*)$
            )|(?P<return>
                (?!if|return|true|false|null|undefined)(?P<name>{_NAME_RE})$
            )|(?P<indexing>
                (?P<in>{_NAME_RE})\[(?P<idx>.+)\]$
            )|(?P<attribute>
                (?P<var>{_NAME_RE})(?:(?P<nullish>\?)?\.(?P<member>[^(]+)|\[(?P<member2>[^\]]+)\])\s*
            )|(?P<function>
                (?P<fname>{_NAME_RE})\((?P<args>.*)\)$
            )'''
'''(?:[a-zA-Z$0-9]+|""[a-zA-Z$0-9]+""|'[a-zA-Z$0-9]+')'''

'''(?x)
                (?<!this\.)%s\s*=\s*{\s*
                    (?P<fields>(%s\s*:\s*function\s*\(.*?\)\s*{.*?}(?:,\s*)?)*)
                }\s*;
            '''
'''(?x)
                (?P<key>%s)\s*:\s*function\s*\((?P<args>(?:%s|,)*)\){(?P<code>[^}]+)}
            '''
'''(?xs)
                (?:
                    function\s+%(name)s|
                    [{;,]\s*%(name)s\s*=\s*function|
                    (?:var|const|let)\s+%(name)s\s*=\s*function
                )\s*
                \((?P<args>[^)]*)\)\s*
                (?P<code>{.+})'''""""""Simulate JS's ternary operator (cndn?if_true:if_false)""""""

"""""" assert, but without risk of getting optimized out """"""

"""""" @returns argnames, code """"""
"
jwplatform.py,"# coding: utf-8
"
kakao.py,"# coding: utf-8


#&]+@my)'

# geo restricted
"
kaltura.py,"# coding: utf-8

# flash player

# html5 player

# See https://github.com/kaltura/server/blob/master/plugins/content/caption/base/lib/model/enums/CaptionType.php

# video with subtitles

# video with ttml subtitles (no fileExt)

# unavailable source format

# Embed codes: https://knowledge.kaltura.com/embedding-kaltura-media-players-your-site

# JSON, 2 = XML, 3 = PHP

# Unfortunately, data returned in kalturaIframePackageData lacks

# captions so we will try requesting the complete data using

# regular approach since we now know the entry_id

# Regular scenario failed but we already have everything

# extracted apart from captions and can process at least

# with this

# Continue if asset is not ready

# Original format that's not available (e.g. kaltura:1926081:0_c03e1b5g)

# skip for now.

# DRM-protected video, cannot be decrypted

# QT indicates QuickTime; some videos have broken fileExt

# Source format may not be available (e.g. kaltura:513551:1_66x4rg7o)

# audio-only has no videoCodecId (e.g. kaltura:1926081:0_c03e1b5g

# -f mp4-56)

# Continue if caption is not ready
'''(?x)
                (?:
                    kaltura:(?P<partner_id>\d+):(?P<id>[0-9a-z_]+)|
                    https?://
                        (:?(?:www|cdnapi(?:sec)?)\.)?kaltura\.com(?::\d+)?/
                        (?:
                            (?:
                                # flash player
                                index\.php/(?:kwidget|extwidget/preview)|
                                # html5 player
                                html5/html5lib/[^/]+/mwEmbedFrame\.php
                            )
                        )(?:/(?P<path>[^?]+))?(?:\?(?P<query>.*))?
                )
                '''

'''(?xs)
                    (?P<q1>[""'])
                        (?:https?:)?//cdnapi(?:sec)?\.kaltura\.com(?::\d+)?/(?:(?!(?P=q1)).)*\b(?:p|partner_id)/(?P<partner_id>\d+)(?:(?!(?P=q1)).)*
                    (?P=q1).*?
                    (?:
                        (?:
                            entry_?[Ii]d|
                            (?P<q2>[""'])entry_?[Ii]d(?P=q2)
                        )\s*:\s*|
                        \[\s*(?P<q2_1>[""'])entry_?[Ii]d(?P=q2_1)\s*\]\s*=\s*
                    )
                    (?P<q3>[""'])(?P<id>(?:(?!(?P=q3)).)+)(?P=q3)
                '''
'''(?xs)
                    <(?:iframe[^>]+src|meta[^>]+\bcontent)=(?P<q1>[""'])\s*
                      (?:https?:)?//(?:(?:www|cdnapi(?:sec)?)\.)?kaltura\.com/(?:(?!(?P=q1)).)*\b(?:p|partner_id)/(?P<partner_id>\d+)
                      (?:(?!(?P=q1)).)*
                      [?&;]entry_id=(?P<id>(?:(?!(?P=q1))[^&])+)
                      (?:(?!(?P=q1)).)*
                    (?P=q1)
                '''""""""(?xs)
                    kWidget\.(?:thumb)?[Ee]mbed\(
                    \{.*?
                        (?P<q1>['""])wid(?P=q1)\s*:\s*
                        (?P<q2>['""])_?(?P<partner_id>(?:(?!(?P=q2)).)+)(?P=q2),.*?
                        (?P<q3>['""])entry_?[Ii]d(?P=q3)\s*:\s*
                        (?P<q4>['""])(?P<id>(?:(?!(?P=q4)).)+)(?P=q4)(?:,|\s*\})
                """""""
kankan.py,
karaoketv.py,"# coding: utf-8

# rtmp download
"
karrierevideos.py,"# coding: utf-8

# rtmp download

# broken ampersands

# rtmp download

# Server returns malformed headers

# Force Accept-Encoding: * to prevent gzipped results
"
keezmovies.py,
ketnet.py,"#&]+)'
'''{
  video(id: ""content/ketnet/nl/%s.model.json"") {
    description
    episodeNr
    imageUrl
    mediaReference
    programTitle
    publicationDate
    seasonTitle
    subtitleVideodetail
    titleVideodetail
  }
}'''"
khanacademy.py,"#/&]+)'


#&]|$)'
"
kickstarter.py,"# coding: utf-8

# No native kickstarter, look for embedded videos
"
kinja.py,"# coding: utf-8
'''(?:[^.]+\.)?
        (?:
            avclub|
            clickhole|
            deadspin|
            gizmodo|
            jalopnik|
            jezebel|
            kinja|
            kotaku|
            lifehacker|
            splinternews|
            the(?:inventory|onion|root|takeout)
        )\.com'''

'''/
        (?:
            ajax/inset|
            embed/video
        )/iframe\?.*?\bid='''

'''(?x)https?://%s%s
        (?P<type>
            fb|
            imgur|
            instagram|
            jwp(?:layer)?-video|
            kinjavideo|
            mcp|
            megaphone|
            ooyala|
            soundcloud(?:-playlist)?|
            tumblr-post|
            twitch-stream|
            twitter|
            ustream-channel|
            vimeo|
            vine|
            youtube-(?:list|video)
        )-(?P<id>[^&]+)'''"
kinopoisk.py,"# coding: utf-8
"
konserthusetplay.py,"# coding: utf-8
"
krasview.py,"# coding: utf-8
"
kth.py,"# coding: utf-8
"
ku6.py,
kusi.py,"# coding: utf-8

# See __Packages/worldnow/model/GalleryModel.as of WNGallery.swf
"
kuwo.py,"# coding: utf-8

# indicates no lyrics

# See https://travis-ci.org/ytdl-org/youtube-dl/jobs/78878540

#%d' % (page_num + 1),

#%d' % (page_num + 1),

# In this video, music URLs (anti.s) are blocked outside China and

# USA, while the MV URL (mvurl) is available globally, so force the MV

# URL for consistent results in different countries
"
la7.py,"# coding: utf-8

# 'src' is a plain URL

# 'src' is a dictionary
'''(?x)(https?://)?(?:
        (?:www\.)?la7\.it/([^/]+)/(?:rivedila7|video)/|
        tg\.la7\.it/repliche-tgla7\?id=
    )(?P<id>.+)'''

"
laola1tv.py,"# coding: utf-8

# flashvars.premium = ""false"";

#&]+)'


#&]+)'

"
lazy_load_template.py,"# coding: utf-8
"
lbry.py,"# coding: utf-8

#&]+(?::%s)?' % _CLAIM_ID_REGEX

# Video

# Audio

# HLS

#')

#&]|$)' % LBRYBaseIE._OPT_CLAIM_ID

#')
"
lci.py,"# coding: utf-8
"
lcp.py,"# coding: utf-8

# arkena embed

# dailymotion live stream

# m3u8 live stream
"
lecture2go.py,"# coding: utf-8

# m3u8 download

# XXX: currently broken
"
lecturio.py,"# coding: utf-8

# Sets some cookies

# Already logged in

# Logged in successfully

#&]+)\.lecture|(?:\#/)?lecture/c/\d+/(?P<id>\d+))|

#&]+)\.vortrag

#tab/videos',

#/lecture/c/6434/39634',

# smil contains only broken RTMP formats anyway

#&]+)\.course|(?:#/)?course/c/(?P<id>\d+))'

#/',

#/course/c/6434',

#/lecture/c/%s/%s' % (course_id, lecture_id)

#&]+)\.kurs'
'''(?x)
                    https://
                        (?:
                            app\.lecturio\.com/([^/]+/(?P<nt>[^/?#&]+)\.lecture|(?:\#/)?lecture/c/\d+/(?P<id>\d+))|
                            (?:www\.)?lecturio\.de/[^/]+/(?P<nt_de>[^/?#&]+)\.vortrag
                        )
                    '''
"
leeco.py,"# coding: utf-8

# ror() and calc_time_key() are reversed from a embedded swf file in LetvPlayer.swf

# see M3U8Encryption class in KLetvPlayer.swf

# Check for errors

# This playlist contains some extra videos other than the drama itself

# This series is moved to http://www.le.com/tv/10005297.html

# Currently old domain names are still used in playlists

# Most of *.letv.com is changed to *.le.com on 2016/01/02

# but yuntv.letv.com is kept, so also keep the extractor name

# The server time may be different from local time
"
lego.py,"# coding: utf-8

#]+-(?P<id>[0-9a-f]{32})'

# geo-restricted but the contentUrl contain a valid url

##sp=399',

# with subtitle

# https://contentfeed.services.lego.com/api/v2/item/[VIDEO_ID]?culture=[LOCALE]&contentType=Video
"
lemonde.py,"# standard iframe embed

# YouTube embeds
"
lenta.py,"# coding: utf-8

#&]+)'

# EaglePlatform iframe embed
"
libraryofcongress.py,"# coding: utf-8

# embedded via <div class=""media-player""

# webcast embedded via mediaObjectId

# with direct download links

# Following algorithm was extracted from setAVSource js function

# found in webpage
"
libsyn.py,"# coding: utf-8

# description fetched using another request:

# http://html5-player.libsyn.com/embed/getitemdetails?item_id=6385796

# 'description': 'In this episode, Allistair talks about the importance of developing a growth mindset, not only in sports, but in life too.',

# Strip non-breaking and normal spaces
"
lifenews.py,"# coding: utf-8

# single video embedded via video/source

# single video embedded via iframe

# two videos embedded via iframe

# with 1080p

# Old rendition fallback
"
limelight.py,"# coding: utf-8

# As per [1] class attribute should be exactly equal to

# LimelightEmbeddedPlayerFlash but numerous examples seen

# that don't exactly match it (e.g. [2]).

# 1. http://support.3playmedia.com/hc/en-us/articles/227732408-Limelight-Embedding-the-Captions-Plugin-with-the-Limelight-Player-on-Your-Webpage

# 2. http://www.sedona.com/FacilitatorTraining2017

# http://support.3playmedia.com/hc/en-us/articles/115009517327-Limelight-Embedding-the-Audio-Description-Plugin-with-the-Limelight-Player-on-Your-Web-Page)

# m3u8 download

# video with subtitles

# TODO: extract all languages that were accessible via API

# 'subtitles': 'mincount:9',
'''(?sx)
                    <object[^>]+class=([""\'])(?:(?!\1).)*\bLimelightEmbeddedPlayerFlash\b(?:(?!\1).)*\1[^>]*>.*?
                        <param[^>]+
                            name=([""\'])flashVars\2[^>]+
                            value=([""\'])(?:(?!\3).)*(?P<kind>media|channel(?:List)?)Id=(?P<id>[a-z0-9]{32})
                '''
'''(?x)
                        (?:
                            limelight:media:|
                            https?://
                                (?:
                                    link\.videoplatform\.limelight\.com/media/|
                                    assets\.delvenetworks\.com/player/loader\.swf
                                )
                                \?.*?\bmediaId=
                        )
                        (?P<id>[a-z0-9]{32})
                    '''

'''(?x)
                        (?:
                            limelight:channel:|
                            https?://
                                (?:
                                    link\.videoplatform\.limelight\.com/media/|
                                    assets\.delvenetworks\.com/player/loader\.swf
                                )
                                \?.*?\bchannelId=
                        )
                        (?P<id>[a-z0-9]{32})
                    '''

'''(?x)
                        (?:
                            limelight:channel_list:|
                            https?://
                                (?:
                                    link\.videoplatform\.limelight\.com/media/|
                                    assets\.delvenetworks\.com/player/loader\.swf
                                )
                                \?.*?\bchannelListId=
                        )
                        (?P<id>[a-z0-9]{32})
                    '''
"
line.py,"# coding: utf-8

# like_count requires an additional API request https://tv.line.me/api/likeit/getCount


# archiveStatus == 'DELETED'

#]|$)'
"
linkedin.py,"# coding: utf-8

#]+)'

#]+)'
"
linuxacademy.py,"# course path

# Move to next module section

# Skip non-lessons

# single video path
'''(?x)
                    https?://
                        (?:www\.)?linuxacademy\.com/cp/
                        (?:
                            courses/lesson/course/(?P<chapter_id>\d+)/lesson/(?P<lesson_id>\d+)|
                            modules/view/id/(?P<course_id>\d+)
                        )
                    '''
"
litv.py,"# coding: utf-8

# To prevent infinite recursion

# In browsers `getMainUrl` request is always issued. Usually this

# endpoint gives the same result as the data embedded in the webpage.

# If georestricted, there are no embedded data, so an extra request is

# necessary to get the error code

# LiTV HLS segments doesn't like compressions
"
livejournal.py,"# coding: utf-8

# remove filename extension(.mp4, .mov, etc...)
"
livestream.py,"# The original version of Livestream uses a different system

#]+)(?:/(?P<type>video|folder)

# live stream

# this url is used on mobile devices

# The server doesn't support HEAD request, the generic extractor can't detect

# the redirection

# Do not list
'''(?x)https?://original\.livestream\.com/
        (?P<user>[^/\?#]+)(?:/(?P<type>video|folder)
        (?:(?:\?.*?Id=|/)(?P<id>.*?)(&|$))?)?
        '''

'''(?x)(?:
                <li\s+class=""folder"">\s*<a\s+href=""|
                <a\s+href=""(?=https?://livestre\.am/)
            )([^""]+)""'''"
lnkgo.py,"# coding: utf-8

# HLS download

# HLS download
"
localnews8.py,"# coding: utf-8
"
lovehomeporn.py,"#&]+))?'

#menu',
"
lrt.py,"# coding: utf-8

# m3u8 download

# direct mp3 download
"
lynda.py,"# Step 1: download signin page

# Already logged in

# Step 2: submit email

# Step 3: submit password

# md5 is unstable

# Status=""NotFound"", Message=""Transcript not found""

# Fallback scenario

# Course link equals to welcome/introduction video link of same course

# We will recognize it as course link

# Might want to extract videos right here from video['Formats'] as it seems 'Formats' is not provided

# by single video API anymore

'''(?x)
                    https?://
                        (?:www\.)?(?:lynda\.com|educourse\.ga)/
                        (?:
                            (?:[^/]+/){2,3}(?P<course_id>\d+)|
                            player/embed
                        )/
                        (?P<id>\d+)
                    '''

"
m6.py,"# coding: utf-8
"
mailru.py,"# coding: utf-8

#video=/?(?P<idv1>(?:[^/]+/){3}\d+)|

#video=/mail/sonypicturesrus/75/76',

# only available via metaUrl API

# Fallback old approach

#&]+-(?P<id>[\da-f]+)'

#&]+)'
'''(?x)
                    https?://
                        (?:(?:www|m)\.)?my\.mail\.ru/+
                        (?:
                            video/.*\#video=/?(?P<idv1>(?:[^/]+/){3}\d+)|
                            (?:(?P<idv2prefix>(?:[^/]+/+){2})video/(?P<idv2suffix>[^/]+/\d+))\.html|
                            (?:video/embed|\+/video/meta)/(?P<metaid>\d+)
                        )
                    '''
"
make_contributing.py,"#!/usr/bin/env python

#\s*BUGS\s*[^\n]*\s*(.*?)#\s*COPYRIGHT', readme).group(1)

#\s*DEVELOPER INSTRUCTIONS.*?)#\s*EMBEDDING YOUTUBE-DL',
"
make_issue_template.py,"#!/usr/bin/env python

# Get the version from youtube_dl/version.py without importing the package
"
make_lazy_extractors.py,"# search extractors

# find the correct sorting and add the required base classes so that subclasses

# can be correctly created
'''
class {name}({bases}):
    _VALID_URL = {valid_url!r}
    _module = '{module}'
'''


'''
    @classmethod
    def _make_valid_url(cls):
        return {valid_url!r}
'''


"
make_readme.py,"# OPTIONS')]

# CONFIGURATION'):]


## \1', options)

# OPTIONS\n' + options + '\n'

"
make_supportedsites.py,"#!/usr/bin/env python

# Import youtube_dl

# Supported sites\n' + ''.join(
"
malltv.py,"# coding: utf-8

#&]+)'
"
mangomolo.py,"# coding: utf-8
"
manyvids.py,"# coding: utf-8

# preview video

# full video

# probably useless fallback

# Sets some cookies
'''(<div\b[^>]*\bid\s*=\s*(['""])pageMetaDetails\2[^>]*>)'''
'''(<div\b[^>]*\bid\s*=\s*(['""])rmpPlayerStream\2[^>]*>)'''
'''(<a\b[^>]*\bdata-id\s*=\s*(['""])%s\2[^>]*>)'''
'''(?s)<span\b[^>]*\bclass\s*=[""']views-wrapper\b[^>]+>.+?<span\b[^>]+>\s*(\d[\d,.]*)\s*</span>'''"
maoritv.py,"# coding: utf-8

#]+)'
"
markiza.py,"# coding: utf-8

# Downloading for some hosts (e.g. dajto, doma) fails with 500

# although everything seems to be OK, so considering 500

# status code to be expected.
"
massengeschmacktv.py,"#]+)'

'''(?x)
                                   <a[^>]+?href=""(?P<url>(?:https:)?//[^""]+)"".*?
                                   <strong>(?P<format_id>.+?)</strong>.*?
                                   <small>(?:(?P<width>\d+)x(?P<height>\d+))?\s+?\((?P<filesize>[\d,]+\s*[GM]iB)\)</small>
                                '''"
matchtv.py,"# coding: utf-8

#live-player)'

#live-player',
"
mdr.py,"# coding: utf-8

# MDR regularly deletes its videos

# audio

# audio with alternative playerURL pattern

# empty bitrateVideo and bitrateAudio
"
medaltv.py,"# coding: utf-8

#&]+)'

# Necessary because the id of the author is not known in advance.

# Won't raise an issue if no profile can be found as this is optional.
"
medialaan.py,"#]+~p
'''(?x)
                    https?://
                        (?:
                            (?:embed\.)?mychannels.video/embed/|
                            embed\.mychannels\.video/(?:s(?:dk|cript)/)?production/|
                            (?:www\.)?(?:
                                (?:
                                    7sur7|
                                    demorgen|
                                    hln|
                                    joe|
                                    qmusic
                                )\.be|
                                (?:
                                    [abe]d|
                                    bndestem|
                                    destentor|
                                    gelderlander|
                                    pzc|
                                    tubantia|
                                    volkskrant
                                )\.nl
                            )/video/(?:[^/]+/)*[^/?&#]+~p
                        )
                        (?P<id>\d+)
                    '''
"
mediaset.py,"# coding: utf-8

# full episode

# clip

# iframe simple

# iframe twitter (from http://www.wittytv.it/se-prima-mi-fidavo-zero/)

# embedUrl (from https://www.wittytv.it/amici/est-ce-que-tu-maimes-gabriele-5-dicembre-copia/)

# TODO: fixup ISM+none manifest URLs
'''(?x)
                    (?:
                        mediaset:|
                        https?://
                            (?:(?:www|static3)\.)?mediasetplay\.mediaset\.it/
                            (?:
                                (?:video|on-demand|movie)/(?:[^/]+/)+[^/]+_|
                                player(?:/v\d+)?/index\.html\?.*?\bprogramGuid=
                            )
                    )(?P<id>[0-9A-Z]{16,})
                    '''
"
mediasite.py,"# coding: utf-8

#]+|)' % _ID_RE

# dashed id

# look in Mediasite.Core.js (Mediasite.ContentStreamType[*])

# the main video

# screencast?

# XXX: add UrlReferrer?

# XXX: might have also extracted UrlReferrer and QueryString from the html

# XXX: if Stream.get('CanChangeScheme', False), switch scheme to HTTP/HTTPS


# TODO: if Stream['HasSlideContent']:

# synthesise an MJPEG video stream '%s-%u.slides' % (stream_type, snum)

# from Stream['Slides']

# this will require writing a custom downloader...


# disprefer 'secondary' streams

# XXX: Presentation['Presenters']

# XXX: Presentation['Transcript']


# with CurrentFolderId and RootDynamicFolderId

# no AntiForgeryToken

# dashed id

# AntiForgeryToken is optional (e.g. [1])

# 1. https://live.libraries.psu.edu/Mediasite/Catalog/Full/8376d4b24dd1457ea3bfe4cf9163feda21

#&]+)'
'''(?xi)
                        (?P<url>https?://[^/]+/Mediasite)
                        /Catalog/Full/
                        (?P<catalog_id>{0})
                        (?:
                            /(?P<current_folder_id>{0})
                            /(?P<root_dynamic_folder_id>{0})
                        )?
                    '''"
medici.py,"# coding: utf-8

#!/(?P<id>[^?#&]+)'

#!/daniel-harding-frans-helmerson-verbier-festival-music-camp',

# Sets csrftoken cookie
"
megaphone.py,"# coding: utf-8

#97 What Kind Of Idiot Gets Phished?',
"
meipai.py,"# coding: utf-8

# regular uploaded video

#葉子##阿桑##余姿昀##超級女聲#',

#葉子##阿桑##余姿昀##超級女聲#',

# record of live streaming

# recorded playback of live streaming

# regular uploaded video
"
melonvod.py,"# coding: utf-8
"
meta.py,"# coding: utf-8

# pladform embed

#([^']+)'"", webpage, 'uppod html5 st', default=None)


# uppod st decryption algorithm is reverse engineered from function un(s) at uppod.js

#x0%s;' % st_html5[i:i + 3]
"
metacafe.py,"#]+)'

# Youtube video

# Normal metacafe video

# metacafe video with family filter

# AnyClip video

# age-restricted video

# cbs video

# rtmp download

# Movieclips.com video

# Extract id and simplified title from URL

# the video may come from an external site

# Check if video comes from YouTube

# CBS videos use theplatform.com

# Disable family filter

# AnyClip videos require the flashversion cookie so that we get the link

# to the mp4 file

# Retrieve video webpage to extract further information

# Extract URL, uploader and title from webpage

# Extract gdaKey if available
"
metacritic.py,"# The xml is not well formatted, there are raw '&'
"
metadatafromtitle.py,"# replace %(..)s with regex group and escape other string parts
""""""
        Converts a string like
           '%(title)s - %(artist)s'
        to a regex like
           '(?P<title>.+)\ \-\ (?P<artist>.+)'
        """"""
"
mgoon.py,"# coding: utf-8
'''(?x)https?://(?:www\.)?
    (?:(:?m\.)?mgoon\.com/(?:ch/(?:.+)/v|play/view)|
        video\.mgoon\.com)/(?P<id>[0-9]+)'''
"
mgtv.py,"# coding: utf-8

#%d' % idx)
"
miaopai.py,"# coding: utf-8
"
microsoftvirtualacademy.py,"#&]+-)(?P<course_id>\d+)(?::|\?l=)(?P<id>[\da-zA-Z]+_\d+)' % IE_NAME


#&]+)-)(?P<id>\d+)' % IE_NAME


# with emphasized chapters
"
minds.py,"# coding: utf-8

# entity.type == 'activity' and empty title

# youtube perma_url

# 1080p and webm formats available only on the sources array

#]+)'
"
ministrygrid.py,"#]*/)*(?P<id>[^/#?]+)/?(?:$|[?#])'


# m3u8 download
"
minoto.py,"# coding: utf-8
"
miomio.py,"# coding: utf-8

# ""type=video"" in flashvars

# new 'h5' player

# skipping the following page causes lags and eventually connection drop-outs

# the following xml contains the actual configuration information on the video file(s)

# Requests with English locales return garbage
"
mit.py,"# search for call to ocw_embed_chapter_media(container_id, media_url, provider, page_url, image_url, start, stop, captions_file)

# search for call to ocw_embed_chapter_media(container_id, media_url, provider, page_url, image_url, captions_file)
"
mitele.py,"# coding: utf-8

# no explicit title
"
mixcloud.py,"# Mixcloud starts throttling at >~5M

# 'params': {

#     'playlist_items': '1-100',

# },

# 'params': {

#     'playlist_items': '1-100',

# },
'''{
  %s(lookup: {username: ""%s""%s}) {
    %s
  }
}'''
'''audioLength
    comments(first: 100) {
      edges {
        node {
          comment
          created
          user {
            displayName
            username
          }
        }
      }
      totalCount
    }
    description
    favorites {
      totalCount
    }
    featuringArtistList
    isExclusive
    name
    owner {
      displayName
      url
      username
    }
    picture(width: 1024, height: 1024) {
        url
    }
    plays
    publishDate
    reposts {
      totalCount
    }
    streamInfo {
      dashUrl
      hlsUrl
      url
    }
    tags {
      tag {
        name
      }
    }'''
'''%s
    %s
    %s(first: 100%s) {
      edges {
        node {
          %s
        }
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }'''
'''slug
          url
          owner { username }'''


'''cloudcast {
            slug
            url
            owner { username }
          }'''

""""""Encrypt/Decrypt XOR cipher. Both ways are possible because it's XOR.""""""
"
mlb.py,"# From http://m.mlb.com/news/article/118550098/blue-jays-kevin-pillar-goes-spidey-up-the-wall-to-rob-tim-beckham-of-a-homer

#]+)'

# https://www.mlb.com/data-service/en/videos/[SLUG]
'''(?x)
                    https?://
                        (?:[\da-z_-]+\.)*mlb\.com/
                        (?:
                            (?:
                                (?:[^/]+/)*video/[^/]+/c-|
                                (?:
                                    shared/video/embed/(?:embed|m-internal-embed)\.html|
                                    (?:[^/]+/)+(?:play|index)\.jsp|
                                )\?.*?\bcontent_id=
                            )
                            (?P<id>\d+)
                        )
                    '''

'''{
  mediaPlayback(ids: ""%s"") {
    description
    feeds(types: CMS) {
      closedCaptions
      duration
      image {
        cuts {
          width
          height
          src
        }
      }
      playbacks {
        name
        url
      }
    }
    id
    timestamp
    title
  }
}'''"
mnet.py,"# coding: utf-8

# rtmp download

# TODO: extract rtmp formats

# no stype -> rtmp url

# stype=H -> m3u8 url

# stype=M -> mpd url
"
moevideo.py,"# coding: utf-8

#player""\s*,\s*({.+})',
'''(?x)
        https?://(?P<host>(?:www\.)?
        (?:(?:moevideo|playreplay|videochart)\.net|thesame\.tv))/
        (?:video|framevideo|embed)/(?P<id>[0-9a-z]+\.[0-9A-Za-z]+)'''
"
mofosex.py,"#&.]+)\.html'

# This video is no longer available
"
mojvideo.py,"# coding: utf-8

# XML is malformed
"
morningstar.py,"# coding: utf-8
"
motherless.py,"# coding: utf-8

# no keywords

# see https://motherless.com/videos/recent for recent videos with

# uploaded date in ""ago"" format

# Alternative fallback
'''class\s*=\s*['""]media-comment-contents\b'''
'''<span\b[^>]+\bclass\s*=\s*[""']username\b[^>]*>([^<]+)</span>'''
'''(?s)['""](?:media-meta-member|thumb-member-username)\b[^>]+>\s*<a\b[^>]+\bhref\s*=\s*['""]/m/([^""']+)'''
'''class\s*=\s*['""]error-page\b[^>]*>\s*<p[^>]*>\s*(?P<error_msg>[^<]+)(?<=\S)\s*'''"
motorsport.py,"# coding: utf-8

#]+/video/(?:[^/?#]+/)(?P<id>[^/]+)/?(?:$|[?#])'
"
movieclips.py,"# coding: utf-8
"
moviezine.py,"# coding: utf-8

#]+)'

"
movingimage.py,
msn.py,"# coding: utf-8

# Article, multiple Dailymotion Embeds

# geo restricted

# Vidible(AOL) Embed

# Dailymotion Embed

# YouTube Embed

# NBCSports Embed

# m3u8_native should not be used here until

# https://github.com/ytdl-org/youtube-dl/issues/9913 is fixed
"
mtv.py,"# coding: utf-8

# Remove the templates, like &device={device}

# Otherwise we get a webpage that would execute some javascript

# Transform the url to get the best quality:

# fms

# This a short id that's used in the webpage urls

# Some parts of complete video may be missing (e.g. missing Act 3 in

# http://www.southpark.de/alle-episoden/s14e01-sexual-healing)

# the url can be http://media.mtvnservices.com/fb/{mgid}.swf

# or http://media.mtvnservices.com/{mgid}

# From http://www.thewrap.com/peter-dinklage-sums-up-game-of-thrones-in-45-seconds-video/

#.]+)'

# Some videos come from Vevo.com

# rtmp download

# mediagen URL without query (e.g. http://videos.mtvnn.com/mediagen/e865da714c166d18d6f80893195fcb97)

# rtmp download

# rtmp download
'''(?x)^https?://
        (?:(?:www\.)?mtv\.com/videos/.+?/(?P<videoid>[0-9]+)/[^/]+$|
           m\.mtv\.com/videos/video\.rbml\?.*?id=(?P<mgid>[^&]+))'''

"
muenchentv.py,"# coding: utf-8
"
mwave.py,"# md5 is unstable
"
mychannels.py,"# coding: utf-8

#13 Not a potato',
"
myspace.py,"# coding: utf-8

#&]+-(?P<song_id>\d+)-\d+(?:[/?#&]|$)

# songs

# songs don't store any useful info in the 'context' variable

# some songs in an album are not playable
'''(?x)
                    https?://
                        myspace\.com/[^/]+/
                        (?P<mediatype>
                            video/[^/]+/(?P<video_id>\d+)|
                            music/song/[^/?#&]+-(?P<song_id>\d+)-\d+(?:[/?#&]|$)
                        )
                    '''


'''<button.*data-song-id=([""\'])%s\1.*'''
'''data-%s=([\'""])(?P<data>.*?)\1'''"
myspass.py,"# coding: utf-8
"
myvi.py,"# coding: utf-8

#watch',
'''(?x)
                        (?:
                            https?://
                                (?:www\.)?
                                myvi\.
                                (?:
                                    (?:ru/player|tv)/
                                    (?:
                                        (?:
                                            embed/html|
                                            flash|
                                            api/Video/Get
                                        )/|
                                        content/preloader\.swf\?.*\bid=
                                    )|
                                    ru/watch/
                                )|
                            myvi:
                        )
                        (?P<id>[\da-zA-Z_-]+)
                    '''
"
myvidster.py,
nationalgeographic.py,
naver.py,"# coding: utf-8
"
nba.py,"#&]+)'

# only CVP mp4 format available

#&]+)'

#)?/'''

#/' in url:

#&]+)'

#&]+)' % NBABaseIE._CHANNEL_PATH_REGEX

#/video/teams%2Fbucks%2F2020%2F12%2F17%2F64860%2F1608252863446-Op_Dream_16x9-64860',

#/video/wsc%2Fteams%2F2787C911AA1ACD154B5377F7577CCC7134B2A4B0',

#&]+)' % NBABaseIE._CHANNEL_PATH_REGEX

#/series/On%20This%20Date',
'''(?x)
        https?://(?:www\.)?nba\.com/
            (?P<team>
                blazers|
                bucks|
                bulls|
                cavaliers|
                celtics|
                clippers|
                grizzlies|
                hawks|
                heat|
                hornets|
                jazz|
                kings|
                knicks|
                lakers|
                magic|
                mavericks|
                nets|
                nuggets|
                pacers|
                pelicans|
                pistons|
                raptors|
                rockets|
                sixers|
                spurs|
                suns|
                thunder|
                timberwolves|
                warriors|
                wizards
            )
        (?:/play\#)?/'''
"
nbc.py,"# m3u8 download

# m3u8 download

# HLS streams requires the 'hdnea3' cookie

# Percent escaped url

# iframe src

# data-mpx-src

# data-src

# m3u8 download

# From http://www.vulture.com/2016/06/letterman-couldnt-care-less-about-late-night.html

# Geo-restricted to US

# m3u8 download
'''query bonanzaPage(
  $app: NBCUBrands! = nbc
  $name: String!
  $oneApp: Boolean
  $platform: SupportedPlatforms! = web
  $type: EntityPageType! = VIDEO
  $userId: String!
) {
  bonanzaPage(
    app: $app
    name: $name
    oneApp: $oneApp
    platform: $platform
    type: $type
    userId: $userId
  ) {
    metadata {
      ... on VideoPageData {
        description
        episodeNumber
        keywords
        locked
        mpxAccountId
        mpxGuid
        rating
        resourceId
        seasonNumber
        secondaryTitle
        seriesShortTitle
      }
    }
  }
}'''"
ndr.py,"# coding: utf-8

#]+),[\da-z]+\.html'

# httpVideo, same content id

# httpVideo, different content id

# httpAudio, same content id

# with subtitles

# some more work needed if we only found sophoraID

# get the initial part of the url path,. eg /panorama/archiv/2022/

# find tell-tale image with the actual ID

# or try to use special knowledge!

#]+),)?(?P<id>[\da-z]+)\.html'

# httpVideo, same content id

# httpVideo, different content id

# find tell-tale URL with the actual ID, or ...

# httpVideoLive

# httpVideo

# httpAudio

# httpAudioLive, no explicit ext
'''\bsrc\s*=\s*[""']?(?:/\w+)+/([a-z]+\d+)(?!\.)\b'''"
ndtv.py,"# coding: utf-8

# __filename is url

# '__title' does not contain extra words such as sub-site name, ""Video"" etc.

# in ""movies"" sub-site pages, filename is URL

# ""doctor"" sub-site has MM:SS format

# ""sports"", ""doctor"", ""swirlster"" sub-sites don't have 'publish-date'
"
nerdcubed.py,"# coding: utf-8
"
neteasemusic.py,"# coding: utf-8

# JSON load failure

#m]/)?song\?.*?\bid=(?P<id>[0-9]+)'

#/song?id=32102397',

#/song?id=22735043',

#/)?album\?id=(?P<id>[0-9]+)'

#/album?id=220780',

#/song?id=%s' % song['id'],

#/)?artist\?id=(?P<id>[0-9]+)'

#/artist?id=10559',

#/artist?id=124098',

#/song?id=%s' % song['id'],

#/)?(playlist|discover/toplist)\?id=(?P<id>[0-9]+)'

#/playlist?id=79177352',

#/discover/toplist?id=3733003',

# is a chart/toplist

#/song?id=%s' % song['id'],

#/)?mv\?id=(?P<id>[0-9]+)'

#/mv?id=415350',

#/?)program\?id=(?P<id>[0-9]+)'

#/program?id=10109055',

#/program?id=10141022',

#/program?id=10141022',

#/song?id=%s' % song_id,

#/)?djradio\?id=(?P<id>[0-9]+)'

#/djradio?id=42',

#/program?id=%s' % program['id'],
"
netzkino.py,"# coding: utf-8

#!/(?P<category>[^/]+)/(?P<id>[^/]+)'


#!/scifikino/rakete-zum-mond',
"
newgrounds.py,"# source format unavailable, additional mp4 formats

#&]+)'

# cut left menu
"
newstube.py,"# coding: utf-8
"
nextmedia.py,"# coding: utf-8

# ext can be inferred from url

# No thumbnail

# Redirected from http://ent.appledaily.com.tw/enews/article/entertainment/20150128/36354694
"
nexx.py,"# coding: utf-8

# movie

# episode

# does not work via arc

# free cdn from http://www.spiegel.de/video/eifel-zoo-aufregung-um-ausgebrochene-raubtiere-video-99018031.html

# Reference:

# 1. https://nx-s.akamaized.net/files/201510/44.pdf


# JavaScript Integration

# TODO: support more embed formats


# not all videos work via arc, e.g. nexx:741:1269984

# Reverse engineered from JS code (see getDeviceID function)

# As described in [1] X-Request-Token generation algorithm is

# as follows:

#   md5( operation + domain_id + domain_secret )

# where domain_secret is a static value that will be given by nexx.tv

# as per [1]. Here is how this ""secret"" is generated (reversed

# from _play.api.init function, search for clienttoken). So it's

# actually not static and not that much of a secret.

# 1. https://nexxtvstorage.blob.core.windows.net/files/201610/27.pdf

# Reversed from JS code for _play.api.call function (search for

# X-Request-Token)

# TODO: reverse more cdns

#&]+)'

# Reference:

# 1. https://nx-s.akamaized.net/files/201510/44.pdf


# iFrame Embed Integration
'''(?x)
                        (?:
                            https?://api\.nexx(?:\.cloud|cdn\.com)/v3/(?P<domain_id>\d+)/videos/byid/|
                            nexx:(?:(?P<domain_id_s>\d+):)?|
                            https?://arc\.nexx\.cloud/api/video/
                        )
                        (?P<id>\d+)
                    '''
"
nfl.py,"# coding: utf-8

#?&]+)'

#?&]+)'
'''(?x)
                    https?://
                        (?P<host>
                            (?:www\.)?
                            (?:
                                (?:
                                    nfl|
                                    buffalobills|
                                    miamidolphins|
                                    patriots|
                                    newyorkjets|
                                    baltimoreravens|
                                    bengals|
                                    clevelandbrowns|
                                    steelers|
                                    houstontexans|
                                    colts|
                                    jaguars|
                                    (?:titansonline|tennesseetitans)|
                                    denverbroncos|
                                    (?:kc)?chiefs|
                                    raiders|
                                    chargers|
                                    dallascowboys|
                                    giants|
                                    philadelphiaeagles|
                                    (?:redskins|washingtonfootball)|
                                    chicagobears|
                                    detroitlions|
                                    packers|
                                    vikings|
                                    atlantafalcons|
                                    panthers|
                                    neworleanssaints|
                                    buccaneers|
                                    azcardinals|
                                    (?:stlouis|the)rams|
                                    49ers|
                                    seahawks
                                )\.com|
                                .+?\.clubs\.nfl\.com
                            )
                        )/
                    '''
"
nhk.py,"# coding: utf-8

# the 7-character IDs can have alphabetic chars too: assume [a-z] rather than just [a-f], eg

# Content available only for a limited period of time. Visit

# https://www3.nhk.or.jp/nhkworld/en/ondemand/ for working samples.

# video clip

# audio clip

# m3u8 download

# video, alphabetic character in ID #29670

# video program episodes

# video program clips

# audio program
"
nhl.py,"# type=video

# type=article

# Some m3u8 URLs are invalid (https://github.com/ytdl-org/youtube-dl/issues/10713)
"
nick.py,"# coding: utf-8

# None of videos on the website are still alive?

#.]+)'

#.]+)

#&]+)'

#&]+)'

#&]+)'

#playlist/7airc6',

#playlist/k6te4y',
'''(?x)
                    https?://
                        (?:
                            (?P<domain>(?:www\.)?nickjr|mundonick\.uol)\.com\.br|
                            (?:www\.)?nickjr\.[a-z]{2}|
                            (?:www\.)?nickelodeonjunior\.fr
                        )
                        /(?:programas/)?[^/]+/videos/(?:episodios/)?(?P<id>[^/?\#.]+)
                    '''
"
niconico.py,"# coding: utf-8

# timestamp is unstable

# File downloaded with and without credentials are different, so omit

# the md5 field

# 'video exists but is marked as ""deleted""

# md5 is unstable

# timestamp field has different value if logged in

# video not available via `getflv`; ""old"" HTML5 video

# ""New"" HTML5 video

# md5 is unstable

# Video without owner

# DMC video with heartbeat

# timestamp is unstable

# No authentication to be performed

# Log in

# m3u8 (encryption)

# http

# get heartbeat info

# interval, convert milliseconds to seconds, then halve to make a buffer.

# Session API are used in HTML5, which always serves mp4

# Default quality value is -1

# Get video webpage for API data.

# Get video info

# Start extracting video formats

# Get HTML5 videos info

# Get flv/swf info

# Invoking ffprobe to determine resolution

# Some complex swf files doesn't have video stream (e.g. nm4809023)

# Community restricted videos seem to have issues with the thumb API not returning anything at all

# 'creation_time' tag on video stream of re-encoded SMILEVIDEO mp4 files are '1970-01-01T00:00:00.000000Z'.

# According to compconf, smile videos from pre-2017 are always better quality than their DMC counterparts

# If movie file size is unstable, old server movie is not source movie.

# Some complex swf files doesn't have total bit rate metadata (e.g. nm6049209)

# Start extracting information

# prefer to get the untranslated original title

# choose highest from 720p to 240p

# for channel movie and community movie

# Note: cannot use api_data.get('owner', {}) because owner may be set to ""null""

# in the JSON, which will cause None to be returned instead of {}.

#&]+)?'

# If the last page has a full page of videos, we need to break down the query interval further

#?])'
'''(?x)
                    (?:archive_)?
                    (?:(?P<codec>[^_]+)_)?
                    (?:(?P<br>[\d]+)kbps_)?
                    (?:(?P<res>[\d+]+)p_)?
                '''"
ninecninemedia.py,"# coding: utf-8
"
ninegag.py,"#]+)'


# HTML escaped title
"
ninenow.py,"# coding: utf-8

#]+)'

# clip

# episode

# DRM protected
"
nintendo.py,"# coding: utf-8

#&]+)'
"
njpwworld.py,"# coding: utf-8

# AES-encrypted m3u8

# No authentication to be performed

# Setup session (will set necessary cookies)

# /auth/login will return 302 for successful logins
"
nobelprize.py,"# coding: utf-8
"
nonktube.py,
noovo.py,"# coding: utf-8

#&]+)'

# clip

# episode
"
normalboots.py,"# coding: utf-8

# m3u8 download
"
nosvideo.py,"# coding: utf-8
"
nova.py,"# coding: utf-8

#&]+)'

# Old path, not actual as of 08.04.2020

#player_13260',

# rtmp download

# media.cms.nova.cz embed

# novaplus

#&]+)',
"
nowness.py,"# coding: utf-8

# youtube-dl currently doesn't support cinematique

# return self.url_result('http://cinematique.com/embed/%s' % video_id, 'Cinematique')

#])'

# vimeo

#])'
"
noz.py,"# coding: utf-8
"
npo.py,"#]+)

# non asf in streams

#content',

# audio

# live stream

# We have to remove the javascript callback

# For some videos actual video id (prid) is different (e.g. for

# http://www.omroepwnl.nl/video/fragment/vandaag-de-dag-verkiezingen__POMS_WNL_853698

# video id is POMS_WNL_853698 but prid is POW_00996502)

# titel is too generic in some cases so utilize aflevering_titel as well

# when available (e.g. http://tegenlicht.vpro.nl/afleveringen/2014-2015/access-to-africa.html)

# Example: http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706

# Stream URL instead of JSON, example: npo:LI_NL1_4188102

# JSON

# smooth streaming is not supported

# f4m downloader downloads only piece of live stream

# Example: http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706

#&]+))?'


#&]+)'


# Skip because of m3u8 download

#&]+)'


# playlist with youtube embed

# Skip because of m3u8 download

#&]+)'
'''(?x)
                    (?:
                        npo:|
                        https?://
                            (?:www\.)?
                            (?:
                                npo\.nl/(?:[^/]+/)*|
                                (?:ntr|npostart)\.nl/(?:[^/]+/){2,}|
                                omroepwnl\.nl/video/fragment/[^/]+__|
                                (?:zapp|npo3)\.nl/(?:[^/]+/){2,}
                            )
                        )
                        (?P<id>[^/?#]+)
                '''


'''""Dit is wel een 'landslide'...""'''"
npr.py,"# multimedia, not media title

# multimedia, no formats, stream
"
nrk.py,"# coding: utf-8

# Can be ProgramIsGeoBlocked or ChannelIsGeoBlocked*

#&]+)

# video

# audio

# MD5 is unstable

# podcast

# clip

# program

# direkte

# known values for preferredCdn: akamai, iponly, minicdn and telenor

# https://en.wikipedia.org/wiki/Norwegian_Media_Authority

# single playlist video

#del=2',

#',

# Extract entries

# Find next URL

#&]+)

# no /sesong/ in path

# weird nested _embedded in catalog JSON response

# 841 entries, multi page

# 180 entries, single page

# new layout, instalments

# new layout, instalments, more entries

# new layout, seasons

# old layout

#&]+)'

'''(?x)://
        (?:
            nrkod\d{1,2}-httpcache0-47115-cacheod0\.dna\.ip-only\.net/47115-cacheod0|
            nrk-od-no\.telenorcdn\.net|
            minicdn-od\.nrk\.no/od/nrkhd-osl-rr\.netwerk\.no/no
        )/'''


'''(?x)
                        (?:
                            nrk:|
                            https?://
                                (?:
                                    (?:www\.)?nrk\.no/video/(?:PS\*|[^_]+_)|
                                    v8[-.]psapi\.nrk\.no/mediaelement/
                                )
                            )
                            (?P<id>[^?\#&]+)
                        '''


'''(?x)
                    https?://
                        (?P<domain>tv|radio)\.nrk\.no/
                        (?P<serie_kind>serie|pod[ck]ast)/
                        (?P<serie>[^/]+)/
                        (?:
                            (?:sesong/)?(?P<id>\d+)|
                            sesong/(?P<id_2>[^/?#&]+)
                        )
                    '''
"
nrl.py,"# coding: utf-8

#]+)'

# m3u8 download
"
ntvcojp.py,"# coding: utf-8

#]+)'

# m3u8 download
"
ntvde.py,"# coding: utf-8

#]+/[^/?#]+-article(?P<id>.+)\.html'


#player""\s*\)\s*\.data\(\s*""player"",\s*(\{.*?\})\);',

# estimation
"
ntvru.py,"# coding: utf-8

#&]+)'


# Schemeless file URL
"
nuevo.py,"# coding: utf-8
"
nuvid.py,"# coding: utf-8

# nice to have, not required
'''<span\s[^>]*?\btitle\s*=\s*(?P<q>""|'|\b)(?P<title>[^""]+)(?P=q)\s*>'''
'''<div\s[^>]*?\bclass\s*=\s*(?P<q>""|'|\b)thumb-holder video(?P=q)>\s*<h5\b[^>]*>(?P<title>[^<]+)</h5'''
'''<span\s[^>]*?\bclass\s*=\s*(?P<q>""|'|\b)title_thumb(?P=q)>(?P<title>[^<]+)</span'''"
nytimes.py,"# coding: utf-8

# Authorization generation algorithm is reverse engineered from `signer` in

# http://graphics8.nytimes.com/video/vhs/vhs-2.x.min.js

#     formats.extend(self._extract_mpd_formats(

#         video_url, video_id, format_id or 'dash', fatal=False))
"
nzz.py,"# coding: utf-8

#]+-ld\.(?P<id>\d+)'
"
odatv.py,"# coding: utf-8

# mobile URL

# no video
"
odnoklassniki.py,"# coding: utf-8

# metadata in JSON

# metadataUrl

# YouTube embed (metadataUrl, provider == USER_YOUTUBE)

# YouTube embed (metadata, provider == USER_YOUTUBE, no metadata.movie.title field)

#lst#',

# Paid video

# Some embedded videos may not contain title in movie dict (e.g.

# http://ok.ru/video/62036049272859-0) thus we allow missing title

# here and it's going to be extracted later by an extractor that

# will process the actual embed.

# Live formats
'''(?x)
                https?://
                    (?:(?:www|m|mobile)\.)?
                    (?:odnoklassniki|ok)\.ru/
                    (?:
                        video(?:embed)?/|
                        web-api/video/moviePlayer/|
                        live/|
                        dk\?.*?st\.mvId=
                    )
                    (?P<id>[\d-]+)
                '''
"
oktoberfesttv.py,"# coding: utf-8

#]+)'

"
once.py,"# coding: utf-8

# Prevent advertisement from embedding into m3u8 playlist (see

# https://github.com/ytdl-org/youtube-dl/issues/8893#issuecomment-199912684)
"
ondemandkorea.py,"# coding: utf-8

# Page sometimes returns captcha page with HTTP 403
"
onet.py,"# coding: utf-8

#]|$)'

# embedded via pulsembed
"
onionstudios.py,"# coding: utf-8
"
ooyala.py,"# From http://it.slashdot.org/story/13/04/25/178216/recovering-data-from-broken-hard-drives-and-ssds-video

# The video in the original webpage now uses PlayWire

# Only available for ipad

# Information available only through SAS api

# From http://community.plm.automation.siemens.com/t5/News-NX-Manufacturing/Tool-Path-Divide/ba-p/4187

# empty stream['url']['data']

# m3u8 download
'''(?x)
                    (?:
                        ooyalaexternal:|
                        https?://.+?\.ooyala\.com/.*?\bexternalId=
                    )
                    (?P<partner_id>[^:]+)
                    :
                    (?P<id>.+)
                    (?:
                        :|
                        .*?&pcode=
                    )
                    (?P<pcode>.+?)
                    (?:&|$)
                    '''

"
openload.py,"# coding: utf-8

#b.done') !== null;

#a').click();
'''
        phantom.onError = function(msg, trace) {{
          var msgStack = ['PHANTOM ERROR: ' + msg];
          if(trace && trace.length) {{
            msgStack.push('TRACE:');
            trace.forEach(function(t) {{
              msgStack.push(' -> ' + (t.file || t.sourceURL) + ': ' + t.line
                + (t.function ? ' (in function ' + t.function +')' : ''));
            }});
          }}
          console.error(msgStack.join('\n'));
          phantom.exit(1);
        }};
        var page = require('webpage').create();
        var fs = require('fs');
        var read = {{ mode: 'r', charset: 'utf-8' }};
        var write = {{ mode: 'w', charset: 'utf-8' }};
        JSON.parse(fs.read(""{cookies}"", read)).forEach(function(x) {{
          phantom.addCookie(x);
        }});
        page.settings.resourceTimeout = {timeout};
        page.settings.userAgent = ""{ua}"";
        page.onLoadStarted = function() {{
          page.evaluate(function() {{
            delete window._phantom;
            delete window.callPhantom;
          }});
        }};
        var saveAndExit = function() {{
          fs.write(""{html}"", page.content, write);
          fs.write(""{cookies}"", JSON.stringify(phantom.cookies), write);
          phantom.exit();
        }};
        page.onLoadFinished = function(status) {{
          if(page.url === """") {{
            page.setContent(fs.read(""{html}"", read), ""{url}"");
          }}
          else {{
            {jscode}
          }}
        }};
        page.open("""");
    '''

""""""PhantomJS wrapper class

    This class is experimental.
    """"""


""""""
        Downloads webpage (if needed) and executes JS

        Params:
            url: website url
            html: optional, html code of website
            video_id: video id
            note: optional, displayed when downloading webpage
            note2: optional, displayed when executing JS
            headers: custom http headers
            jscode: code to be executed when page is loaded

        Returns tuple with:
            * downloaded website (after JS execution)
            * anything you print with `console.log` (but not inside `page.execute`!)

        In most cases you don't need to add any `jscode`.
        It is executed in `page.onLoadFinished`.
        `saveAndExit();` is mandatory, use it instead of `phantom.exit()`
        It is possible to wait for some element on the webpage, for example:
            var check = function() {
              var elementFound = page.evaluate(function() {
                return document.querySelector('#b.done') !== null;
              });
              if(elementFound)
                saveAndExit();
              else
                window.setTimeout(check, 500);
            }

            page.evaluate(function(){
              document.querySelector('#a').click();
            });
            check();
        """"""
"
options.py,"# silently skip if file is not present

# FIXME: https://github.com/ytdl-org/youtube-dl/commit/dfe5fa49aed02cf36ba9f743b11b0903554b5e56

# No need to wrap help messages if we're on a wide console

#', ';' or ']' are considered as comments and ignored."")
''' ('-o', '--option') -> -o, --format METAVAR'''

"
ora.py,"# coding: utf-8

#]+)'

# similar to GameSpotIE
"
orf.py,"# coding: utf-8

# rtsp downloads

# Check for geoblocking.

# There is a property is_geoprotection, but that's always false

#/)?stories/(?P<id>\d+)'


# Titles are duplicates, make them unique
"
outsidetv.py,"# coding: utf-8
"
packtpub.py,"# compat_str,

# remove_end,

# urljoin,

# _PACKT_BASE = 'https://www.packtpub.com'

#]+))?'


# TODO: find a better way to avoid duplicating course requests

# metadata = self._download_json(

#     '%s/products/%s/chapters/%s/sections/%s/metadata'

#     % (self._MAPT_REST, course_id, chapter_id, video_id),

#     video_id)['data']


# title = metadata['pageTitle']

# course_title = metadata.get('title')

# if course_title:

#     title = remove_end(title, ' - %s' % course_title)

# timestamp = unified_timestamp(metadata.get('publicationDate'))

# thumbnail = urljoin(self._PACKT_BASE, metadata.get('filepath'))


# title,

# 'thumbnail': thumbnail,

# 'timestamp': timestamp,
"
palcomp3.py,"# coding: utf-8

#]+)'

#]+)'

#]+)/?#clipe'

#clipe',
'''{
  artist(slug: ""%s"") {
    %s
  }
}'''

'''music(slug: ""%%s"") {
      %s
    }'''

'''duration
      hls
      mp3File
      musicID
      plays
      title'''


'''artistID
    musics {
      nodes {
        %s
      }
    }
    name'''

"
pandoratv.py,"# coding: utf-8

# new format

# old format

# mobile

# Test metadata only

#36797454_new',
'''(?x)
                        https?://
                            (?:
                                (?:www\.)?pandora\.tv/view/(?P<user_id>[^/]+)/(?P<id>\d+)|  # new format
                                (?:.+?\.)?channel\.pandora\.tv/channel/video\.ptv\?|        # old format
                                m\.pandora\.tv/?\?                                          # mobile
                            )
                    '''
"
parliamentliveuk.py,
patreon.py,"# coding: utf-8

# Currently Patreon exposes download URL via hidden CSS, so login is not

# needed. Keeping this commented for when this inevitably changes.
'''
    def _login(self):
        username, password = self._get_login_info()
        if username is None:
            return

        login_form = {
            'redirectUrl': 'http://www.patreon.com/',
            'email': username,
            'password': password,
        }

        request = sanitized_Request(
            'https://www.patreon.com/processLogin',
            compat_urllib_parse_urlencode(login_form).encode('utf-8')
        )
        login_page = self._download_webpage(request, None, note='Logging in')

        if re.search(r'onLoginFailed', login_page):
            raise ExtractorError('Unable to login, incorrect username and/or password', expected=True)

    def _real_initialize(self):
        self._login()
    '''

"
pbs.py,"# coding: utf-8

# http://www.pbs.org/

# http://aptv.org/

# http://www.gpb.org/

# http://www.mpbonline.org

# http://www.wnpt.org

# http://wfsu.org/

# http://www.wsre.org

# http://www.wtcitv.org

# http://pba.org/

# http://alaskapublic.org/kakm

# (r'kuac\.org', 'KUAC (KUAC)'),  # http://kuac.org/kuac-tv/

# (r'ktoo\.org', '360 North (KTOO)'),  # http://www.ktoo.org/

# (r'azpm\.org', 'KUAT 6 (KUAT)'),  # http://www.azpm.org/

# http://www.azpbs.org

# http://www.newmexicopbs.org/

# http://vegaspbs.org/

# http://www.aetn.org/

# http://www.ket.org/

# http://www.wkno.org/

# http://www.lpb.org/

# http://www.oeta.tv

# http://www.optv.org/

# http://www.wsiu.org/

# http://www.keet.org

# http://kixe.org/

# http://www.kpbs.org/

# http://www.kqed.org

# http://www.kvie.org

# http://www.pbssocal.org/

# http://www.valleypbs.org/

# http://cptv.org

# http://www.knpb.org/

# http://www.soptv.org

# (r'klcs\.org', 'KLCS/Channel 58 (KLCS)'),  # http://www.klcs.org

# (r'krcb\.org', 'KRCB Television & Radio (KRCB)'),  # http://www.krcb.org

# (r'kvcr\.org', 'KVCR TV/DT/FM :: Vision for the Future (KVCR)'),  # http://kvcr.org

# http://www.rmpbs.org

# http://www.kenw.org

# http://www.kued.org

# http://www.wyomingpbs.org

# http://www.cpt12.org/

# http://www.kbyutv.org/

# http://www.thirteen.org

# http://wgbh.org

# http://www.wgby.org

# http://www.njtvonline.org/

# (r'ripbs\.org', 'Rhode Island PBS (WSBE)'),  # http://www.ripbs.org/home/

# http://www.wliw.org/

# http://www.mpt.org

# http://www.weta.org

# http://www.whyy.org

# http://www.wlvt.org/

# http://www.wvpt.net

# http://www.whut.org

# http://www.wedu.org

# http://www.wgcu.org/

# (r'wjct\.org', 'WJCT Public Broadcasting (WJCT)'),  # http://www.wjct.org

# http://www.wpbt2.org

# http://wucftv.org

# http://www.wuft.org

# http://www.wxel.org/home/

# http://www.wlrn.org/

# http://wusf.org/

# http://www.scetv.org

# http://www.unctv.org/

# (r'pbsguam\.org', 'PBS Guam (KGTF)'),  # http://www.pbsguam.org/

# http://www.pbshawaii.org/

# http://idahoptv.org

# http://www.ksps.org/home/

# http://www.opb.org

# http://www.kwsu.org

# http://will.illinois.edu/

# http://www.wsec.tv

# http://www.wttw.com/

# (r'wtvp\.org', 'WTVP & WTVP.org, Public Media for Central Illinois (WTVP)'),  # http://www.wtvp.org/

# http://www.iptv.org/

# http://www.ninenet.org

# http://wfwa.org/

# http://www.wfyi.org

# http://www.mptv.org

# http://www.wnin.org/

# http://www.wnit.org/

# http://www.wpt.org/

# http://wvut.org/

# http://www.weiu.net

# http://www.wqpt.org

# http://www.wycc.org

# (r'lakeshorepublicmedia\.org', 'Lakeshore Public Television (WYIN)'),  # http://lakeshorepublicmedia.org/

# http://wipb.org

# http://indianapublicmedia.org/tv/

# http://www.cetconnect.org

# http://www.thinktv.org

# http://wbgu.org

# http://www.wgvu.org/

# http://netnebraska.org

# http://www.pioneer.org

# http://www.sdpb.org

# http://www.tpt.org

# http://www.ksmq.org/

# http://www.kpts.org/

# http://ktwu.org

# (r'shptv\.org', 'Smoky Hills Public Television (KOOD)'),  # http://www.shptv.org

# (r'kcpt\.org', 'KCPT Kansas City Public Television (KCPT)'),  # http://kcpt.org/

# (r'blueridgepbs\.org', 'Blue Ridge PBS (WBRA)'),  # http://www.blueridgepbs.org/

# http://easttennesseepbs.org

# http://www.wcte.org

# http://wljt.org/

# http://wosu.org/

# http://woub.org/tv/index.php?section=5

# http://wvpublic.org/

# http://www.wkyupbs.org

# (r'wyes\.org', 'WYES-TV/New Orleans (WYES)'),  # http://www.wyes.org

# http://www.kera.org/

# http://www.mpbn.net/

# http://www.mountainlake.org/

# http://nhptv.org/

# http://www.vpt.org

# http://www.witf.org

# http://www.wqed.org/

# http://www.wmht.org/home/

# http://www.deltabroadcasting.org

# http://www.dptv.org/

# http://www.wcmu.org

# http://wkar.org/

# http://wnmutv.nmu.edu

# http://www.wdse.org/

# http://www.wgte.org

# http://www.lakelandptv.org

# (r'prairiepublic\.org', 'PRAIRIE PUBLIC (KFME)'),  # http://www.prairiepublic.org/

# http://www.kmos.org/

# http://montanapbs.org

# http://www.krwg.org

# http://www.panhandlepbs.org/home/

# www.kcostv.org

# http://www.wcny.org

# http://www.wned.org/

# http://www.wpbstv.org

# http://wskg.org

# http://wxxi.org

# http://www.wpsu.org

# (r'wqln\.org', 'WQLN/Channel 54 (WQLN)'),  # http://www.wqln.org

# http://www.wvia.org/

# http://www.wtvi.org/

# (r'whro\.org', 'WHRO (WHRO)'),  # http://whro.org

# http://www.WesternReservePublicMedia.org/

# http://www.wviz.org/

# http://kcts9.org/

# http://www.basinpbs.org

# http://www.houstonpublicmedia.org/

# (r'tamu\.edu', 'KAMU - TV (KAMU)'),  # http://KAMU.tamu.edu

# (r'kedt\.org', 'KEDT/Channel 16 (KEDT)'),  # http://www.kedt.org

# http://www.klrn.org

# http://www.klru.org

# (r'kmbh\.org', 'KMBH-TV (KMBH)'),  # http://www.kmbh.org

# (r'knct\.org', 'KNCT (KNCT)'),  # http://www.knct.org

# (r'ktxt\.org', 'KTTZ-TV (KTXT)'),  # http://www.ktxt.org

# http://www.wtjx.org/

# http://ideastations.org/

# http://kbtc.org

# Direct video URL

# Article with embedded player (or direct video)

#]) |

# Player

# requires ffmpeg

# Video embedded in iframe containing angle brackets as attribute's value (e.g.

# ""<iframe style='position: absolute;<br />\ntop: 0; left: 0;' ..."", see

# https://github.com/ytdl-org/youtube-dl/issues/7059)

# Frontline video embedded via flp2012.js

# requires ffmpeg

# Serves hd only via wigget/partnerplayer page

# https://github.com/ytdl-org/youtube-dl/issues/13801

#?s=\[""([^""]+)""', cookie, 'station')

# tabbed frontline videos

#(?:video-|part)\d+[""\'][^>]+data-cove[Ii]d=[""\'](\d+)',

# frontline video embed

# coveplayer

# coveplayer from http://www.pbs.org/wgbh/frontline/film/real-csi/

# jwplayer

# http://www.pbs.org/wgbh/roadshow/watch/episode/2105-indianapolis-hour-2/

# https://www.pbs.org/wgbh/masterpiece/episodes/victoria-s2-e1/

# Frontline video embedded via flp

# pkg_id calculation is reverse engineered from

# http://www.pbs.org/wgbh/pages/frontline/js/flp2012.js

# Player pages may also serve different qualities

# Lower qualities (150k and 192k) are not available as HTTP formats (see [1]),

# we won't try extracting them.

# Since summer 2016 higher quality formats (4500k and 6500k) are also available

# albeit they are not documented in [2].

# 1. https://github.com/ytdl-org/youtube-dl/commit/cbc032c8b70a038a69259378c92b4ba97b42d491#commitcomment-17313656

# 2. https://projects.pbs.org/confluence/display/coveapi/COVE+Video+Specifications

# This may produce invalid links sometimes (e.g.

# http://www.pbs.org/wgbh/frontline/film/suicide-plan)

# info['title'] is often incomplete (e.g. 'Full Episode', 'Episode 5', etc)

# Try turning it to 'program - title' naming scheme if possible
'''(?x)https?://
        (?:
           # Direct video URL
           (?:%s)/(?:(?:vir|port)alplayer|video)/(?P<id>[0-9]+)(?:[?/]|$) |
           # Article with embedded player (or direct video)
           (?:www\.)?pbs\.org/(?:[^/]+/){1,5}(?P<presumptive_id>[^/]+?)(?:\.html)?/?(?:$|[?\#]) |
           # Player
           (?:video|player)\.pbs\.org/(?:widget/)?partnerplayer/(?P<player_id>[^/]+)/
        )
    '''"
pearvideo.py,"# coding: utf-8
"
peekvids.py,"# coding: utf-8

#]+/){2}|embed/?\?(?:[^#]*&)?v=)

#]*)

# may not have found the thumbnail if it was in a list in the ld+json

#]*)'
'''(?x)
        https?://(?:www\.)?peekvids\.com/
        (?:(?:[^/?#]+/){2}|embed/?\?(?:[^#]*&)?v=)
        (?P<id>[^/?&#]*)
    '''
"
peertube.py,"# coding: utf-8

# Taken from https://instances.joinpeertube.org/instances

# Issue #26002

# nsfw

# description is shortened
'''(?:
                            # Taken from https://instances.joinpeertube.org/instances
                            peertube\.rainbowswingers\.net|
                            tube\.stanisic\.nl|
                            peer\.suiri\.us|
                            medias\.libox\.fr|
                            videomensoif\.ynh\.fr|
                            peertube\.travelpandas\.eu|
                            peertube\.rachetjay\.fr|
                            peertube\.montecsys\.fr|
                            tube\.eskuero\.me|
                            peer\.tube|
                            peertube\.umeahackerspace\.se|
                            tube\.nx-pod\.de|
                            video\.monsieurbidouille\.fr|
                            tube\.openalgeria\.org|
                            vid\.lelux\.fi|
                            video\.anormallostpod\.ovh|
                            tube\.crapaud-fou\.org|
                            peertube\.stemy\.me|
                            lostpod\.space|
                            exode\.me|
                            peertube\.snargol\.com|
                            vis\.ion\.ovh|
                            videosdulib\.re|
                            v\.mbius\.io|
                            videos\.judrey\.eu|
                            peertube\.osureplayviewer\.xyz|
                            peertube\.mathieufamily\.ovh|
                            www\.videos-libr\.es|
                            fightforinfo\.com|
                            peertube\.fediverse\.ru|
                            peertube\.oiseauroch\.fr|
                            video\.nesven\.eu|
                            v\.bearvideo\.win|
                            video\.qoto\.org|
                            justporn\.cc|
                            video\.vny\.fr|
                            peervideo\.club|
                            tube\.taker\.fr|
                            peertube\.chantierlibre\.org|
                            tube\.ipfixe\.info|
                            tube\.kicou\.info|
                            tube\.dodsorf\.as|
                            videobit\.cc|
                            video\.yukari\.moe|
                            videos\.elbinario\.net|
                            hkvideo\.live|
                            pt\.tux\.tf|
                            www\.hkvideo\.live|
                            FIGHTFORINFO\.com|
                            pt\.765racing\.com|
                            peertube\.gnumeria\.eu\.org|
                            nordenmedia\.com|
                            peertube\.co\.uk|
                            tube\.darfweb\.eu|
                            tube\.kalah-france\.org|
                            0ch\.in|
                            vod\.mochi\.academy|
                            film\.node9\.org|
                            peertube\.hatthieves\.es|
                            video\.fitchfamily\.org|
                            peertube\.ddns\.net|
                            video\.ifuncle\.kr|
                            video\.fdlibre\.eu|
                            tube\.22decembre\.eu|
                            peertube\.harmoniescreatives\.com|
                            tube\.fabrigli\.fr|
                            video\.thedwyers\.co|
                            video\.bruitbruit\.com|
                            peertube\.foxfam\.club|
                            peer\.philoxweb\.be|
                            videos\.bugs\.social|
                            peertube\.malbert\.xyz|
                            peertube\.bilange\.ca|
                            libretube\.net|
                            diytelevision\.com|
                            peertube\.fedilab\.app|
                            libre\.video|
                            video\.mstddntfdn\.online|
                            us\.tv|
                            peertube\.sl-network\.fr|
                            peertube\.dynlinux\.io|
                            peertube\.david\.durieux\.family|
                            peertube\.linuxrocks\.online|
                            peerwatch\.xyz|
                            v\.kretschmann\.social|
                            tube\.otter\.sh|
                            yt\.is\.nota\.live|
                            tube\.dragonpsi\.xyz|
                            peertube\.boneheadmedia\.com|
                            videos\.funkwhale\.audio|
                            watch\.44con\.com|
                            peertube\.gcaillaut\.fr|
                            peertube\.icu|
                            pony\.tube|
                            spacepub\.space|
                            tube\.stbr\.io|
                            v\.mom-gay\.faith|
                            tube\.port0\.xyz|
                            peertube\.simounet\.net|
                            play\.jergefelt\.se|
                            peertube\.zeteo\.me|
                            tube\.danq\.me|
                            peertube\.kerenon\.com|
                            tube\.fab-l3\.org|
                            tube\.calculate\.social|
                            peertube\.mckillop\.org|
                            tube\.netzspielplatz\.de|
                            vod\.ksite\.de|
                            peertube\.laas\.fr|
                            tube\.govital\.net|
                            peertube\.stephenson\.cc|
                            bistule\.nohost\.me|
                            peertube\.kajalinifi\.de|
                            video\.ploud\.jp|
                            video\.omniatv\.com|
                            peertube\.ffs2play\.fr|
                            peertube\.leboulaire\.ovh|
                            peertube\.tronic-studio\.com|
                            peertube\.public\.cat|
                            peertube\.metalbanana\.net|
                            video\.1000i100\.fr|
                            peertube\.alter-nativ-voll\.de|
                            tube\.pasa\.tf|
                            tube\.worldofhauru\.xyz|
                            pt\.kamp\.site|
                            peertube\.teleassist\.fr|
                            videos\.mleduc\.xyz|
                            conf\.tube|
                            media\.privacyinternational\.org|
                            pt\.forty-two\.nl|
                            video\.halle-leaks\.de|
                            video\.grosskopfgames\.de|
                            peertube\.schaeferit\.de|
                            peertube\.jackbot\.fr|
                            tube\.extinctionrebellion\.fr|
                            peertube\.f-si\.org|
                            video\.subak\.ovh|
                            videos\.koweb\.fr|
                            peertube\.zergy\.net|
                            peertube\.roflcopter\.fr|
                            peertube\.floss-marketing-school\.com|
                            vloggers\.social|
                            peertube\.iriseden\.eu|
                            videos\.ubuntu-paris\.org|
                            peertube\.mastodon\.host|
                            armstube\.com|
                            peertube\.s2s\.video|
                            peertube\.lol|
                            tube\.open-plug\.eu|
                            open\.tube|
                            peertube\.ch|
                            peertube\.normandie-libre\.fr|
                            peertube\.slat\.org|
                            video\.lacaveatonton\.ovh|
                            peertube\.uno|
                            peertube\.servebeer\.com|
                            peertube\.fedi\.quebec|
                            tube\.h3z\.jp|
                            tube\.plus200\.com|
                            peertube\.eric\.ovh|
                            tube\.metadocs\.cc|
                            tube\.unmondemeilleur\.eu|
                            gouttedeau\.space|
                            video\.antirep\.net|
                            nrop\.cant\.at|
                            tube\.ksl-bmx\.de|
                            tube\.plaf\.fr|
                            tube\.tchncs\.de|
                            video\.devinberg\.com|
                            hitchtube\.fr|
                            peertube\.kosebamse\.com|
                            yunopeertube\.myddns\.me|
                            peertube\.varney\.fr|
                            peertube\.anon-kenkai\.com|
                            tube\.maiti\.info|
                            tubee\.fr|
                            videos\.dinofly\.com|
                            toobnix\.org|
                            videotape\.me|
                            voca\.tube|
                            video\.heromuster\.com|
                            video\.lemediatv\.fr|
                            video\.up\.edu\.ph|
                            balafon\.video|
                            video\.ivel\.fr|
                            thickrips\.cloud|
                            pt\.laurentkruger\.fr|
                            video\.monarch-pass\.net|
                            peertube\.artica\.center|
                            video\.alternanet\.fr|
                            indymotion\.fr|
                            fanvid\.stopthatimp\.net|
                            video\.farci\.org|
                            v\.lesterpig\.com|
                            video\.okaris\.de|
                            tube\.pawelko\.net|
                            peertube\.mablr\.org|
                            tube\.fede\.re|
                            pytu\.be|
                            evertron\.tv|
                            devtube\.dev-wiki\.de|
                            raptube\.antipub\.org|
                            video\.selea\.se|
                            peertube\.mygaia\.org|
                            video\.oh14\.de|
                            peertube\.livingutopia\.org|
                            peertube\.the-penguin\.de|
                            tube\.thechangebook\.org|
                            tube\.anjara\.eu|
                            pt\.pube\.tk|
                            video\.samedi\.pm|
                            mplayer\.demouliere\.eu|
                            widemus\.de|
                            peertube\.me|
                            peertube\.zapashcanon\.fr|
                            video\.latavernedejohnjohn\.fr|
                            peertube\.pcservice46\.fr|
                            peertube\.mazzonetto\.eu|
                            video\.irem\.univ-paris-diderot\.fr|
                            video\.livecchi\.cloud|
                            alttube\.fr|
                            video\.coop\.tools|
                            video\.cabane-libre\.org|
                            peertube\.openstreetmap\.fr|
                            videos\.alolise\.org|
                            irrsinn\.video|
                            video\.antopie\.org|
                            scitech\.video|
                            tube2\.nemsia\.org|
                            video\.amic37\.fr|
                            peertube\.freeforge\.eu|
                            video\.arbitrarion\.com|
                            video\.datsemultimedia\.com|
                            stoptrackingus\.tv|
                            peertube\.ricostrongxxx\.com|
                            docker\.videos\.lecygnenoir\.info|
                            peertube\.togart\.de|
                            tube\.postblue\.info|
                            videos\.domainepublic\.net|
                            peertube\.cyber-tribal\.com|
                            video\.gresille\.org|
                            peertube\.dsmouse\.net|
                            cinema\.yunohost\.support|
                            tube\.theocevaer\.fr|
                            repro\.video|
                            tube\.4aem\.com|
                            quaziinc\.com|
                            peertube\.metawurst\.space|
                            videos\.wakapo\.com|
                            video\.ploud\.fr|
                            video\.freeradical\.zone|
                            tube\.valinor\.fr|
                            refuznik\.video|
                            pt\.kircheneuenburg\.de|
                            peertube\.asrun\.eu|
                            peertube\.lagob\.fr|
                            videos\.side-ways\.net|
                            91video\.online|
                            video\.valme\.io|
                            video\.taboulisme\.com|
                            videos-libr\.es|
                            tv\.mooh\.fr|
                            nuage\.acostey\.fr|
                            video\.monsieur-a\.fr|
                            peertube\.librelois\.fr|
                            videos\.pair2jeux\.tube|
                            videos\.pueseso\.club|
                            peer\.mathdacloud\.ovh|
                            media\.assassinate-you\.net|
                            vidcommons\.org|
                            ptube\.rousset\.nom\.fr|
                            tube\.cyano\.at|
                            videos\.squat\.net|
                            video\.iphodase\.fr|
                            peertube\.makotoworkshop\.org|
                            peertube\.serveur\.slv-valbonne\.fr|
                            vault\.mle\.party|
                            hostyour\.tv|
                            videos\.hack2g2\.fr|
                            libre\.tube|
                            pire\.artisanlogiciel\.net|
                            videos\.numerique-en-commun\.fr|
                            video\.netsyms\.com|
                            video\.die-partei\.social|
                            video\.writeas\.org|
                            peertube\.swarm\.solvingmaz\.es|
                            tube\.pericoloso\.ovh|
                            watching\.cypherpunk\.observer|
                            videos\.adhocmusic\.com|
                            tube\.rfc1149\.net|
                            peertube\.librelabucm\.org|
                            videos\.numericoop\.fr|
                            peertube\.koehn\.com|
                            peertube\.anarchmusicall\.net|
                            tube\.kampftoast\.de|
                            vid\.y-y\.li|
                            peertube\.xtenz\.xyz|
                            diode\.zone|
                            tube\.egf\.mn|
                            peertube\.nomagic\.uk|
                            visionon\.tv|
                            videos\.koumoul\.com|
                            video\.rastapuls\.com|
                            video\.mantlepro\.com|
                            video\.deadsuperhero\.com|
                            peertube\.musicstudio\.pro|
                            peertube\.we-keys\.fr|
                            artitube\.artifaille\.fr|
                            peertube\.ethernia\.net|
                            tube\.midov\.pl|
                            peertube\.fr|
                            watch\.snoot\.tube|
                            peertube\.donnadieu\.fr|
                            argos\.aquilenet\.fr|
                            tube\.nemsia\.org|
                            tube\.bruniau\.net|
                            videos\.darckoune\.moe|
                            tube\.traydent\.info|
                            dev\.videos\.lecygnenoir\.info|
                            peertube\.nayya\.org|
                            peertube\.live|
                            peertube\.mofgao\.space|
                            video\.lequerrec\.eu|
                            peertube\.amicale\.net|
                            aperi\.tube|
                            tube\.ac-lyon\.fr|
                            video\.lw1\.at|
                            www\.yiny\.org|
                            videos\.pofilo\.fr|
                            tube\.lou\.lt|
                            choob\.h\.etbus\.ch|
                            tube\.hoga\.fr|
                            peertube\.heberge\.fr|
                            video\.obermui\.de|
                            videos\.cloudfrancois\.fr|
                            betamax\.video|
                            video\.typica\.us|
                            tube\.piweb\.be|
                            video\.blender\.org|
                            peertube\.cat|
                            tube\.kdy\.ch|
                            pe\.ertu\.be|
                            peertube\.social|
                            videos\.lescommuns\.org|
                            tv\.datamol\.org|
                            videonaute\.fr|
                            dialup\.express|
                            peertube\.nogafa\.org|
                            megatube\.lilomoino\.fr|
                            peertube\.tamanoir\.foucry\.net|
                            peertube\.devosi\.org|
                            peertube\.1312\.media|
                            tube\.bootlicker\.party|
                            skeptikon\.fr|
                            video\.blueline\.mg|
                            tube\.homecomputing\.fr|
                            tube\.ouahpiti\.info|
                            video\.tedomum\.net|
                            video\.g3l\.org|
                            fontube\.fr|
                            peertube\.gaialabs\.ch|
                            tube\.kher\.nl|
                            peertube\.qtg\.fr|
                            video\.migennes\.net|
                            tube\.p2p\.legal|
                            troll\.tv|
                            videos\.iut-orsay\.fr|
                            peertube\.solidev\.net|
                            videos\.cemea\.org|
                            video\.passageenseine\.fr|
                            videos\.festivalparminous\.org|
                            peertube\.touhoppai\.moe|
                            sikke\.fi|
                            peer\.hostux\.social|
                            share\.tube|
                            peertube\.walkingmountains\.fr|
                            videos\.benpro\.fr|
                            peertube\.parleur\.net|
                            peertube\.heraut\.eu|
                            tube\.aquilenet\.fr|
                            peertube\.gegeweb\.eu|
                            framatube\.org|
                            thinkerview\.video|
                            tube\.conferences-gesticulees\.net|
                            peertube\.datagueule\.tv|
                            video\.lqdn\.fr|
                            tube\.mochi\.academy|
                            media\.zat\.im|
                            video\.colibris-outilslibres\.org|
                            tube\.svnet\.fr|
                            peertube\.video|
                            peertube3\.cpy\.re|
                            peertube2\.cpy\.re|
                            videos\.tcit\.fr|
                            peertube\.cpy\.re|
                            canard\.tube
                        )'''

'''(?x)
                    (?:
                        peertube:(?P<host>[^:]+):|
                        https?://(?P<host_2>%s)/(?:videos/(?:watch|embed)|api/v\d/videos)/
                    )
                    (?P<id>%s)
                    '''
'''(?x)<iframe[^>]+\bsrc=[""\'](?P<url>(?:https?:)?//%s/videos/embed/%s)'''
"
people.py,"# coding: utf-8
"
performgroup.py,"# coding: utf-8

#/?(?P<id>[0-9a-f]{26})\.(?P<auth_token>[0-9a-z]{26})'

# http://www.faz.net/aktuell/sport/fussball/wm-2018-playoffs-schweiz-besiegt-nordirland-1-0-15286104.html

#d478c41c5d192f56b9aa859de8.1w4crrej5w14e1ed4s1ce4ykab',
"
periscope.py,"# coding: utf-8

#]+)'

# Alive example URLs can be found here https://www.periscope.tv/

#London in Emirates Air Line cable car at night 🇬🇧✈️🚠 #BoopScope 🎀💗',

# Periscope only shows videos in the last 24 hours, so it's possible to

# get 0 videos
"
philharmoniedeparis.py,"# coding: utf-8
'''(?x)
                    https?://
                        (?:
                            live\.philharmoniedeparis\.fr/(?:[Cc]oncert/|embed(?:app)?/|misc/Playlist\.ashx\?id=)|
                            pad\.philharmoniedeparis\.fr/doc/CIMU/
                        )
                        (?P<id>\d+)
                    '''
"
phoenix.py,"# coding: utf-8

#&]*-a-(?P<id>\d+)\.html'

# Same as https://www.zdf.de/politik/phoenix-sendungen/wohin-fuehrt-der-protest-in-der-pandemie-100.html

# Youtube embed

# no media

# Same as https://www.zdf.de/politik/phoenix-sendungen/die-gesten-der-maechtigen-100.html
"
photobucket.py,"# Extract URL, uploader, and title from webpage
"
picarto.py,"# coding: utf-8

#&]+)'

#vod-player[""\']\s*,\s*(\{.+?\})\s*\)', webpage,
'''{
  channel(name: ""%s"") {
    adult
    id
    online
    stream_name
    title
  }
  getLoadBalancerUrl(channel_name: ""%s"") {
    url
  }
}'''"
piksel.py,"# coding: utf-8

# Original source: http://www.uscourts.gov/cameras-courts/state-washington-vs-donald-j-trump-et-al

# https://www3.nhk.or.jp/nhkworld/en/ondemand/video/2019240/

# TODO: extract rtmp formats

# TODO: figure out if this is something to be fixed in urljoin,

# _parse_smil_formats or keep it here
'''(?x)https?://
        (?:
            (?:
                player\.
                    (?:
                        olympusattelecom|
                        vibebyvista
                    )|
                (?:api|player)\.multicastmedia|
                (?:api-ovp|player)\.piksel
            )\.com|
            (?:
                mz-edge\.stream\.co|
                movie-s\.nhk\.or
            )\.jp|
            vidego\.baltimorecity\.gov
        )/v/(?:refid/(?P<refid>[^/]+)/prefid/)?(?P<id>[\w-]+)'''
"
pinkbike.py,"# coding: utf-8
"
pinterest.py,"# coding: utf-8

#&]+)' % PinterestBaseIE._VALID_URL_BASE

# Some pins may not be available anonymously via pin URL

# video = self._extract_video(item, extract_formats=False)

# video.update({

#     '_type': 'url_transparent',

#     'url': 'https://www.pinterest.com/pin/%s/' % video_id,

# })

# entries.append(video)
"
pladform.py,"# coding: utf-8
'''(?x)
                    https?://
                        (?:
                            (?:
                                out\.pladform\.ru/player|
                                static\.pladform\.ru/player\.swf
                            )
                            \?.*\bvideoid=|
                            video\.pladform\.ru/catalog/video/videoid/
                        )
                        (?P<id>\d+)
                    '''
"
platzi.py,"# coding: utf-8

# login succeeded

# es version

# en version

#&]+

# client_data may contain ""};"" so that we have to try more

# strict regex first

# es version

# en version

#&]+)
'''(?x)
                    https?://
                        (?:
                            platzi\.com/clases|           # es version
                            courses\.platzi\.com/classes  # en version
                        )/[^/]+/(?P<id>\d+)-[^/?\#&]+
                    '''


'''(?x)
                    https?://
                        (?:
                            platzi\.com/clases|           # es version
                            courses\.platzi\.com/classes  # en version
                        )/(?P<id>[^/?\#&]+)
                    '''
"
playfm.py,"# coding: utf-8

#])'

"
playplustv.py,"# coding: utf-8
"
plays.py,"# coding: utf-8
"
playstuff.py,"#&]+)'

# geo restricted, bypassable
"
playtvak.py,"# coding: utf-8

# live video test

# requires rtmpdump

# another live stream, this one without Misc.videoFLV

# requires rtmpdump

# idnes.cz

# lidovky.cz

# metro.cz

# Some streams have mp3 audio which does not play

# well with ffmpeg filter aac_adtstoasc

# f4m manifest fails with 404 in 80% of requests

# Other formats not supported yet
"
playvid.py,"#|$)'

# most of the information is stored in the flashvars

# Extract title - should be in the flashvars; if not, look elsewhere
"
playwire.py,"# m3u8 in f4m

# m3u8 download

# Multiple resolutions while bitrates missing
"
pluralsight.py,"# Old API fallback

# available without pluralsight account

# new layout?

# Some courses also offer widescreen resolution for high quality (see

# https://github.com/ytdl-org/youtube-dl/issues/7766)

# In order to minimize the number of calls to ViewClip API and reduce

# the probability of being throttled or banned by Pluralsight we will request

# only single format until formats listing was explicitly requested.

# Still works but most likely will go soon

# Pluralsight tracks multiple sequential calls to ViewClip API and start

# to return 429 HTTP errors after some time (see

# https://github.com/ytdl-org/youtube-dl/pull/6989). Moreover it may even lead

# to account ban (see https://github.com/ytdl-org/youtube-dl/issues/6842).

# To somewhat reduce the probability of these consequences

# we will sleep random amount of time before each call to ViewClip.

# TODO: other languages?

# Free course from Pluralsight Starter Subscription for Microsoft TechNet

# https://offers.pluralsight.com/technet?loc=zTS3z&prod=zOTprodz&tech=zOttechz&prog=zOTprogz&type=zSOz&media=zOTmediaz&country=zUSz

# available without pluralsight account

# TODO: PSM cookie

'''
query BootstrapPlayer {
  rpc {
    bootstrapPlayer {
      profile {
        firstName
        lastName
        email
        username
        userHandle
        authed
        isAuthed
        plan
      }
      course(courseId: ""%s"") {
        name
        title
        courseHasCaptions
        translationLanguages {
          code
          name
        }
        supportsWideScreenVideoFormats
        timestamp
        modules {
          name
          title
          duration
          formattedDuration
          author
          authorized
          clips {
            authorized
            clipId
            duration
            formattedDuration
            id
            index
            moduleIndex
            moduleTitle
            name
            title
            watched
          }
        }
      }
    }
  }
}'''


'''
query viewClip {
  viewClip(input: {
    author: ""%(author)s"",
    clipIndex: %(clipIndex)d,
    courseName: ""%(courseName)s"",
    includeCaptions: %(includeCaptions)s,
    locale: ""%(locale)s"",
    mediaType: ""%(mediaType)s"",
    moduleName: ""%(moduleName)s"",
    quality: ""%(quality)s""
  }) {
    urls {
      url
      cdn
      rank
      source
    },
    status
  }
}'''

"
podomatic.py,"#&]+)
'''(?x)
                    (?P<proto>https?)://
                        (?:
                            (?P<channel>[^.]+)\.podomatic\.com/entry|
                            (?:www\.)?podomatic\.com/podcasts/(?P<channel_2>[^/]+)/episodes
                        )/
                        (?P<id>[^/?#&]+)
                '''

"
pokemon.py,"# coding: utf-8

#&]+))'

# no data-video-title
"
polskieradio.py,"# coding: utf-8

# with mp4 video
"
popcorntimes.py,"# coding: utf-8

#&]+)'
"
popcorntv.py,
porn91.py,"# coding: utf-8
"
porncom.py,
pornhd.py,
pornhub.py,"# coding: utf-8

# Both sites pornhub and pornhubpremium have separate accounts

# so there should be an option to provide credentials for both.

# At the same time some videos are available under the same video id

# on both sites so that we have to identify them as the same video.

# For that purpose we have to keep both in the same extractor

# but under different netrc machines.

# non-ASCII title

# subtitles

# removed at the request of cam4.com

# removed at the request of the copyright owner

# removed by uploader

# private video

# Some videos are available with the same id on both premium

# and non-premium sites (e.g. this and the following test)

# geo restricted

# video_title from flashvars contains whitespace instead of non-ASCII (see

# http://www.pornhub.com/view_video.php?viewkey=1331683002), not relying

# on that anymore.

# description provided in JSON-LD is irrelevant

# Only process container div with main playlist content skipping

# drop-down menu that uses similar pattern for videos (see

# https://github.com/ytdl-org/youtube-dl/issues/11594).

#&]+))(?:[?#&]|/(?!videos)|$)' % PornHubBaseIE._PORNHUB_HOST_RE

# Unavailable via /videos page, but available with direct pagination

# on pornstar page (see [1]), requires premium

# 1. https://github.com/ytdl-org/youtube-dl/issues/27853

# Same as before, multi page

# Some sources may not be available via /videos page,

# trying to fallback to main page pagination (see [1])

# 1. https://github.com/ytdl-org/youtube-dl/issues/27853

#&]+)' % PornHubBaseIE._PORNHUB_HOST_RE

# default sorting as Top Rated Videos

# Top Rated Videos

# Most Recent Videos

# Most Viewed Videos

# Most Viewed Videos

# Top Rated Videos

# Longest Videos

# Newest Videos
'''(?x)
                    https?://
                        (?:
                            (?:[^/]+\.)?
                            %s
                            /(?:(?:view_video\.php|video/show)\?viewkey=|embed/)|
                            (?:www\.)?thumbzilla\.com/video/
                        )
                        (?P<id>[\da-z]+)
                    '''
'''(?x)
                <li[^>]+\bclass=[""\']page_next|
                <link[^>]+\brel=[""\']next|
                <button[^>]+\bid=[""\']moreDataBtn
            '''"
pornotube.py,"#]*?)/video/(?P<id>[0-9]+)'
"
pornovoisines.py,"# coding: utf-8

# The webpage has a bug - there's no space between ""thumb"" and src=
"
pornoxo.py,"# NSFW
"
prepare_manpage.py,"# NAME


# SYNOPSIS


# DESCRIPTION)', '', readme)

# '):

# Description string may start with `-` as well. If there is

# only one piece then it's a description bit not an option.

# metavar

# Pandoc's definition_lists. See http://pandoc.org/README.html

# for more information.
'''%YOUTUBE-DL(1)

# NAME

youtube\-dl \- download videos from youtube.com or other video platforms

# SYNOPSIS

**youtube-dl** \[OPTIONS\] URL [URL...]

'''


"
presstv.py,"# coding: utf-8

# extract video URL from webpage

# build list of available formats

# specified in http://www.presstv.ir/Scripts/playback.js

# extract video metadata
"
prosiebensat1.py,"# coding: utf-8

# Tests changes introduced in https://github.com/ytdl-org/youtube-dl/pull/6242

# in response to fixing https://github.com/ytdl-org/youtube-dl/issues/6215:

# - malformed f4m manifest support

# - proper handling of URLs starting with `https?://` in 2.0 manifests

# - recursive child f4m manifests extraction

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# rtmp download

# title in <h2 class=""subtitle"">

# geo restricted to Germany

# geo restricted to Germany

# geo restricted to Germany

#404040"">(\d{2}\.\d{2}\.\d{4})</span>',
'''(?x)
                    https?://
                        (?:www\.)?
                        (?:
                            (?:beta\.)?
                            (?:
                                prosieben(?:maxx)?|sixx|sat1(?:gold)?|kabeleins(?:doku)?|the-voice-of-germany|advopedia
                            )\.(?:de|at|ch)|
                            ran\.de|fem\.com|advopedia\.de|galileo\.tv/video
                        )
                        /(?P<id>.+)
                    '''

"
puhutv.py,"# coding: utf-8

#&]+)-izle'

# film

# episode, geo restricted, bypassable with --geo-verification-proxy

# 4k, with subtitles

#&]+)-detay'

# a film detail page which is using same url with serie page

# For films, these are using same url with series
"
puls4.py,"# coding: utf-8

#&]+)'

#2min2miotalk',
"
pyvideo.py,"#&.]+)'

"
qqmusic.py,"# coding: utf-8

# Reference: m_r_GetRUin() in top_player.js

# http://imgcache.gtimg.cn/music/portal_v3/y/top_player.js
"
r7.py,"# coding: utf-8

# m3u8 format always matches the http format, let's copy metadata from

# one to another

#&]+-(?P<id>\d+)'
'''(?x)
                        https?://
                        (?:
                            (?:[a-zA-Z]+)\.r7\.com(?:/[^/]+)+/idmedia/|
                            noticias\.r7\.com(?:/[^/]+)+/[^/]+-|
                            player\.r7\.com/video/i/
                        )
                        (?P<id>[\da-f]{24})
                    '''
"
radiobremen.py,"# coding: utf-8

"
radiocanada.py,"# coding: utf-8

# m3u8 download

# empty Title

# m3u8 download

# with protectionType but not actually DRM protected

# protectionType does not necessarily mean the video is DRM protected (see

# https://github.com/ytdl-org/youtube-dl/pull/18609).

# m3u8 download
"
radiode.py,
radiofrance.py,"# coding: utf-8

#]+)'
"
radiojavan.py,
rai.py,"# coding: utf-8

# This does not imply geo restriction (e.g.

# http://www.raisport.rai.it/dl/raiSport/media/rassegna-stampa-04a9f4bd-b563-40cf-82a6-aad3529cb4a9.html)

#live_hds.f4m', 'manifest.f4m'),

# tbr: w, h

# try extracting info from available m3u8 formats

# 1080p direct mp4 url

# subtitles at 'subtitlesArray' key (see #27698)

# DRM protected

#&]+))'

#&]+))'

# var uniquename = ""ContentItem-...""

# data-id=""ContentItem-...""

# with ContentItem in many metas

# with ContentItem in og:url

# initEdizione('ContentItem-...'

# HLS live stream with ContentItem in og:url

# ContentItem in iframe (see #12652) and subtitle at 'subtitlesUrl' key

# Direct MMS URL
'''(?x)
                    (?:
                        (?:initEdizione|drawMediaRaiTV)\(|
                        <(?:[^>]+\bdata-id|var\s+uniquename)=|
                        <iframe[^>]+\bsrc=
                    )
                    ([""\'])
                    (?:(?!\1).)*\bContentItem-(?P<id>%s)
                '''
'''(?x)
                (?:
                    var\s+videoURL|
                    mediaInfo\.mediaUri
                )\s*=\s*
                ([\'""])
                (?P<url>
                    (?:https?:)?
                    //mediapolis(?:vod)?\.rai\.it/relinker/relinkerServlet\.htm\?
                    (?:(?!\1).)*\bcont=(?:(?!\1).)+)\1
            '''"
raywenderlich.py,"'''(?x)
                    https?://
                        (?:
                            videos\.raywenderlich\.com/courses|
                            (?:www\.)?raywenderlich\.com
                        )/
                        (?P<course_id>[^/]+)/lessons/(?P<id>\d+)
                    '''


'''(?x)
                    https?://
                        (?:
                            videos\.raywenderlich\.com/courses|
                            (?:www\.)?raywenderlich\.com
                        )/
                        (?P<id>[^/]+)
                    '''

"
rbmaradio.py,"#&]+)'
"
rds.py,"# coding: utf-8

# has two 9c9media ContentPackages, the web player selects the first ContentPackage
"
redbulltv.py,"# coding: utf-8

# film

# episode

# HLS manifest accessible only using assetId

#&]+)'

# only available on the int-en website so a fallback is need for the API

# https://www.redbull.com/v3/api/graphql/v1/v3/query/en-GB>en-INT?filter[uriSlug]=fia-wrc-saturday-recap-estonia&rb3Schema=v1:hero
'''... on %s {
      videoEssence {
        attributes
      }
    }'''


'''{
  resource(id: ""%s"", enforceGeoBlocking: false) {
    %s
    %s
  }
}'''"
reddit.py,"#&]+)'

# from https://www.reddit.com/r/videos/comments/6rrwyj/that_small_heart_attack/

#&]+))'

# imgur

# imgur @ old reddit

# streamable

# youtube

# reddit video @ nm reddit

# Avoid recursing into the same reddit URL
"
redtube.py,"# No self-labeling, but they describe themselves as

# ""Home of Videos Porno""
"
regiotv.py,"# coding: utf-8
"
rentv.py,"# coding: utf-8

#]+)'

# TODO: invalid m3u8

# m3u8 downloads
"
restudy.py,"# coding: utf-8

# rtmp download
"
reuters.py,"# coding: utf-8
"
reverbnation.py,
rice.py,"# coding: utf-8
"
rmcdecouverte.py,"# coding: utf-8

# live, geo restricted, bypassable
"
ro220.py,
rockstargames.py,"# coding: utf-8

#?/?\?.*\bvideo=)(?P<id>\d+)'

#/?video=48',
"
roosterteeth.py,"# coding: utf-8

#&]+)'

# only available for FIRST members
"
rottentomatoes.py,
roxwel.py,"# rtmp download
"
rozhlas.py,"# coding: utf-8
"
rtbf.py,"# coding: utf-8

# geo restricted

# Live

# Audio

# With Subtitle
'''(?x)
        https?://(?:www\.)?rtbf\.be/
        (?:
            video/[^?]+\?.*\bid=|
            ouftivi/(?:[^/]+/)*[^?]+\?.*\bvideoId=|
            auvio/[^/]+\?.*\b(?P<live>l)?id=
        )(?P<id>\d+)'''
"
rte.py,"# coding: utf-8

# NB the string values in the JSON are stored using XML escaping(!)

# Radioplayer URLs have two distinct specifier formats,

# the old format #!rii=<channel_id>:<id>:<playable_item_id>:<date>:

# the new format #!rii=b<channel_id>_<id>_<playable_item_id>_<date>_

# where the IDs are int/empty, the date is DD-MM-YYYY, and the specifier may be truncated.

# An <id> uniquely defines an individual recording, and is the only part we require.

#!rii=(?:b?[0-9]*)(?:%3A|:|%5F|_)(?P<id>[0-9]+)'


# Old-style player URL; HLS and RTMPE formats

#!rii=16:10507902:2414:27-12-2015:',

# New-style player URL; RTMPE formats only

#!rii=b16_3250678_8861_06-04-2012_',

# rtmp download
"
rtl2.py,"# coding: utf-8

#]+)'

# rtmp download

# rtmp download

#307 Hirn, wo bist du?!',
"
rtlnl.py,"# coding: utf-8

#]*\#!|programma)/[^/]+/|

#uuid=

# new URL schema

# old URL schema

#!/rtl-nieuws-132237/82b1aad1-4a14-3d7b-b554-b0aed1b2c416',

# best format available a3t

#uuid=84ae5571-ac25-4225-ae0c-ef8d9efb2aed/autoplay=false',

# empty synopsis and missing episodes (see https://github.com/ytdl-org/youtube-dl/issues/6275)

# best format available nettv

#uuid=f536aac0-1dc3-4314-920e-3bd1c5b3811a/autoplay=false',

# encrypted m3u8 streams, georestricted

#!/afl-2-257632/52a74543-c504-4cde-8aa8-ec66fe8d68a7',

#!/uuid=bb0353b0-d6a4-1dad-90e9-18fe75b8d1f0',

#!/rtl-nieuws-132237/3c487912-023b-49ac-903e-2c5d79f8410f',

# new embed URL schema

#uuid=84ae5571-ac25-4225-ae0c-ef8d9efb2aed/autoplay=false',
'''(?x)
        https?://(?:(?:www|static)\.)?
        (?:
            rtlxl\.nl/(?:[^\#]*\#!|programma)/[^/]+/|
            rtl\.nl/(?:(?:system/videoplayer/(?:[^/]+/)+(?:video_)?embed\.html|embed)\b.+?\buuid=|video/)|
            embed\.rtl\.nl/\#uuid=
        )
        (?P<id>[0-9a-f-]+)'''

"
rtmp.py,"# read line from stderr

# proc_stderr_closed is True

# no percent for live streams

# Including KeyboardInterrupt

# Check for rtmpdump first

# Download using rtmpdump. rtmpdump returns exit code 2 when

# the connection was interrupted and resuming appears to be

# possible. This is part of rtmpdump's normal usage, AFAIK.

# This seems to be needed

# Some rtmp streams seem abort after ~ 99.8%. Don't complain for those
"
rtp.py,"# coding: utf-8

#]+)/?'
"
rts.py,"# coding: utf-8

# m3u8 download

# article with videos on rhs

# media_id extracted out of URL is not always a real id

# article with videos on rhs

# check for errors
"
rtsp.py,
rtve.py,"# coding: utf-8

# CRC

"
rtvnh.py,"# coding: utf-8
"
rtvs.py,"# coding: utf-8

# radio archive

# tv archive
"
ruhd.py,"# coding: utf-8
"
rumble.py,"# coding: utf-8
"
rutube.py,"# coding: utf-8

# private video

# Query may contain private videos token and should be passed to API

# requests (see #19163)
"
rutv.py,"# coding: utf-8

# m3u8 download

# m3u8 download

# m3u8 download

# m3u8 download

# m3u8 download
'''(?x)
                    https?://
                        (?:test)?player\.(?:rutv\.ru|vgtrk\.com)/
                        (?P<path>
                            flash\d+v/container\.swf\?id=|
                            iframe/(?P<type>swf|video|live)/id/|
                            index/iframe/cast_id/
                        )
                        (?P<id>\d+)
                    '''

"
ruutu.py,"# coding: utf-8

# Episode where <SourceFile> is ""NOT-USED"", but has other

# downloadable sources available.

# audio podcast

# episode

# premium

# video-only and audio-only streams are of different

# duration resulting in out of sync issue
'''(?x)
                    https?://
                        (?:
                            (?:www\.)?(?:ruutu|supla)\.fi/(?:video|supla|audio)/|
                            static\.nelonenmedia\.fi/player/misc/embed_player\.html\?.*?\bnid=
                        )
                        (?P<id>\d+)
                    '''
"
ruv.py,"# coding: utf-8

# m3u8

# mp3
"
safari.py,"# coding: utf-8

# oreilly serves two same instances of the following cookies

# in Set-Cookie header and expects first one to be actually set

#&]+)\.html|

#&]+)

# non-digits in course id

#&]+)\.html'

'''(?x)
                        https?://
                            (?:www\.)?(?:safaribooksonline|(?:learning\.)?oreilly)\.com/
                            (?:
                                library/view/[^/]+/(?P<course_id>[^/]+)/(?P<part>[^/?\#&]+)\.html|
                                videos/[^/]+/[^/]+/(?P<reference_id>[^-]+-[^/?\#&]+)
                            )
                    '''


'''(?x)
                    https?://
                        (?:
                            (?:www\.)?(?:safaribooksonline|(?:learning\.)?oreilly)\.com/
                            (?:
                                library/view/[^/]+|
                                api/v1/book|
                                videos/[^/]+
                            )|
                            techbus\.safaribooksonline\.com
                        )
                        /(?P<id>[^/]+)
                    '''

"
samplefocus.py,"# coding: utf-8

#]+)'
"
sapo.py,"# coding: utf-8
"
savefrom.py,"# coding: utf-8

#url=(?P<url>.*)$'


#url=http://youtube.com/watch?v=UlVRAPW2WJY&utm_source=youtube.com&utm_medium=short_domains&utm_campaign=ssyoutube.com',
"
sbs.py,"# coding: utf-8

# Original URL is handled by the generic IE which finds the iframe:

# http://www.sbs.com.au/thefeed/blog/2014/08/21/dingo-conservation
"
screencast.py,"# coding: utf-8
"
screencastomatic.py,"# coding: utf-8
"
scrippsnetworks.py,"# coding: utf-8

#|
'''(?x)
                    https?://
                        watch\.
                        (?P<site>geniuskitchen)\.com/
                        (?:
                            player\.[A-Z0-9]+\.html\#|
                            show/(?:[^/]+/){2}|
                            player/
                        )
                        (?P<id>\d+)
                    '''
"
scte.py,"# already logged in
'''(?x)
                    <a[^>]+
                        href=([""\'])
                        (?P<url>
                            https?://learning\.scte\.org/mod/
                            (?P<kind>scorm|subcourse)/view\.php?(?:(?!\1).)*?
                            \bid=\d+
                        )
                    '''"
seeker.py,"# coding: utf-8
"
senateisvp.py,"# coding: utf-8

# m3u8 download

# m3u8 download

# checksum differs each time

# From http://www.c-span.org/video/?96791-1

# All parameters in the query string are necessary to prevent a 403 error

# URLs without the extra param induce an 404 error
"
sendtonews.py,"# coding: utf-8

# From http://cleveland.cbslocal.com/2016/05/16/indians-score-season-high-15-runs-in-blowout-win-over-reds-rapid-reaction/

# test the first video only to prevent lengthy tests

# m3u8 download
'''(?x)<script[^>]+src=([\'""])
            (?:https?:)?//embed\.sendtonews\.com/player/responsiveembed\.php\?
                .*\bSC=(?P<SC>[0-9a-zA-Z-]+).*
            \1>'''"
servus.py,"# coding: utf-8

# new URL schema

# old URL schema
'''(?x)
                    https?://
                        (?:www\.)?
                        (?:
                            servus\.com/(?:(?:at|de)/p/[^/]+|tv/videos)|
                            (?:servustv|pm-wissen)\.com/videos
                        )
                        /(?P<id>[aA]{2}-\w+|\d+-\d+)
                    '''
"
setup.py,"#!/usr/bin/env python

# coding: utf-8


# This will create an exe that needs Microsoft Visual C++ 2008

# Redistributable Package

# Get the version from youtube_dl/version.py without importing the package

# Provokes warning on most systems (why?!)

# test_suite = 'nose.collector',

# test_requires = ['nosetest'],

"
sevenplus.py,"# coding: utf-8

#]+))'
"
sexu.py,"# NSFW
"
seznamzpravy.py,"# coding: utf-8

# with Location key

#&]+)-(?P<id>\d+)'

# two videos on one page, with SDN URL

# video with live stream URL
"
shahid.py,"# coding: utf-8

# m3u8 download

# shahid plus subscriber only

# https://docs.aws.amazon.com/mediapackage/latest/ug/manifest-filtering.html

# video = self._call_api(

#     'product/id', video_id, {

#         'id': video_id,

#         'productType': 'ASSET',

#         'productSubType': page_type.upper()

#     })['productModel']

"
shared.py,
show-downloads-statistics.py,"#!/usr/bin/env python
"
showroomlive.py,"# coding: utf-8

#&]+)'
"
sign-versions.py,"#!/usr/bin/env python3
"
simplecast.py,"# coding: utf-8

#]+)'

#]+)'
'''(?x)<iframe[^>]+src=[""\']
                (
                    https?://(?:embed\.simplecast\.com/[0-9a-f]{8}|
                    player\.simplecast\.com/%s
                ))'''"
sina.py,"# coding: utf-8

#)(?P<video_id>\d+)|

#]+)(?:\.s?html)|

# This is used by external sites like Weibo

#250576622',

# The video id is in the redirected url
'''(?x)https?://(?:.*?\.)?video\.sina\.com\.cn/
                        (?:
                            (?:view/|.*\#)(?P<video_id>\d+)|
                            .+?/(?P<pseudo_id>[^/?#]+)(?:\.s?html)|
                            # This is used by external sites like Weibo
                            api/sinawebApi/outplay.php/(?P<token>.+?)\.swf
                        )
                  '''

"
sixplay.py,"# coding: utf-8
"
sky.py,"# coding: utf-8
"
skyit.py,"# coding: utf-8

# http://static.sky.it/static/skyplayer/conf.json

#]+)'

# m3u8 download

#]+)'

#]+)'

#]+)'
"
skylinewebcams.py,"# coding: utf-8
"
skynewsarabia.py,"# coding: utf-8

# rtmp download

# rtmp download
"
slideshare.py,
slideslive.py,"# coding: utf-8

# video_service_name = YOUTUBE

# video_service_name = yoda

# video_service_name = youtube

# video_service_name = url

# video_service_name = vimeo

# use `m3u8` entry_protocol until EXT-X-MAP is properly supported by `m3u8_native` entry_protocol
"
slutload.py,"# mobile site
"
snotr.py,"# coding: utf-8
"
socks.py,"# Public Domain SOCKS proxy protocol implementation

# Adapted from https://gist.github.com/bluec0re/cafd3764412967417fd3


# References:

# SOCKS4 protocol http://www.openssh.com/txt/socks4.protocol

# SOCKS4A protocol http://www.openssh.com/txt/socks4a.protocol

# SOCKS5 protocol https://tools.ietf.org/html/rfc1928

# SOCKS5 username/password authentication https://tools.ietf.org/html/rfc1929


# Excerpt from SOCKS4A protocol:

# if the client cannot resolve the destination host's domain name to find its

# IP address, it should set the first three bytes of DSTIP to NULL and the last

# byte to a non-zero value.

# For server response


"
sohu.py,"# coding: utf-8

# Sohu videos give different MD5 sums on Travis CI and my machine

#super',

#%d)' % retries
"
sonyliv.py,"# coding: utf-8

#&]+-(?P<id>\d+)'
"
soundcloud.py,"# coding: utf-8

# from https://www.soundi.fi/uutiset/ennakkokuuntelussa-timo-kaukolammen-station-to-station-to-station-julkaisua-juhlitaan-tanaan-g-livelabissa/

#]))

# geo-restricted

# private link

# private link (alt format)

# downloadable song

# private link, downloadable format

# no album art, use avatar pic for thumbnail

# with AAC HQ format available via OAuth token

# New API

# Per the SoundCloud documentation, the maximum limit for a linked partitioning query is 200.

# https://developers.soundcloud.com/blog/offset-pagination-deprecated

# Empty collection may be returned, in this case we proceed

# straight to next_href


#].*)?$

#&]+)'
'''(?x)^(?:https?://)?
                    (?:(?:(?:www\.|m\.)?soundcloud\.com/
                            (?!stations/track)
                            (?P<uploader>[\w\d-]+)/
                            (?!(?:tracks|albums|sets(?:/.+?)?|reposts|likes|spotlight)/?(?:$|[?#]))
                            (?P<title>[\w\d-]+)/?
                            (?P<token>[^?]+?)?(?:[?].*)?$)
                       |(?:api(?:-v2)?\.soundcloud\.com/tracks/(?P<track_id>\d+)
                          (?:/?\?secret_token=(?P<secret_token>[^&]+))?)
                    )
                    '''

'''(?x)
                        https?://
                            (?:(?:www|m)\.)?soundcloud\.com/
                            (?P<user>[^/]+)
                            (?:/
                                (?P<rsrc>tracks|albums|sets|reposts|likes|spotlight)
                            )?
                            /?(?:[?#].*)?$
                    '''
""""""Information extractor for soundcloud.com
       To access the media, the uid of the song and a stream token
       must be extracted from the page source and the script must make
       a request to media.soundcloud.com/crossdomain.xml. Then
       the media can be grabbed by requesting from an url composed
       of the stream token and uid
     """"""

"
soundgasm.py,"# coding: utf-8

#.*)?$'
"
southpark.py,"# coding: utf-8

#|$))'


#tab=featured',

#|$))'

#source=351c1323-0b96-402d-a8b9-40d01b2e9bde&position=1&sort=!airdate',

#|$))'

#tab=featured',

# non-ASCII characters in initial URL

# non-ASCII characters in redirect URL

#|$))'

#|$))'
"
spankbang.py,"#&]+

# 480p only

# no uploader

# mobile page

# 4k
'''(?x)
                    https?://
                        (?:[^/]+\.)?spankbang\.com/
                        (?:
                            (?P<id>[\da-z]+)/(?:video|play|embed)\b|
                            [\da-z]+-(?P<id_2>[\da-z]+)/playlist/[^/?#&]+
                        )
                    '''
"
spankwire.py,"# download URL pattern: */<height>P_<tbr>K_<video_id>.mp4

# download URL pattern: */mp4_<format_id>_<video_id>.mp4
'''(?x)
                    https?://
                        (?:www\.)?spankwire\.com/
                        (?:
                            [^/]+/video|
                            EmbedPlayer\.aspx/?\?.*?\bArticleId=
                        )
                        (?P<id>\d+)
                    '''
"
spiegel.py,"# coding: utf-8

#.*)?$' % _UUID_RE

#34;|[""\'])mediaId\1\s*:\s*(&#34;|[""\'])(?P<id>(?:(?!\2).)+)\2',
"
spike.py,"#&]|$)'

#&]|$)'

# m3u8 download
"
sport5.py,"# coding: utf-8
"
sportbox.py,"# coding: utf-8

# m3u8 download
"
sportdeutschland.py,"# coding: utf-8

#/&]+)'

# m3u8 download
"
spotify.py,"# coding: utf-8

#]+)'

"
spreaker.py,"# coding: utf-8

#&]+)'

#&]+)'
'''(?x)
                    https?://
                        api\.spreaker\.com/
                        (?:
                            (?:download/)?episode|
                            v2/episodes
                        )/
                        (?P<id>\d+)
                    '''
"
springboardplatform.py,"# coding: utf-8
'''(?x)
                    https?://
                        cms\.springboardplatform\.com/
                        (?:
                            (?:previews|embed_iframe)/(?P<index>\d+)/video/(?P<id>\d+)|
                            xml_feeds_advanced/index/(?P<index_2>\d+)/rss3/(?P<id_2>\d+)
                        )
                    '''
"
sprout.py,"# coding: utf-8

#]+)'

# http://nbcuunikidsprod.apps.nbcuni.com/networks/universalkids/content/videos/
"
srgssr.py,"# coding: utf-8

# 'ENDDATE': 'For legal reasons, this video was only available for a specified period of time.',

# This is needed because for audio medias the podcast url is usually

# always included, even if is only an audio segment and not the

# whole episode.

# rtmp download

# m3u8 download

# audio segment, has podcastSdUrl of the full episode
'''(?x)
                    (?:
                        https?://tp\.srgssr\.ch/p(?:/[^/]+)+\?urn=urn|
                        srgssr
                    ):
                    (?P<bu>
                        srf|rts|rsi|rtr|swi
                    ):(?:[^:]+:)?
                    (?P<type>
                        video|audio
                    ):
                    (?P<id>
                        [0-9a-f\-]{36}|\d+
                    )
                    '''

'''(?x)
                    https?://
                        (?:(?:www|play)\.)?
                        (?P<bu>srf|rts|rsi|rtr|swissinfo)\.ch/play/(?:tv|radio)/
                        (?:
                            [^/]+/(?P<type>video|audio)/[^?]+|
                            popup(?P<type_2>video|audio)player
                        )
                        \?.*?\b(?:id=|urn=urn:[^:]+:video:)(?P<id>[0-9a-f\-]{36}|\d+)
                    '''

"
srmediathek.py,"# coding: utf-8

# m3u8 download
"
stanfordoc.py,"# A specific video

# A course page

# Root page
"
steam.py,"#If the page is only for videos or for a game

# For urltype == video we sometimes get the videoID
""""""(?x)
        https?://store\.steampowered\.com/
            (agecheck/)?
            (?P<urltype>video|app)/ #If the page is only for videos or for a game
            (?P<gameID>\d+)/?
            (?P<videoID>\d*)(?P<extra>\??) # For urltype == video we sometimes get the videoID
        |
        https?://(?:www\.)?steamcommunity\.com/sharedfiles/filedetails/\?id=(?P<fileID>[0-9]+)
    """"""
"
stitcher.py,"#?&]+-)?(?P<id>\d+)'

# escaped title

#?&]+)/?(?:[?#&]|$)'
"
storyfire.py,"# coding: utf-8

# HEADRequest,

# video_url = self._request_webpage(

#    HEADRequest(video['vimeoVideoURL']), video_id).geturl()

# formats = []

# for v_url, suffix in [(video_url, '_sep'), (video_url.replace('/sep/video/', '/video/'), '')]:

#    formats.extend(self._extract_m3u8_formats(

#        v_url, video_id, 'mp4', 'm3u8_native',

#        m3u8_id='hls' + suffix, fatal=False))

#    formats.extend(self._extract_mpd_formats(

#        v_url.replace('.m3u8', '.mpd'), video_id,

#        mpd_id='dash' + suffix, fatal=False))

# self._sort_formats(formats)


# 'formats': formats,

#]+)'
"
streamable.py,"# coding: utf-8

# older video without bitrate, width/height, etc. info

# Note: Using the ajax API, as the public Streamable API doesn't seem

# to return video info like the title properly sometimes, and doesn't

# include info like the video duration

# Format IDs:

# 0 The video is being uploaded

# 1 The video is being processed

# 2 The video has at least one file ready

# 3 The video is unavailable due to an error
"
streamcloud.py,"# coding: utf-8

#?]*)\.html)?'

'''(?x)<input\s+
            type=""(?:hidden|submit)""\s+
            name=""([^""]+)""\s+
            (?:id=""[^""]+""\s+)?
            value=""([^""]*)""
            '''"
streamcz.py,"# coding: utf-8

#]+/(?P<display_id>[^?#]+)-(?P<id>[0-9]+)'
'''
                    query LoadEpisode($urlName : String){ episode(urlName: $urlName){ ...VideoDetailFragmentOnEpisode } }
                    fragment VideoDetailFragmentOnEpisode on Episode {
                        id
                        spl
                        urlName
                        name
                        perex
                        duration
                        views
                    }'''
"
streetvoice.py,"# coding: utf-8
"
stretchinternet.py,"# 'timestamp': 1575668361,

# 'upload_date': '20191206',

# TODO: parse US timezone abbreviations

# 'timestamp': event.get('dateTimeString'),
"
stv.py,"# coding: utf-8

# shortform

# episodes
"
sunporno.py,
sverigesradio.py,"# coding: utf-8
"
svt.py,"# coding: utf-8

# TODO(yan12125): handle WebVTT in m3u8 manifests

#&]+)|

#&]+)

# skip for now due to download test asserts that segment is > 10000 bytes and svt uses

# init segments that are smaller

# AssertionError: Expected test_SVTPlay_jNwpV9P.mp4 to be at least 9.77KiB, but it's only 864.00B

# geo restricted to Sweden

#]+)(?:.+?\btab=(?P<season_slug>[^&#]+))?'

#]+))'

# only programTitle
'''(?x)
                    (?:
                        (?:
                            svt:|
                            https?://(?:www\.)?svt\.se/barnkanalen/barnplay/[^/]+/
                        )
                        (?P<svt_id>[^/?#&]+)|
                        https?://(?:www\.)?(?:svtplay|oppetarkiv)\.se/(?:video|klipp|kanaler)/(?P<id>[^/?#&]+)
                        (?:.*?(?:modalId|id)=(?P<modal_id>[\da-zA-Z-]+))?
                    )
                    '''

'''{
  listablesBySlug(slugs: [""%s""]) {
    associatedContent(include: [productionPeriod, season]) {
      items {
        item {
          ... on Episode {
            videoSvtId
          }
        }
      }
      id
      name
    }
    id
    longDescription
    name
    shortDescription
  }
}'''"
swfinterp.py,"# Determine number of bits in framesize rectangle

#%x' % (self.avm_class.name, id(self))



# Parse ABC (AVM2 ByteCode)


# Define a couple convenience methods

# minor_version + major_version

# Constant pool

# kind

# name

# QName

# QNameA

# RTQName

# RTQNameA

# RTQNameL

# RTQNameLA

# Multiname

# MultinameA

# MultinameL

# MultinameLA

# namespace_idx

# Methods

# return type

# param type

# name index (always 0 for youtube)

# Options present

# val

# kind

# Param names present

# param name

# Metadata

# name

# key

# value


# Slot

# Slot id

# type_name_idx

# vkind

# Const

# Slot id

# type_name_idx

# Constant_Int

# Constant_UInt

# Ignore silently for now

# Method / Getter / Setter

# disp_id

# Class

# slot_id

# classi

# Function

# slot_id

# Metadata present

# metadata index


# Classes

# super_name idx

# Protected namespace is present

# protected_ns_idx

# iinit

# Scripts

# init

# Method bodies

# max_stack

# init_scope_depth

# max_scope_depth

# from

# to

# target

# exc_type

# var_name

# Helper functions

# label

# Spec says: ""Do nothing.""

# jump

# iftrue

# iffalse

# ifeq

# ifne

# iflt

# pushnull

# pushundefined

# pushbyte

# pushshort

# pushtrue

# pushfalse

# pushnan

# dup

# pushstring

# pushscope

# construct

# callproperty

# returnvoid

# returnvalue

# constructsuper

# Not yet implemented, just hope it works without it

# constructproperty

# We do not actually call the constructor for now;

# we just pretend it does nothing

# callpropvoid

# newarray

# findpropstrict

# findproperty

# getlex

# Assume uninitialized

# TODO warn here

# setproperty

# getlocal

# setlocal

# getproperty

# Member access

# Assume attribute access

# initproperty

# convert_

# coerce

# coerce_a

# um, yes, it's any value

# coerce_s

# decrement

# typeof

# add

# subtract

# multiply

# modulo

# bitand

# equals

# greaterequals

# increment_i

# getlocal_0

# getlocal_1

# getlocal_2

# getlocal_3

# setlocal_0

# setlocal_1

# setlocal_2

# setlocal_3
"
swrmediathek.py,"# coding: utf-8
"
syfy.py,"#]+)'

# m3u8 download
"
sztvhu.py,"# coding: utf-8
"
tagesschau.py,"# coding: utf-8

#&]+)?\.html'


# kind = mobj.group('kind').lower()

# if kind == 'video':

#     return self._extract_via_api(kind, video_id)


# JSON api does not provide some audio formats (e.g. ogg) thus

# extracting audio via webpage


#?]+?(?:-?[0-9]+)?))(?:~_?[^/#?]+?)?\.html'


# exclusive audio

# audio in article

# playlist article with collapsing sections

#10;

#10;

#10;

#10;

# Article

# Assume single video
'''(?x)
                            Video:\s*(?P<vcodec>[a-zA-Z0-9/._-]+)\s*&\#10;
                            (?P<width>[0-9]+)x(?P<height>[0-9]+)px&\#10;
                            (?P<vbr>[0-9]+)kbps&\#10;
                            Audio:\s*(?P<abr>[0-9]+)kbps,\s*(?P<audio_desc>[A-Za-z\.0-9]+)&\#10;
                            Gr&ouml;&szlig;e:\s*(?P<filesize_approx>[0-9.,]+\s+[a-zA-Z]*B)'''"
tass.py,"# coding: utf-8
"
tbs.py,"# coding: utf-8

#]+))'

# m3u8 download
"
tdslifeway.py,"# From http://www.ministrygrid.com/training-viewer/-/training/t4g-2014-conference/the-gospel-by-numbers-4/the-gospel-by-numbers

# m3u8 download
"
teachable.py,"# Only notable ones here

# Successful login

# https://academy.tailoredtutors.co.uk/courses/108779/lectures/1955313

#&]+)
'''(?x)
                    (?:
                        %shttps?://(?P<site_t>[^/]+)|
                        https?://(?:www\.)?(?P<site>%s)
                    )
                    /courses/[^/]+/lectures/(?P<id>\d+)
                    '''
'''(?x)
                        (?:
                            %shttps?://(?P<site_t>[^/]+)|
                            https?://(?:www\.)?(?P<site>%s)
                        )
                        /(?:courses|p)/(?:enrolled/)?(?P<id>[^/?#&]+)
                    '''"
teachertube.py,"# coding: utf-8

# flowplayer

# jwplayer

# unavailable video
'''(?sx)
        class=""?sidebar_thumb_time""?>[0-9:]+</div>
        \s*
        <a\s+href=""(https?://(?:www\.)?teachertube\.com/(?:video|audio)/[^""]+)""
    '''
"
teachingchannel.py,"#]+)'

"
teamcoco.py,"# coding: utf-8

#]+)'

# m3u8 downloads

# m3u8 downloads

# compat_urllib_parse.urljoin does not work here

# TODO Correct extraction for these files
'''id
        title
        teaser
        publishOn
        thumb {
          preview
        }
        tags {
          name
        }
        duration
        turnerMediaId
        turnerMediaAuthToken'''


'''{
  %%s(slug: ""%%s"") {
    ... on RecordSlug {
      record {
        %s
      }
    }
    ... on PageSlug {
      child {
        id
      }
    }
    ... on NotFoundSlug {
      status
    }
  }
}'''
'''{
  %%s(id: ""%%s"") {
    ... on Video {
      %s
    }
  }
}'''"
teamtreehouse.py,"# coding: utf-8

# Course

# WorkShop

# Video
"
techtalks.py,"# rtmp download

# The slides video
"
ted.py,"# We have a playlist

# We have a simple talk

# The url may contain the language

# Here goes the name and then "".html""

# missing HTTP bitrates

# contains a youtube video

# no nativeDownloads

# with own formats and private Youtube external
'''(?x)
        (?P<proto>https?://)
        (?P<type>www|embed(?:-ssl)?)(?P<urlmain>\.ted\.com/
        (
            (?P<type_playlist>playlists(?:/(?P<playlist_id>\d+))?) # We have a playlist
            |
            ((?P<type_talk>talks)) # We have a simple talk
            |
            (?P<type_watch>watch)/[^/]+/[^/]+
        )
        (/lang/(.*?))? # The url may contain the language
        /(?P<name>[\w-]+) # Here goes the name and then "".html""
        .*)$
        '''

'''Returns the videos of the playlist'''

"
tele13.py,"# coding: utf-8

# HTTP Error 404: Not Found
"
tele5.py,"# coding: utf-8

#&]+)'

# jwplatform, nexx unavailable
"
telebruxelles.py,"# coding: utf-8

#?]+)'

# live stream

# Yes, they have a typo in scheme name for live stream URLs (e.g.

# https://bx1.be/lives/direct-tv/)
"
telecinco.py,"# coding: utf-8

#DOYLACARA. Con la trata no hay trato',

# video in opening's content

# ooyala video
"
telegraaf.py,"# coding: utf-8

# m3u8 download
'''{
  article(uid: %s) {
    videos {
      videoId
    }
  }
}'''"
telemb.py,"# coding: utf-8

# non-ASCII characters in download URL
"
telequebec.py,"# coding: utf-8

# available till 01.01.2023

# no description

#&]+)
'''(?x)
                    https?://
                        (?:
                            zonevideo\.telequebec\.tv/media|
                            coucou\.telequebec\.tv/videos
                        )/(?P<id>\d+)
                    '''

'''(?x)
                    https?://
                        (?:
                            [^/]+\.telequebec\.tv/emissions/|
                            (?:www\.)?telequebec\.tv/
                        )
                        (?P<id>[^?#&]+)
                    '''
"
teletask.py,
telewebion.py,"# coding: utf-8

#!/episode/(?P<id>\d+)'


#!/episode/1263668/',

# m3u8 download
"
tennistv.py,"# coding: utf-8
"
tenplay.py,"# coding: utf-8

# smuggle_url,

# 'format': 'bestvideo',

# BRIGHTCOVE_URL_TEMPLATE = 'https://players.brightcove.net/2199827728001/cN6vRtRQt_default/index.html?videoId=%s'

# brightcove_url = smuggle_url(

#     self.BRIGHTCOVE_URL_TEMPLATE % brightcove_id,

#     {'geo_countries': ['AU']})

# '_type': 'url_transparent',

# 'url': brightcove_url,

# 'ie_key': 'BrightcoveNew',
"
testurl.py,"# Do not list

# Is it obvious which one to pick?
"""""" Allows addressing of the test cases as test:yout.*be_1 """"""

"
test_aes.py,"#!/usr/bin/env python


# Allow direct execution

# the encrypted data can be generate with 'devscripts/generate_aes_testdata.py'


"
test_age_restriction.py,"#!/usr/bin/env python

# Allow direct execution
"""""" Returns true if the file has been downloaded """"""

"
test_all_urls.py,"#!/usr/bin/env python


# Allow direct execution

# 585

# 668

# Top tracks

# 668

#!/photo.php?v=10153317450565268'))

#!/photo.php?v=10152183998945793'))


# https://github.com/ytdl-org/youtube-dl/issues/1930

# https://github.com/ytdl-org/youtube-dl/issues/2350
"
test_cache.py,"#!/usr/bin/env python

# coding: utf-8


# Allow direct execution
"
test_compat.py,"#!/usr/bin/env python

# coding: utf-8


# Allow direct execution

# don't bother to test str.casefold() (again)

# thanks https://bugs.python.org/file24232/casefolding.patch
'''<meta property=""og:description"" content=""%E2%96%81%E2%96%82%E2%96%83%E2%96%84%25%E2%96%85%E2%96%86%E2%96%87%E2%96%88"" />
%<a href=""https://ar.wikipedia.org/wiki/%D8%AA%D8%B3%D9%88%D9%86%D8%A7%D9%85%D9%8A"">%a'''
'''<meta property=""og:description"" content=""▁▂▃▄%▅▆▇█"" />
%<a href=""https://ar.wikipedia.org/wiki/تسونامي"">%a'''
'''%28%5E%E2%97%A3_%E2%97%A2%5E%29%E3%81%A3%EF%B8%BB%E3%83%87%E2%95%90%E4%B8%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%86%B6%I%Break%25Things%'''
'''(^◣_◢^)っ︻デ═一    ⇀    ⇀    ⇀    ⇀    ⇀    ↶%I%Break%Things%'''
'''
            <root foo=""bar"" spam=""中文"">
                <normal>foo</normal>
                <chinese>中文</chinese>
                <foo><bar>spam</bar></foo>
            </root>
        '''

'''<?xml version=""1.0""?>
<!DOCTYPE smil PUBLIC ""-//W3C//DTD SMIL 2.0//EN"" ""http://www.w3.org/2001/SMIL20/SMIL20.dtd"">
<smil xmlns=""http://www.w3.org/2001/SMIL20/Language""></smil>'''
"
test_download.py,"#!/usr/bin/env python


# Allow direct execution

# Don't accept warnings during tests

# Parallel testing in nosetests. See

# http://nose.readthedocs.org/en/latest/doc_tests/test_multiprocess/multiprocess.html

# Dynamically generate tests



# We're not using .download here since that is just a shim

# for outside error handling, and returns the exit code

# instead of the result dict.

# Check if the exception is not a network related one

##########\n\n'.format(try_num))


# Generalize both playlists and single videos to unified format for

# simplicity

# First, check test cases' data against extracted data alone

# Now, check downloaded file consistency

# Finally, check test cases' data again but this time against

# extracted data from info JSON file written during processing

# Remove all other files that may have been extracted if the

# extractor returns full results even with extract_flat

# And add them to TestDownload
""""""Identify each test with the `add_ie` attribute, if available.""""""


""""""From 2.7's unittest; 2.6 had _strclass so we can't import it.""""""
"
test_downloader_http.py,"#!/usr/bin/env python

# coding: utf-8

# Allow direct execution

#' * size)

"
test_execution.py,"#!/usr/bin/env python

# coding: utf-8


# Python 2.6 doesn't support package execution
"
test_http.py,"#!/usr/bin/env python

# coding: utf-8

# Allow direct execution

# XXX: Python 3 http server does not allow non-ASCII header values

# XXX: Python 3 http server does not allow non-ASCII header values

# No certificate checking anyways

# b'xn--fiq228c' is '中文'.encode('idna')
"
test_InfoExtractor.py,"#!/usr/bin/env python


# Allow direct execution

# https://github.com/ytdl-org/youtube-dl/issues/23306

# inline video tag

# from https://www.r18.com/

# with kpbs in label

# from https://www.csfd.cz/

# with width and height

# from https://tamasha.com/v/Kkdjw

# with height in label

# from https://www.directvnow.com

# with data-src

# from https://www.directvnow.com

# with data-src

# from https://www.klarna.com/uk/

# with data-video-src

# from http://www.suffolk.edu/sjc/

# from https://www.pornoxo.com/videos/7564/striptease-from-sexy-secretary/

# from http://www.indiedb.com/games/king-machine/videos

# https://github.com/ytdl-org/youtube-dl/issues/11507

# http://pluzz.francetv.fr/videos/le_ministere.html

# https://github.com/ytdl-org/youtube-dl/issues/11995

# http://teamcoco.com/video/clueless-gamer-super-bowl-for-honor

# https://github.com/ytdl-org/youtube-dl/issues/12211

# http://video.toggle.sg/en/series/whoopie-s-world/ep3/478601

# http://www.twitch.tv/riotgames/v/6528877

# http://www.vidio.com/watch/165683-dj_ambred-booyah-live-2015

# EXT-X-STREAM-INF tag with NAME attribute that is not defined

# in HLS specification

# https://github.com/ytdl-org/youtube-dl/issues/18923

# https://www.ted.com/talks/boris_hesser_a_grassroots_healthcare_revolution_in_africa

# https://github.com/ytdl-org/youtube-dl/issues/13919

# Also tests duplicate representation ids, see

# https://github.com/ytdl-org/youtube-dl/issues/15111

# mpd_url

# mpd_base_url

# https://github.com/ytdl-org/youtube-dl/pull/14844

# mpd_url

# mpd_base_url

# https://github.com/ytdl-org/youtube-dl/issues/20346

# Media considered unfragmented even though it contains

# Initialization tag

# mpd_url

# mpd_base_url

# https://github.com/ytdl-org/youtube-dl/issues/14660

# Checks for mitigations against the effects of

# <https://bugs.python.org/issue15002> that affect Python 3.4.1+, which

# manifest as `_download_webpage`, `_download_xml`, `_download_json`,

# or the underlying `_download_webpage_handle` returning no content

# when a response matches `expected_status`.

'''
            <meta name=""og:title"" content='Foo'/>
            <meta content=""Some video's description "" name=""og:description""/>
            <meta property='og:image' content='http://domain.com/pic.jpg?key1=val1&amp;key2=val2'/>
            <meta content='application/x-shockwave-flash' property='og:video:type'>
            <meta content='Foo' property=og:foobar>
            <meta name=""og:test1"" content='foo > < bar'/>
            <meta name=""og:test2"" content=""foo >//< bar""/>
            <meta property=og-test3 content='Ill-formatted opengraph'/>
            '''

'''
            <meta name=""a"" content=""1"" />
            <meta name='b' content='2'>
            <meta name=""c"" content='3'>
            <meta name=d content='4'>
            <meta property=""e"" content='5' >
            <meta content=""6"" name=""f"">
        '''


'''<script type=""application/ld+json"">
{
""@context"": ""http://schema.org/"",
""@type"": ""VideoObject"",
""name"": ""1 On 1 With Kleio"",
""url"": ""https://www.eporner.com/hd-porn/xN49A1cT3eB/1-On-1-With-Kleio/"",
""duration"": ""PT0H12M23S"",
""thumbnailUrl"": [""https://static-eu-cdn.eporner.com/thumbs/static4/7/78/780/780814/9_360.jpg"", ""https://imggen.eporner.com/780814/1920/1080/9.jpg""],
""contentUrl"": ""https://gvideo.eporner.com/xN49A1cT3eB/xN49A1cT3eB.mp4"",
""embedUrl"": ""https://www.eporner.com/embed/xN49A1cT3eB/1-On-1-With-Kleio/"",
""image"": ""https://static-eu-cdn.eporner.com/thumbs/static4/7/78/780/780814/9_360.jpg"",
""width"": ""1920"",
""height"": ""1080"",
""encodingFormat"": ""mp4"",
""bitrate"": ""6617kbps"",
""isFamilyFriendly"": ""False"",
""description"": ""Kleio Valentien"",
""uploadDate"": ""2015-12-05T21:24:35+01:00"",
""interactionStatistic"": {
""@type"": ""InteractionCounter"",
""interactionType"": { ""@type"": ""http://schema.org/WatchAction"" },
""userInteractionCount"": 1120958
}, ""aggregateRating"": {
""@type"": ""AggregateRating"",
""ratingValue"": ""88"",
""ratingCount"": ""630"",
""bestRating"": ""100"",
""worstRating"": ""0""
}, ""actor"": [{
""@type"": ""Person"",
""name"": ""Kleio Valentien"",
""url"": ""https://www.eporner.com/pornstar/kleio-valentien/""
}]}
</script>'''
'''
                <video id=""samplevideo_amateur"" class=""js-samplevideo video-js vjs-default-skin vjs-big-play-centered"" controls preload=""auto"" width=""400"" height=""225"" poster=""//pics.r18.com/digital/amateur/mgmr105/mgmr105jp.jpg"">
                    <source id=""video_source"" src=""https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_sm_w.mp4"" type=""video/mp4""  res=""240"" label=""300kbps"">
                    <source id=""video_source"" src=""https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dm_w.mp4"" type=""video/mp4""  res=""480"" label=""1000kbps"">
                    <source id=""video_source"" src=""https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dmb_w.mp4"" type=""video/mp4""  res=""740"" label=""1500kbps"">
                    <p>Your browser does not support the video tag.</p>
                </video>
                '''
'''
                <video width=""770"" height=""328"" preload=""none"" controls  poster=""https://img.csfd.cz/files/images/film/video/preview/163/344/163344118_748d20.png?h360"" >
                    <source src=""https://video.csfd.cz/files/videos/157/750/157750813/163327358_eac647.mp4"" type=""video/mp4"" width=""640"" height=""360"">
                    <source src=""https://video.csfd.cz/files/videos/157/750/157750813/163327360_3d2646.mp4"" type=""video/mp4"" width=""1280"" height=""720"">
                    <source src=""https://video.csfd.cz/files/videos/157/750/157750813/163327356_91f258.mp4"" type=""video/mp4"" width=""1920"" height=""1080"">
                    <source src=""https://video.csfd.cz/files/videos/157/750/157750813/163327359_962b4a.webm"" type=""video/webm"" width=""640"" height=""360"">
                    <source src=""https://video.csfd.cz/files/videos/157/750/157750813/163327361_6feee0.webm"" type=""video/webm"" width=""1280"" height=""720"">
                    <source src=""https://video.csfd.cz/files/videos/157/750/157750813/163327357_8ab472.webm"" type=""video/webm"" width=""1920"" height=""1080"">
                    <track src=""https://video.csfd.cz/files/subtitles/163/344/163344115_4c388b.srt"" type=""text/x-srt"" kind=""subtitles"" srclang=""cs"" label=""cs"">
                </video>
                '''
'''
                <video crossorigin=""anonymous"">
                        <source src=""https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4"" type=""video/mp4"" label=""AUTO"" res=""0""/>
                                <source src=""https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4"" type=""video/mp4""
                                        label=""240p"" res=""240""/>
                                <source src=""https://s-v2.tamasha.com/statics/videos_file/20/00/Kkdjw_200041c66f657fc967db464d156eafbc1ed9fe6f_n_144.mp4"" type=""video/mp4""
                                        label=""144p"" res=""144""/>
                </video>
                '''
'''
                <video id=""vid1"" class=""header--video-masked active"" muted playsinline>
                    <source data-src=""https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4"" type=""video/mp4"" />
                </video>
                '''
'''
                <video id=""vid1"" class=""header--video-masked active"" muted playsinline>
                    <source data-src=""https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4"" type=""video/mp4"" />
                </video>
                '''
'''
                <video loop autoplay muted class=""responsive-video block-kl__video video-on-medium"">
                    <source src="""" data-video-desktop data-video-src=""https://www.klarna.com/uk/wp-content/uploads/sites/11/2019/01/KL062_Smooth3_0_DogWalking_5s_920x080_.mp4"" type=""video/mp4"" />
                </video>
                '''
'''
                <script type='text/javascript'>
                    jwplayer('my-video').setup({
                        file: 'rtmp://192.138.214.154/live/sjclive',
                        fallback: 'true',
                        width: '95%',
                      aspectratio: '16:9',
                      primary: 'flash',
                      mediaid:'XEgvuql4'
                    });
                </script>
                '''
'''
<script type=""text/javascript"">
    jwplayer(""mediaplayer"").setup({
        'videoid': ""7564"",
        'width': ""100%"",
        'aspectratio': ""16:9"",
        'stretching': ""exactfit"",
        'autostart': 'false',
        'flashplayer': ""https://t04.vipstreamservice.com/jwplayer/v5.10/player.swf"",
        'file': ""https://cdn.pornoxo.com/key=MF+oEbaxqTKb50P-w9G3nA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/4b2157147afe5efa93ce1978e0265289c193874e02597.flv"",
        'image': ""https://t03.vipstreamservice.com/thumbs/pxo-full/2009-12/14/a4b2157147afe5efa93ce1978e0265289c193874e02597.flv-full-13.jpg"",
        'filefallback': ""https://cdn.pornoxo.com/key=9ZPsTR5EvPLQrBaak2MUGA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/m_4b2157147afe5efa93ce1978e0265289c193874e02597.mp4"",
        'logo.hide': true,
        'skin': ""https://t04.vipstreamservice.com/jwplayer/skin/modieus-blk.zip"",
        'plugins': ""https://t04.vipstreamservice.com/jwplayer/dock/dockableskinnableplugin.swf"",
        'dockableskinnableplugin.piclink': ""/index.php?key=ajax-videothumbsn&vid=7564&data=2009-12--14--4b2157147afe5efa93ce1978e0265289c193874e02597.flv--17370"",
        'controlbar': 'bottom',
        'modes': [
            {type: 'flash', src: 'https://t04.vipstreamservice.com/jwplayer/v5.10/player.swf'}
        ],
        'provider': 'http'
    });
    //noinspection JSAnnotator
    invideo.setup({
        adsUrl: ""/banner-iframe/?zoneId=32"",
        adsUrl2: """",
        autostart: false
    });
</script>
            '''
'''
<script>
jwplayer(""mediaplayer"").setup({""abouttext"":""Visit Indie DB"",""aboutlink"":""http:\/\/www.indiedb.com\/"",""displaytitle"":false,""autostart"":false,""repeat"":false,""title"":""king machine trailer 1"",""sharing"":{""link"":""http:\/\/www.indiedb.com\/games\/king-machine\/videos\/king-machine-trailer-1"",""code"":""<iframe width=\""560\"" height=\""315\"" src=\""http:\/\/www.indiedb.com\/media\/iframe\/1522983\"" frameborder=\""0\"" allowfullscreen><\/iframe><br><a href=\""http:\/\/www.indiedb.com\/games\/king-machine\/videos\/king-machine-trailer-1\"">king machine trailer 1 - Indie DB<\/a>""},""related"":{""file"":""http:\/\/rss.indiedb.com\/media\/recommended\/1522983\/feed\/rss.xml"",""dimensions"":""160x120"",""onclick"":""link""},""sources"":[{""file"":""http:\/\/cdn.dbolical.com\/cache\/videos\/games\/1\/50\/49678\/encode_mp4\/king-machine-trailer.mp4"",""label"":""360p SD"",""default"":""true""},{""file"":""http:\/\/cdn.dbolical.com\/cache\/videos\/games\/1\/50\/49678\/encode720p_mp4\/king-machine-trailer.mp4"",""label"":""720p HD""}],""image"":""http:\/\/media.indiedb.com\/cache\/images\/games\/1\/50\/49678\/thumb_620x2000\/king-machine-trailer.mp4.jpg"",""advertising"":{""client"":""vast"",""tag"":""http:\/\/ads.intergi.com\/adrawdata\/3.0\/5205\/4251742\/0\/1013\/ADTECH;cors=yes;width=560;height=315;referring_url=http:\/\/www.indiedb.com\/games\/king-machine\/videos\/king-machine-trailer-1;content_url=http:\/\/www.indiedb.com\/games\/king-machine\/videos\/king-machine-trailer-1;media_id=1522983;title=king+machine+trailer+1;device=__DEVICE__;model=__MODEL__;os=Windows+OS;osversion=__OSVERSION__;ua=__UA__;ip=109.171.17.81;uniqueid=1522983;tags=__TAGS__;number=58cac25928151;time=1489683033""},""width"":620,""height"":349}).once(""play"", function(event) {
            videoAnalytics(""play"");
}).once(""complete"", function(event) {
    videoAnalytics(""completed"");
});
</script>
                '''"
test_iqiyi_sdk_interpreter.py,"#!/usr/bin/env python


# Allow direct execution
'''
        Test the functionality of IqiyiSDKInterpreter by trying to log in

        If `sign` is incorrect, /validate call throws an HTTP 556 error
        '''
"
test_jsinterp.py,"#!/usr/bin/env python


# Allow direct execution

# function x() { a=0; for (i=0; i-10; i++) {a++} a }
'''
        function x() {
            var x = /* 1 + */ 2;
            var y = /* 30
            * 40 */ 50;
            return x + y;
        }
        '''
'''
        function f() {
            var x = ""/*"";
            var y = 1 /* comment */ + 2;
            return y;
        }
        '''
'''
        function x() {
            var a = [10, 20, 30, 40, 50];
            var b = 6;
            a[0]=a[b%a.length];
            return a;
        }'''
'''
        function x() { return NaN }
        '''
'''
        function x() { return new Date('Wednesday 31 December 1969 18:01:26 MDT') - 0; }
        '''
'''
        function x(dt) { return new Date(dt) - 0; }
        '''
'''
        function x() { return 2; }
        function y(a) { return x() + (a?a:0); }
        function z() { return y(3); }
        '''
'''
        function x() { a=0; for (i=0; i-10; i++) {a++} return a }
        '''
'''
        function x(f) { switch(f){
            case 1:f+=1;
            case 2:f+=2;
            case 3:f+=3;break;
            case 4:f+=4;
            default:f=0;
        } return f }
        '''
'''
        function x(f) { switch(f){
            case 2: f+=2;
            default: f-=1;
            case 5:
            case 6: f+=6;
            case 0: break;
            case 1: f+=1;
        } return f }
        '''
'''
        function x() { try{return 10} catch(e){return 5} }
        '''
'''
        function x() { try{throw 10} catch(e){return 5} }
        '''
'''
        function x() { try{throw 10} finally {return 42} }
        '''
'''
        function x() { try{throw 10} catch(e){return 5} finally {return 42} }
        '''
'''
        function x() {try {
            try{throw 10} finally {throw 42}
            } catch(e){return 5} }
        '''
'''
        function x() { a=0; for (i=0; i-10; i++) { continue; a++ } return a }
        '''
'''
        function x() { a=0; for (i=0; i-10; i++) { break; a++ } return a }
        '''
'''
        function x() {
            for (i=0; i-10; i++) { try { if (i == 5) throw i} catch {return 10} finally {break} };
            return 42 }
        '''
'''
        function x() { return [1, 2, ""asdf"", [5, 6, 7]][3] }
        '''
'''
        function x() { a=5; a -= 1, a+=3; return a }
        '''
'''
        function x() { a=5; return (a -= 1, a+=3, a); }
        '''
'''
        function x() { return (l=[0,1,2,3], function(a, b){return a+b})((l[1], l[2]), l[3]) }
        '''
'''
        function x() { return void 42; }
        '''
'''
        function x() { return [1, function(){return 1}][1] }
        '''
'''
        function x() { return null; }
        '''
'''
        function x() { return [null > 0, null < 0, null == 0, null === 0]; }
        '''
'''
        function x() { return [null >= 0, null <= 0]; }
        '''
'''
        function x() { return undefined === undefined; }
        '''
'''
        function x() { return undefined; }
        '''
'''
        function x() { let v; return v; }
        '''
'''
        function x() { return [undefined === undefined, undefined == undefined, undefined < undefined, undefined > undefined]; }
        '''
'''
        function x() { return [undefined === 0, undefined == 0, undefined < 0, undefined > 0]; }
        '''
'''
        function x() { return [undefined >= 0, undefined <= 0]; }
        '''
'''
        function x() { return [undefined > null, undefined < null, undefined == null, undefined === null]; }
        '''
'''
        function x() { return [undefined === null, undefined == null, undefined < null, undefined > null]; }
        '''
'''
        function x() { let v; return [42+v, v+42, v**42, 42**v, 0**v]; }
        '''
'''
        function x() { let v; return v**0; }
        '''
'''
        function x() { let v; return [v>42, v<=42, v&&42, 42&&v]; }
        '''
'''
        function x() { return {}; }
        '''
'''
        function x() { let a = {m1: 42, m2: 0 }; return [a[""m1""], a.m2]; }
        '''
'''
        function x() { let a; return a?.qq; }
        '''
'''
        function x() { let a = {m1: 42, m2: 0 }; return a?.qq; }
        '''
'''
        function x() { let a=/,,[/,913,/](,)}/; }
        '''
'''
        function x() { let a=/,,[/,913,/](,)}/; return a; }
        '''
'''
        function x() { let a=/,,[/,913,/](,)}/i; return a; }
        '''"
test_netrc.py,"# coding: utf-8
"
test_options.py,"# coding: utf-8


# Allow direct execution
"
test_postprocessors.py,"#!/usr/bin/env python


# Allow direct execution
"
test_socks.py,"#!/usr/bin/env python

# coding: utf-8

# Allow direct execution
"
test_subtitles.py,"#!/usr/bin/env python

# Allow direct execution

# Available subtitles for QRS8MkLhQmM:

# Language formats

# ru       vtt, ttml, srv3, srv2, srv1, json3

# fr       vtt, ttml, srv3, srv2, srv1, json3

# en       vtt, ttml, srv3, srv2, srv1, json3

# nl       vtt, ttml, srv3, srv2, srv1, json3

# de       vtt, ttml, srv3, srv2, srv1, json3

# ko       vtt, ttml, srv3, srv2, srv1, json3

# it       vtt, ttml, srv3, srv2, srv1, json3

# zh-Hant  vtt, ttml, srv3, srv2, srv1, json3

# hi       vtt, ttml, srv3, srv2, srv1, json3

# pt-BR    vtt, ttml, srv3, srv2, srv1, json3

# es-MX    vtt, ttml, srv3, srv2, srv1, json3

# ja       vtt, ttml, srv3, srv2, srv1, json3

# pl       vtt, ttml, srv3, srv2, srv1, json3

# Available automatic captions for 8YoUxe5ncPo:

# Language formats (all in vtt, ttml, srv3, srv2, srv1, json3)

# gu, zh-Hans, zh-Hant, gd, ga, gl, lb, la, lo, tt, tr,

# lv, lt, tk, th, tg, te, fil, haw, yi, ceb, yo, de, da,

# el, eo, en, eu, et, es, ru, rw, ro, bn, be, bg, uk, jv,

# bs, ja, or, xh, co, ca, cy, cs, ps, pt, pa, vi, pl, hy,

# hr, ht, hu, hmn, hi, ha, mg, uz, ml, mn, mi, mk, ur,

# mt, ms, mr, ug, ta, my, af, sw, is, am,

#                                         *it*, iw, sv, ar,

# su, zu, az, id, ig, nl, no, ne, ny, fr, ku, fy, fa, fi,

# ka, kk, sr, sq, ko, kn, km, st, sk, si, so, sn, sm, sl,

# ky, sd

# ...

# This video has a subtitles track, which can be translated (#4555)

# Available automatic captions for 8YoUxe5ncPo:

# ...

# 8YoUxe5ncPo has no subtitles

# from http://www.3playmedia.com/services-features/tools/integrations/theplatform/

# (see http://theplatform.com/about/partners/type/subtitles-closed-captioning/)
"
test_swfinterp.py,"#!/usr/bin/env python

# Allow direct execution

# Recompile
"
test_unicode_literals.py,"# Allow direct execution

# http://bugs.python.org/issue13943

# If we remove the directory from dirnames os.walk won't

# recurse into it

#.*?|\s*)\n)*from __future__ import (?:[a-z_]+,\s*)*unicode_literals',
"
test_update.py,"#!/usr/bin/env python


# Allow direct execution
"
test_utils.py,"#!/usr/bin/env python

# coding: utf-8


# Allow direct execution

# Various small unit tests

# yt-dlp shim

# No empty filename


#'

# Handle a common case more neatly

# .. but make sure the file name is never empty

#def')

#######')

##\\abc\\def')


#c\\de#f')

#\\00001-Not bad, Especially for Free! (1987 Yamaha 700)-20141116.mp4.part')

#')

#\\def')

#\\def..#')


# keep the list ordered

#x2F;'), '/')

#47;'), '/')

#2013266066;'), '&#2013266066;')

# HTML5 entities

#a'

# Python 3 has no long

#x=y'), 'baz')

#1234;&#x1abC;'), '&#1234;&#x1abC;')

#&#'), '&amp;#&amp;#')


# More after this line\r

#[]""

#абв'),

#%D0%B0%D0%B1%D0%B2'

#at=0'), 'http://vimeo.com/56015672#at=0')


# Ignore JavaScript code as well

# Just drop ! prefix for now though this results in a wrong value

#121;"">'), {'x': 'y'})

#x79;"">'), {'x': 'y'})

# XML

# HTML 3.2

# HTML 4.0

# Names lowercased

#769;"">'), {'x': 'décompose\u0301'})

# ""Narrow"" Python builds don't support unicode code points outside BMP.

#128512;!"">'), {'x': 'Smile \U0001f600!'})

# Malformed HTML should not break attributes extraction on older Python

# avconv style


# unrestricted content

# unrestricted policy

# UTF-8 with BOM

# UTF-16-LE

# UTF-16-BE

# UTF-32-BE

# UTF-32-LE

#parameter"">

#parameter"">

#parameter"" ttp:timeBase=""media"" xmlns:tts=""http://www.w3.org/2006/10/ttaf1#style"" xml:lang=""en"" xmlns:ttm=""http://www.w3.org/2006/10/ttaf1#metadata"">

#parameter"">

# Test base functionality

# Test Ellipsis behavior

# Test function as key

# Test alternative paths

# Test branch and path nesting

# Test dictionary as key

# Testing default parameter behavior

# Testing expected_type behavior

# Test get_all behavior

# Test casesense behavior

# FULLWIDTH LATIN CAPITAL LETTER K

# FULLWIDTH LATIN SMALL LETTER K

# Test traverse_string behavior

# Test is_user_input behavior

# Test re.Match as input obj
'''<root>
            <node/>
            <node x=""a""/>
            <node x=""a"" y=""c"" />
            <node x=""b"" y=""d"" />
            <node x="""" />
        </root>'''

'''<root xmlns:media=""http://example.com/"">
            <media:song>
                <media:author>The Author</media:author>
                <url>http://server.com/download.mp3</url>
            </media:song>
        </root>'''

'''<root>
            <div>
                <p>Foo</p>
            </div>
        </root>'''

'''<root>
            <div>
                <p x=""a"">Foo</p>
            </div>
        </root>'''

'''ffmpeg -i ""ñ€ß'.mp4""'''
'''\xef\xbb\xbf foo
            bar\r
            baz
            # More after this line\r
            ; or after this
            bam'''
'''{
            'clip':{'provider':'pseudo'}
        }'''

'''{
            ""clip"":{""provider"":""pseudo""}
        }'''
'''{
            'playlist':[{'controls':{'all':null}}]
        }'''

'''{
            ""playlist"":[{""controls"":{""all"":null}}]
        }'''
'''""The CW\\'s \\'Crazy Ex-Girlfriend\\'""'''

'''""The CW's 'Crazy Ex-Girlfriend'""'''
'''{
            0:{src:'skipped', type: 'application/dash+xml'},
            1:{src:'skipped', type: 'application/vnd.apple.mpegURL'},
        }'''

'''{
            ""0"":{""src"":""skipped"", ""type"": ""application/dash+xml""},
            ""1"":{""src"":""skipped"", ""type"": ""application/vnd.apple.mpegURL""}
        }'''
'''{""foo"":101}'''

'''{""foo"":101}'''
'''{""duration"": ""00:01:07""}'''

'''{""duration"": ""00:01:07""}'''
'''{segments: [{""offset"":-3.885780586188048e-16,""duration"":39.75000000000001}]}'''

'''{""segments"": [{""offset"":-3.885780586188048e-16,""duration"":39.75000000000001}]}'''
'''{
            ""x"": 1,
            y: ""a"",
            z: some.code
        }'''
'''{
            a: !0,
            b: !1,
            c: !!0,
            d: !!42.42,
            e: !!![],
            f: !""abc"",
            g: !"""",
            !42: 42
        }'''
'''ffmpeg version 1.2.1
built on May 27 2013 08:37:26 with gcc 4.7 (Debian 4.7.3-4)
configuration: --prefix=/usr --extra-'''
'''ffmpeg version N-63176-g1fb4685
built on May 15 2014 22:09:06 with gcc 4.8.2 (GCC)'''
'''X server found. dri2 connection failed!
Trying to open render node...
Success at /dev/dri/renderD128.
ffmpeg version 2.4.4 Copyright (c) 2000-2014 the FFmpeg ...'''
'''<?xml version=""1.0"" encoding=""UTF-8""?>
            <tt xmlns=""http://www.w3.org/ns/ttml"" xml:lang=""en"" xmlns:tts=""http://www.w3.org/ns/ttml#parameter"">
            <body>
                <div xml:lang=""en"">
                    <p begin=""0"" end=""1"">The following line contains Chinese characters and special symbols</p>
                    <p begin=""1"" end=""2"">第二行<br/>♪♪</p>
                    <p begin=""2"" dur=""1""><span>Third<br/>Line</span></p>
                    <p begin=""3"" end=""-1"">Lines with invalid timestamps are ignored</p>
                    <p begin=""-1"" end=""-1"">Ignore, two</p>
                    <p begin=""3"" dur=""-1"">Ignored, three</p>
                </div>
            </body>
            </tt>'''
'''1
00:00:00,000 --> 00:00:01,000
The following line contains Chinese characters and special symbols

2
00:00:01,000 --> 00:00:02,000
第二行
♪♪

3
00:00:02,000 --> 00:00:03,000
Third
Line

'''

'''<?xml version=""1.0"" encoding=""UTF-8""?>
            <tt xml:lang=""en"" xmlns:tts=""http://www.w3.org/ns/ttml#parameter"">
            <body>
                <div xml:lang=""en"">
                    <p begin=""0"" end=""1"">The first line</p>
                </div>
            </body>
            </tt>'''
'''1
00:00:00,000 --> 00:00:01,000
The first line

'''

'''<?xml version=""1.0"" encoding=""utf-8""?>
<tt xmlns=""http://www.w3.org/2006/10/ttaf1"" xmlns:ttp=""http://www.w3.org/2006/10/ttaf1#parameter"" ttp:timeBase=""media"" xmlns:tts=""http://www.w3.org/2006/10/ttaf1#style"" xml:lang=""en"" xmlns:ttm=""http://www.w3.org/2006/10/ttaf1#metadata"">
  <head>
    <styling>
      <style id=""s2"" style=""s0"" tts:color=""cyan"" tts:fontWeight=""bold"" />
      <style id=""s1"" style=""s0"" tts:color=""yellow"" tts:fontStyle=""italic"" />
      <style id=""s3"" style=""s0"" tts:color=""lime"" tts:textDecoration=""underline"" />
      <style id=""s0"" tts:backgroundColor=""black"" tts:fontStyle=""normal"" tts:fontSize=""16"" tts:fontFamily=""sansSerif"" tts:color=""white"" />
    </styling>
  </head>
  <body tts:textAlign=""center"" style=""s0"">
    <div>
      <p begin=""00:00:02.08"" id=""p0"" end=""00:00:05.84"">default style<span tts:color=""red"">custom style</span></p>
      <p style=""s2"" begin=""00:00:02.08"" id=""p0"" end=""00:00:05.84""><span tts:color=""lime"">part 1<br /></span><span tts:color=""cyan"">part 2</span></p>
      <p style=""s3"" begin=""00:00:05.84"" id=""p1"" end=""00:00:09.56"">line 3<br />part 3</p>
      <p style=""s1"" tts:textDecoration=""underline"" begin=""00:00:09.56"" id=""p2"" end=""00:00:12.36""><span style=""s2"" tts:color=""lime"">inner<br /> </span>style</p>
    </div>
  </body>
</tt>'''
'''1
00:00:02,080 --> 00:00:05,839
<font color=""white"" face=""sansSerif"" size=""16"">default style<font color=""red"">custom style</font></font>

2
00:00:02,080 --> 00:00:05,839
<b><font color=""cyan"" face=""sansSerif"" size=""16""><font color=""lime"">part 1
</font>part 2</font></b>

3
00:00:05,839 --> 00:00:09,560
<u><font color=""lime"">line 3
part 3</font></u>

4
00:00:09,560 --> 00:00:12,359
<i><u><font color=""yellow""><font color=""lime"">inner
 </font>style</font></u></i>

'''

'''<?xml version=""1.0"" encoding=""UTF-16""?>
            <tt xmlns=""http://www.w3.org/ns/ttml"" xml:lang=""en"" xmlns:tts=""http://www.w3.org/ns/ttml#parameter"">
            <body>
                <div xml:lang=""en"">
                    <p begin=""0"" end=""1"">Line 1</p>
                    <p begin=""1"" end=""2"">第二行</p>
                </div>
            </body>
            </tt>'''
'''1
00:00:00,000 --> 00:00:01,000
Line 1

2
00:00:01,000 --> 00:00:02,000
第二行

'''

'''
            <span class=""foo bar"">nice</span>
        '''


'''
            <span class=""foo bar"">nice</span>
        '''


'''
            <div itemprop=""author"" itemscope>foo</div>
        '''


'''
            <span class=""foo bar"">nice</span><span class=""foo bar"">also nice</span>
        '''


'''
            <span class=""foo bar"">nice</span><span class=""foo bar"">also nice</span>
        '''

""""""ffmpeg -i 'ñ€ß'""'""'.mp4'"""""""
test_verbose_output.py,"#!/usr/bin/env python

# coding: utf-8

"
test_write_annotations.py,"#!/usr/bin/env python

# coding: utf-8

# Allow direct execution

# Clear old files

# Two annotations could have the same text.

# Not all the annotations have TEXT children and the annotations are returned unsorted.

# assertIn only added in python 2.7

# remove the first occurrence, there could be more than one annotation with the same text

# We should have seen (and removed) all the expected annotation texts.
"
test_YoutubeDL.py,"#!/usr/bin/env python

# coding: utf-8


# Allow direct execution

# Same resolution => download webm

# Different resolution => download best quality (mp4)

# No prefer_free_formats => prefer mp4 and flv for greater compatibility

# equals (=)

# does not equal (!=)

# starts with (^=)

# does not start with (!^=)

# ends with ($=)

# does not end with (!$=)

# contains (*=)

# does not contain (!*=)

# Apple HTTP Live Streaming

# 3D

# Dash video

# Dash audio

# XXX: In real cases InfoExtractor._parse_mpd_formats() fills up 'acodec'

# and 'vcodec', while in tests such information is incomplete since

# commit a6c2c24479e5f4827ceb06f64d855329c0a6f593

# test_YoutubeDL.test_youtube_format_selection is broken without

# this fix

# For extractors with incomplete formats (all formats are audio-only or

# video-only) best and worst should fallback to corresponding best/worst

# video-only or audio-only formats (as per

# https://github.com/ytdl-org/youtube-dl/pull/5556)

# This must fail since complete video-audio format does not match filter

# and extractor does not provide incomplete only formats (i.e. only

# video-only or audio-only).

# See https://github.com/ytdl-org/youtube-dl/issues/10083

# Replace missing fields with 'NA' by default

# Or by provided placeholder

# make a deep copy because the dictionary and nested entries

# can be modified

# Tests for https://github.com/ytdl-org/youtube-dl/issues/10591

# @{

# @}


# see https://github.com/ytdl-org/youtube-dl/issues/8227

# Test case for https://github.com/ytdl-org/youtube-dl/issues/27064
""""""Test addition of missing upload/release/_date from /release_/timestamp""""""
"
test_YoutubeDLCookieJar.py,"#!/usr/bin/env python

# coding: utf-8


# Cookies should be empty since all malformed cookie file entries

# will be ignored
"
test_youtube_lists.py,"#!/usr/bin/env python

# -*- coding: utf-8 -*-

# Allow direct execution
""""""Make sure the info has '_type' set to 'playlist'""""""
"
test_youtube_misc.py,"#!/usr/bin/env python

# Allow direct execution
"
test_youtube_signature.py,"#!/usr/bin/env python


# Allow direct execution

#""!ZYX0VUTSRQPONMLKJIHGFEDCBA\\yxwvutsrqponmlkjihgfedcba987654321',

#$%&\'()*+,-./:;<=>?@',

#""hZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjiagfedcb39876',

#$%&\'()*+,-./:;<=',

#$%&\'()*+,@./:;<=>'

#$%&\'()*+,-./:;<=F'

# obsolete
"
tf1.py,"# coding: utf-8

#]+)\.html'

# Sometimes wat serves the whole file with the --test option
"
tfo.py,"# coding: utf-8
"
theintercept.py,"# coding: utf-8

#]+)'

#ThisIsACoup – Episode Four: Surrender or Die',
"
theplatform.py,"# coding: utf-8

# the parameters are from syfy.com, other sites may use others,

# they also work for nbc.com

# from http://www.metacafe.com/watch/cb-e9I_cZgTgIPd/blackberrys_big_bold_z30/

# rtmp download

# from http://www.cnet.com/videos/tesla-model-s-a-second-step-towards-a-cleaner-motoring-future/

# rtmp download

# From http://www.nbc.com/the-blacklist/video/sir-crispin-crandall/2928790?onid=137781#vc137781=1

# geo-restricted (US), HLS encrypted with AES-128

# Are whitespaces ignored in URLs?

# https://github.com/ytdl-org/youtube-dl/issues/12044

# feed id usually locates in the last script.

# Seems there's no pattern for the interested script filename, so

# I try one by one

# Explicitly specified SMIL (see https://github.com/ytdl-org/youtube-dl/issues/7385)

#&]+/)+[^/?#&]+)', smil_url, 'path')

# From http://player.theplatform.com/p/7wvmTC/MSNBCEmbeddedOffSite?guid=n_hardball_5biden_140207
'''(?x)
        (?:https?://(?:link|player)\.theplatform\.com/[sp]/(?P<provider_id>[^/]+)/
           (?:(?:(?:[^/]+/)+select/)?(?P<media>media/(?:guid/\d+/)?)?|(?P<config>(?:[^/\?]+/(?:swf|config)|onsite)/select/))?
         |theplatform:)(?P<id>[^/\?&]+)'''


'''(?x)
                    <meta\s+
                        property=([""'])(?:og:video(?::(?:secure_)?url)?|twitter:player)\1\s+
                        content=([""'])(?P<url>https?://player\.theplatform\.com/p/.+?)\2
            '''"
thescene.py,"#?]+)'

"
thestar.py,"# coding: utf-8

# m3u8 download
"
thesun.py,
theweatherchannel.py,"# coding: utf-8

#]+))'
"
thisamericanlife.py,
thisav.py,"# coding: utf-8

# jwplayer

# html5 media
"
thisoldhouse.py,"# coding: utf-8

#]+)'

# iframe www.thisoldhouse.com
"
thisvid.py,"# coding: utf-8

# look for more metadata

# id must be non-empty, uploader could be ''

# member list page

#)(?:(?!\1).)+)''',

# in case a member page should have pagination-next with empty link, not just `else:`

# playlist page

# rework title returned as `the title - the title`
'''video_alt_url\s*:\s+'(%s/)','''
'''(?s)<span\b[^>]*>Added by:\s*</span><a\b[^>]+\bclass\s*=\s*[""']author\b[^>]+\bhref\s*=\s*[""']https://thisvid\.com/members/([0-9]+/.{3,}?)\s*</a>'''
'''/[""'][^>]*>\s*'''
'''<a\b[^>]+\bhref\s*=\s*[""'](?P<url>%s\b)[^>]+>'''
'''<a\b[^>]+\bhref\s*=\s*(""|')(?P<url>(?!#)(?:(?!\1).)+)'''
'''<a\b[^>]+\bhref\s*=\s*[""'](?P<url>%s\b)[^>]+>'''"
threeqsdn.py,"# https://player.3qsdn.com/demo.html

# live video stream

# m3u8 downloads

# live audio stream

# live audio stream with some 404 URLs

# geo restricted with 'This content is not available in your country'

# geo restricted with 'playout.3qsdn.com/forbidden'

# live video with rtmp link

# ondemand from http://www.philharmonie.tv/veranstaltung/26/

# live video stream
"
tiktok.py,"# coding: utf-8

#bowsette#mario#cosplay#uk#lgbt#gaming#asian#bowsettecosplay',

# Setup session (will set necessary cookies)

#&]+)'
"
tinypic.py,"#.UtqZmbRFCM8',
"
tmz.py,"# coding: utf-8

#&]+)'

#&]+)'
"
tnaflix.py,"# May be overridden in descendants if necessary

#', compat_str(i)), 'http:'),

# Any URL modification now results in HTTP Error 403: Forbidden

# anonymous uploader, no categories

# non-anonymous uploader, categories

# normal, multi-format video

# quirky single-format case where the extension is given as fid, but the video is really an flv
"
toggle.py,"# coding: utf-8

# this also tests correct video id extraction

# if geo-restricted, m3u8 is inaccessible, but mp4 is okay

# Apple FairPlay Streaming

# Most likely because geo-blocked

#&]+-(?P<id>[0-9]+)'
"
tonline.py,"# coding: utf-8
"
toongoggles.py,"# coding: utf-8
"
toutv.py,"# coding: utf-8

# m3u8 download

# IsDrm does not necessarily mean the video is DRM protected (see

# https://github.com/ytdl-org/youtube-dl/issues/13994).
"
toypics.py,"# coding: utf-8

#&]+)'
"
traileraddict.py,"# Presence of (no)watchplus function indicates HD quality is available
"
trilulilu.py,"# coding: utf-8

#\?]+)'

# TODO: get correct ext for audio files
"
trovo.py,"# coding: utf-8

#]+)'


#]+)'
'''{
  getLiveInfo(params: {userName: ""%s""}) {
    isLive
    programInfo	{
      coverUrl
      id
      streamInfo {
        desc
        playUrl
      }
      title
    }
    streamerInfo {
        nickName
        uid
        userName
    }
  }
}'''
'''{
  batchGetVodDetailInfo(params: {vids: [""%s""]}) {
    VodDetailInfos
  }
}'''
'''{
  getCommentList(params: {appInfo: {postID: ""%s""}, pageSize: 1000000000, preview: {}}) {
    commentList {
      author {
        nickName
        uid
      }
      commentID
      content
      createdAt
      parentID
    }
  }
}'''"
trunews.py,"#&]+)'
"
trutv.py,"# coding: utf-8

# m3u8 download
"
tube8.py,
tubitv.py,"# coding: utf-8
"
tudou.py,"# coding: utf-8

"
tumblr.py,"# coding: utf-8

#&]+)\.tumblr\.com/(?:post|video)/(?P<id>[0-9]+)(?:$|[/?#])'

#VSFashionShow #ThisOrThat',

# Successful login

#safe_mode',

# The only place where you can get a title, it's not complete,

# but searching in other places doesn't work for all videos
"
tunein.py,"# coding: utf-8

# live stream

# live stream

# Do not list

# test redirection

# live stream

# The server doesn't support HEAD requests
"
tunepk.py,"# 1 ft Ethan Hawke, Sally Hawkins',
'''(?x)
                    https?://
                        (?:
                            (?:www\.)?tune\.pk/(?:video/|player/embed_player.php?.*?\bvid=)|
                            embed\.tune\.pk/play/
                        )
                        (?P<id>\d+)
                    '''
"
turbo.py,"# coding: utf-8
"
turner.py,"# coding: utf-8

# rtmp_src = xpath_text(video_data, 'akamai/src')

# if rtmp_src:

#     split_rtmp_src = rtmp_src.split(',')

#     if len(split_rtmp_src) == 2:

#         rtmp_src = split_rtmp_src[1]

# aifp = xpath_text(video_data, 'akamai/aifp', default='')


# Possible formats locations: files/file, files/groupFiles/files

# and maybe others

# TODO Correct extraction for these files

# protected_path_data = path_data.get('protected')

# if not protected_path_data or not rtmp_src:

#     continue

# protected_path = self._search_regex(

#     r'/mp4:(.+)\.[a-z0-9]', video_url, 'secure path')

# auth = self._download_webpage(

#     protected_path_data['tokenizer_src'], query={

#         'path': protected_path,

#         'videoId': content_id,

#         'aifp': aifp,

#     })

# token = xpath_text(auth, 'token')

# if not token:

#     continue

# video_url = rtmp_src + video_url + '?' + token

# nba.cdn.turner.com, ht.cdn.turner.com, ht2.cdn.turner.com

# ht3.cdn.turner.com, i.cdn.turner.com, s.cdn.turner.com

# ssl.cdn.turner.com
"
tv2.py,"# coding: utf-8

# Old embed pattern (looks unused nowadays)

# New embed pattern

#!/)?jakso/(?:\d+/[^/]+/)?|video/prog)(?P<id>\d+)'

# m3u8 download

#!/jakso/33001005/studio55-fi/658521/jukka-kuoppamaki-tekee-yha-lauluja-vaikka-lentokoneessa',

#!/jakso/1311159',

# m3u8 download

# multiple Youtube embeds
"
tv2dk.py,"# coding: utf-8

#&]+)

#player',

#6 - Højhuse i København',

#player',

#player',

# TODO: generalize flowplayer
'''(?x)
                    https?://
                        (?:www\.)?
                        (?:
                            tvsyd|
                            tv2ostjylland|
                            tvmidtvest|
                            tv2fyn|
                            tv2east|
                            tv2lorry|
                            tv2nord
                        )\.dk/
                        (:[^/]+/)*
                        (?P<id>[^/?\#&]+)
                    '''
"
tv2hu.py,"# encoding: utf-8

#]+?\.html'
"
tv4.py,"# coding: utf-8

# 'subtitles': subtitles,
'''(?x)https?://(?:www\.)?
        (?:
            tv4\.se/(?:[^/]+)/klipp/(?:.*)-|
            tv4play\.se/
            (?:
                (?:program|barn)/(?:(?:[^/]+/){1,2}|(?:[^\?]+)\?video_id=)|
                iframe/video/|
                film/|
                sport/|
            )
        )(?P<id>[0-9]+)'''
"
tv5mondeplus.py,"# coding: utf-8

#]+)'

# movie

# series episode
"
tv5unis.py,"# coding: utf-8

#&]|$)'
'''{
  %s(%s) {
    collection {
      title
    }
    episodeNumber
    rating {
      name
    }
    seasonNumber
    tags
    title
    videoElement {
      ... on Video {
        mediaId
      }
    }
  }
}'''"
tva.py,"# coding: utf-8

# m3u8 download

# reference_id also works with old account_id(5481942443001)

# BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/5813221784001/default_default/index.html?videoId=ref:%s'


# 'url': self.BRIGHTCOVE_URL_TEMPLATE % entity['referenceId'],

# 'ie_key': 'BrightcoveNew',
"
tvanouvelles.py,"# coding: utf-8

#&]+)'
"
tvc.py,"# coding: utf-8

#]+)'

#',
"
tver.py,"# coding: utf-8

# videos are only available for 7 days

# subtitle = ' '
"
tvigle.py,"# coding: utf-8
"
tvland.py,"# coding: utf-8

#.]+)'

# Geo-restricted. Without a proxy metadata are still there. With a

# proxy it redirects to http://m.tvland.com/app/

#|A First Look at Younger Season 6',
"
tvn24.py,"# coding: utf-8

# different layout
"
tvnet.py,"# coding: utf-8

# video

# audio

# live stream

# radio live stream

# better support for radio streams
"
tvnoe.py,"# coding: utf-8
"
tvnow.py,"# coding: utf-8

#&]+)

# rtl2

# rtlnitro

# superrtl

# ntv

# vox

# rtlplus

# Rewrite new URLs to the old format and use extraction via old API

# at api.tvnow.de as a loophole for bypassing premium content checks

# episode with annual navigation

# rtl2, episode with season navigation

# rtlnitro

# superrtl

# ntv

# vox

#&]+-(?P<show_id>\d+)

# annual navigationType

# season navigationType
'''(?x)
                    https?://
                        (?:www\.)?tvnow\.(?:de|at|ch)/(?P<station>[^/]+)/
                        (?P<show_id>[^/]+)/
                        (?!(?:list|jahr)(?:/|$))(?P<id>[^/?\#&]+)
                    '''


'''(?x)
                    (?P<base_url>https?://
                        (?:www\.)?tvnow\.(?:de|at|ch)/
                        (?:shows|serien))/
                        (?P<show>[^/]+)-\d+/
                        [^/]+/
                        episode-\d+-(?P<episode>[^/?$&]+)-(?P<id>\d+)
                    '''


'''(?x)
                    https?://
                        (?:www\.)?tvnow\.(?:de|at|ch)/
                        (?:shows|serien)/[^/]+/
                        (?:[^/]+/)+
                        (?P<display_id>[^/?$&]+)-(?P<id>\d+)
                    '''


'''(?x)
                    (?P<base_url>
                        https?://
                            (?:www\.)?tvnow\.(?:de|at|ch)/(?:shows|serien)/
                            [^/?#&]+-(?P<show_id>\d+)
                    )
                    '''

""""""
TODO: new apigw.tvnow.de based version of TVNowIE. Replace old TVNowIE with it
when api.tvnow.de is shut down. This version can't bypass premium checks though.
class TVNowIE(TVNowNewBaseIE):
    _VALID_URL = r'''(?x)
                    https?://
                        (?:www\.)?tvnow\.(?:de|at|ch)/
                        (?:shows|serien)/[^/]+/
                        (?:[^/]+/)+
                        (?P<display_id>[^/?$&]+)-(?P<id>\d+)
                    '''

    _TESTS = [{
        # episode with annual navigation
        'url': 'https://www.tvnow.de/shows/grip-das-motormagazin-1669/2017-05/episode-405-der-neue-porsche-911-gt-3-331082',
        'info_dict': {
            'id': '331082',
            'display_id': 'grip-das-motormagazin/der-neue-porsche-911-gt-3',
            'ext': 'mp4',
            'title': 'Der neue Porsche 911 GT 3',
            'description': 'md5:6143220c661f9b0aae73b245e5d898bb',
            'thumbnail': r're:^https?://.*\.jpg$',
            'timestamp': 1495994400,
            'upload_date': '20170528',
            'duration': 5283,
            'series': 'GRIP - Das Motormagazin',
            'season_number': 14,
            'episode_number': 405,
            'episode': 'Der neue Porsche 911 GT 3',
        },
    }, {
        # rtl2, episode with season navigation
        'url': 'https://www.tvnow.de/shows/armes-deutschland-11471/staffel-3/episode-14-bernd-steht-seit-der-trennung-von-seiner-frau-allein-da-526124',
        'only_matching': True,
    }, {
        # rtlnitro
        'url': 'https://www.tvnow.de/serien/alarm-fuer-cobra-11-die-autobahnpolizei-1815/staffel-13/episode-5-auf-eigene-faust-pilot-366822',
        'only_matching': True,
    }, {
        # superrtl
        'url': 'https://www.tvnow.de/shows/die-lustigsten-schlamassel-der-welt-1221/staffel-2/episode-14-u-a-ketchup-effekt-364120',
        'only_matching': True,
    }, {
        # ntv
        'url': 'https://www.tvnow.de/shows/startup-news-10674/staffel-2/episode-39-goetter-in-weiss-387630',
        'only_matching': True,
    }, {
        # vox
        'url': 'https://www.tvnow.de/shows/auto-mobil-174/2017-11/episode-46-neues-vom-automobilmarkt-2017-11-19-17-00-00-380072',
        'only_matching': True,
    }, {
        'url': 'https://www.tvnow.de/shows/grip-das-motormagazin-1669/2017-05/episode-405-der-neue-porsche-911-gt-3-331082',
        'only_matching': True,
    }]

    def _extract_video(self, info, url, display_id):
        config = info['config']
        source = config['source']

        video_id = compat_str(info.get('id') or source['videoId'])
        title = source['title'].strip()

        paths = []
        for manifest_url in (info.get('manifest') or {}).values():
            if not manifest_url:
                continue
            manifest_url = update_url_query(manifest_url, {'filter': ''})
            path = self._search_regex(r'https?://[^/]+/(.+?)\.ism/', manifest_url, 'path')
            if path in paths:
                continue
            paths.append(path)

            def url_repl(proto, suffix):
                return re.sub(
                    r'(?:hls|dash|hss)([.-])', proto + r'\1', re.sub(
                        r'\.ism/(?:[^.]*\.(?:m3u8|mpd)|[Mm]anifest)',
                        '.ism/' + suffix, manifest_url))

            formats = self._extract_mpd_formats(
                url_repl('dash', '.mpd'), video_id,
                mpd_id='dash', fatal=False)
            formats.extend(self._extract_ism_formats(
                url_repl('hss', 'Manifest'),
                video_id, ism_id='mss', fatal=False))
            formats.extend(self._extract_m3u8_formats(
                url_repl('hls', '.m3u8'), video_id, 'mp4',
                'm3u8_native', m3u8_id='hls', fatal=False))
            if formats:
                break
        else:
            if try_get(info, lambda x: x['rights']['isDrm']):
                raise ExtractorError(
                    'Video %s is DRM protected' % video_id, expected=True)
            if try_get(config, lambda x: x['boards']['geoBlocking']['block']):
                raise self.raise_geo_restricted()
            if not info.get('free', True):
                raise ExtractorError(
                    'Video %s is not available for free' % video_id, expected=True)
        self._sort_formats(formats)

        description = source.get('description')
        thumbnail = url_or_none(source.get('poster'))
        timestamp = unified_timestamp(source.get('previewStart'))
        duration = parse_duration(source.get('length'))

        series = source.get('format')
        season_number = int_or_none(self._search_regex(
            r'staffel-(\d+)', url, 'season number', default=None))
        episode_number = int_or_none(self._search_regex(
            r'episode-(\d+)', url, 'episode number', default=None))

        return {
            'id': video_id,
            'display_id': display_id,
            'title': title,
            'description': description,
            'thumbnail': thumbnail,
            'timestamp': timestamp,
            'duration': duration,
            'series': series,
            'season_number': season_number,
            'episode_number': episode_number,
            'episode': title,
            'formats': formats,
        }

    def _real_extract(self, url):
        display_id, video_id = re.match(self._VALID_URL, url).groups()
        info = self._call_api('player/' + video_id, video_id)
        return self._extract_video(info, video_id, display_id)
""""""


"
tvp.py,"# coding: utf-8

# page id is not the same as video id(#7799)

# not available

# TODO: <Group> found instead of <AdaptationSet> in MPD manifest.

# It's not mentioned in MPEG-DASH standard. Figure that out.

# formats.extend(self._extract_mpd_formats(

#     video_url_base + '.ism/video.mpd',

#     video_id, mpd_id='dash', fatal=False))

# series

# film
"
tvplay.py,"# coding: utf-8

# rtmp download

# rtmp download

# rtmp download

# views is null

# TODO: webvtt in m3u8

#&]+)

# with relatedClips

# Different og:image URL schema

#&]+-(?P<id>\d+)'
'''(?x)
                    (?:
                        mtg:|
                        https?://
                            (?:www\.)?
                            (?:
                                tvplay(?:\.skaties)?\.lv(?:/parraides)?|
                                (?:tv3play|play\.tv3)\.lt(?:/programos)?|
                                tv3play(?:\.tv3)?\.ee/sisu|
                                (?:tv(?:3|6|8|10)play|viafree)\.se/program|
                                (?:(?:tv3play|viasat4play|tv6play|viafree)\.no|(?:tv3play|viafree)\.dk)/programmer|
                                play\.nova(?:tv)?\.bg/programi
                            )
                            /(?:[^/]+/)+
                        )
                        (?P<id>\d+)
                    '''

'''(?x)
                    https?://
                        (?:www\.)?
                        viafree\.(?P<country>dk|no|se)
                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)
                    '''
"
tvplayer.py,"# coding: utf-8

#]+)'

# m3u8 download
"
tweakers.py,
twentyfourvideo.py,"# coding: utf-8

#tab-comments""[^>]*>(\d+) комментари',

# Sets some cookies
'''(?x)
                    https?://
                        (?P<host>
                            (?:(?:www|porno?)\.)?24video\.
                            (?:net|me|xxx|sexy?|tube|adult|site|vip)
                        )/
                        (?:
                            video/(?:(?:view|xml)/)?|
                            player/new24_play\.swf\?id=
                        )
                        (?P<id>\d+)
                    '''

"
twentymin.py,"# coding: utf-8
'''(?x)
                    https?://
                        (?:www\.)?20min\.ch/
                        (?:
                            videotv/*\?.*?\bvid=|
                            videoplayer/videoplayer\.html\?.*?\bvideoId@
                        )
                        (?P<id>\d+)
                    '''
"
twentythreevideo.py,
twitcasting.py,"# coding: utf-8

#2357609',

#3689740',

# use `m3u8` entry_protocol until EXT-X-MAP is properly supported by `m3u8_native` entry_protocol
"
twitch.py,"# coding: utf-8

# Some TOR nodes and public proxies are blocked completely

# Successful login

# TODO: Add mechanism to request an SMS or phone call

# m3u8 download

# Untitled broadcast (title is None)

# m3u8 download

# id backward compatibility for download archives

# All Videos sorted by Date

# All Videos sorted by Popular

# Past Broadcasts sorted by Date

# Highlights sorted by Date

# Uploads sorted by Date

# Past Premieres sorted by Date

# Clips

# NB: values other than 20 result in skipped videos

# Collections

#?]+)

# m3u8 download

#profile-0',

#&]+)

# multiple formats
'''{
              %s(
                %s: ""%s"",
                params: {
                  platform: ""web"",
                  playerBackend: ""mediaplayer"",
                  playerType: ""site""
                }
              )
              {
                value
                signature
              }
            }'''
'''(?x)
                    https?://
                        (?:
                            (?:(?:www|go|m)\.)?twitch\.tv/(?:[^/]+/v(?:ideo)?|videos)/|
                            player\.twitch\.tv/\?.*?\bvideo=v?
                        )
                        (?P<id>\d+)
                    '''


'''(?x)
                    https?://
                        (?:
                            (?:(?:www|go|m)\.)?twitch\.tv/|
                            player\.twitch\.tv/\?.*?\bchannel=
                        )
                        (?P<id>[^/#?]+)
                    '''


'''(?x)
                    https?://
                        (?:
                            clips\.twitch\.tv/(?:embed\?.*?\bclip=|(?:[^/]+/)*)|
                            (?:(?:www|go|m)\.)?twitch\.tv/[^/]+/clip/
                        )
                        (?P<id>[^/?#&]+)
                    '''


'''{
  clip(slug: ""%s"") {
    broadcaster {
      displayName
    }
    createdAt
    curator {
      displayName
      id
    }
    durationSeconds
    id
    tiny: thumbnailURL(width: 86, height: 45)
    small: thumbnailURL(width: 260, height: 147)
    medium: thumbnailURL(width: 480, height: 272)
    title
    videoQualities {
      frameRate
      quality
      sourceURL
    }
    viewCount
  }
}'''"
twitter.py,"# coding: utf-8

# MD5 checksums are different in different places

#PlutoFlyby video."",

#PlutoFlyby video. https://t.co/BJYgOjSeGA"",

#TV spot for #StarWars: #TheForceAwakens.',

#TV spot for #StarWars: #TheForceAwakens. https://t.co/OkSqT2fjWJ',

# The same video as https://twitter.com/i/videos/tweet/705235433198714880

# Test case of TwitterCardIE

#Damndaniel',

#Damndaniel https://t.co/byBooq2ejZ',

#japanese #バカ #ドクペ #電動ガン',

# has mp4 formats via mobile API

#Maria Le centre se trouve actuellement au sud de Basse-Terre. Restez confinés. Réfugiez-vous dans la pièce la + sûre.',

#Maria Le centre se trouve actuellement au sud de Basse-Terre. Restez confinés. Réfugiez-vous dans la pièce la + sûre. https://t.co/mwx01Rs4lo',

# requires ffmpeg

# card via api.twitter.com/1.1/videos/tweet/config

# requires ffmpeg

# not available in Periscope

#EduTECH2019',

# unified card

# Twitch Clip Embed

# promo_video_website card

# promo_video_convo card

# appplayer card

# video_direct_message card

# poll2choice_video card

# poll3choice_video card

# poll4choice_video card

# strip  'https -_t.co_BJYgOjSeGA' junk from filenames

# amplify, promo_video_website, promo_video_convo, appplayer,

# video_direct_message, poll2choice_video, poll3choice_video,

# poll4choice_video, ...

# untitled Periscope video
"
udemy.py,"#]+\#/lecture/|

#/lecture/172757',

# new URL schema

# no url in outputs format entry

# only outputs rendition

#/lecture/172757',

#%s: %s' % (error.get('code'), error.get('message'))

# already logged in

# Error could possibly mean we are not enrolled in the course

# Some videos contain additional metadata (e.g.

# https://www.udemy.com/ios9-swift/learn/#/lecture/3383208)

# react rendition since 2017.04.15 (see

# https://github.com/ytdl-org/youtube-dl/issues/12744)

#&]+)'
'''(?x)
                    https?://
                        (?:[^/]+\.)?udemy\.com/
                        (?:
                            [^#]+\#/lecture/|
                            lecture/view/?\?lectureId=|
                            [^/]+/learn/v4/t/lecture/
                        )
                        (?P<id>\d+)
                    '''
"
udn.py,"# coding: utf-8

# m3u8 download

# From https://video.udn.com/news/303776

# video_type may be 'mp4', which confuses YoutubeDL
"
ufctv.py,"# coding: utf-8
"
uktvplay.py,"# coding: utf-8

# m3u8 download

# BRIGHTCOVE_URL_TEMPLATE = 'https://players.brightcove.net/1242911124001/OrCyvJ2gyL_default/index.html?videoId=%s'
"
umg.py,"# coding: utf-8

#]+-(?P<id>\d+)'
'''{
  universalMusic(channel:16) {
    video(id:%s) {
      headline
      formats {
        formatId
        url
        type
        width
        height
        mimeType
        fileSize
      }
      duration
      createdDate
    }
  }
}'''"
unistra.py,
unity.py,"#&]+)'
"
uol.py,"# coding: utf-8

# https://api.mais.uol.com.br/apiuol/v4/player/data/[MEDIA_ID]
"
update-copyright.py,"#!/usr/bin/env python

# coding: utf-8


# For Python 2 compatibility
"
update-feed.py,"#!/usr/bin/env python3
""""""\
    <?xml version=""1.0"" encoding=""utf-8""?>
    <feed xmlns=""http://www.w3.org/2005/Atom"">
        <link rel=""self"" href=""http://ytdl-org.github.io/youtube-dl/update/releases.atom"" />
        <title>youtube-dl releases</title>
        <id>https://yt-dl.org/feed/youtube-dl-updates-feed</id>
        <updated>@TIMESTAMP@</updated>
        @ENTRIES@
    </feed>""""""
""""""
    <entry>
        <id>https://yt-dl.org/feed/youtube-dl-updates-feed/youtube-dl-@VERSION@</id>
        <title>New version @VERSION@</title>
        <link href=""http://ytdl-org.github.io/youtube-dl"" />
        <content type=""xhtml"">
            <div xmlns=""http://www.w3.org/1999/xhtml"">
                Downloads available at <a href=""https://yt-dl.org/downloads/@VERSION@/"">https://yt-dl.org/downloads/@VERSION@/</a>
            </div>
        </content>
        <author>
            <name>The youtube-dl maintainers</name>
        </author>
        <updated>@TIMESTAMP@</updated>
    </entry>
    """""""
update-sites.py,"#!/usr/bin/env python3

# We must be able to import youtube_dl
"
update.py,"# Check if there is a new version

# Download and check versions info

# sys.executable is set to the full pathname of the exe-file for py2exe

# though symlinks are not followed so that we need to do this manually

# with help of realpath

# Py2EXE

# Continues to run in the background

# Do not show premature success messages

# Zip unix package
'''
@echo off
echo Waiting for file handle to be closed ...
ping 127.0.0.1 -n 5 -w 1000 > NUL
move /Y ""%s.new"" ""%s"" > NUL
echo Updated youtube-dl to version %s.
start /b """" cmd /c del ""%%~f0""&exit /b""
                \n'''""""""Update the program file with the latest version from the repository""""""

"
uplynk.py,"# coding: utf-8

# m3u8 download
"
urort.py,"# coding: utf-8

#!/Band/(?P<id>[^/]+)$'


#!/Band/Gerilja',

# To test, we want just one video
"
urplay.py,"# coding: utf-8
"
usanetwork.py,"# coding: utf-8

# m3u8 download
"
usatoday.py,"# coding: utf-8

#]+)'

# Brightcove Partner ID = 29906170001

# ui-video-data[asset_metadata][items][brightcoveaccount] = 28911775001
"
ustream.py,"# From http://sportscanada.tv/canadagames/index.php/week2/figure-skating/444

# Title and uploader available only from params JSON

# m3u8 download

# Sometimes the return dict does not have 'stream'

# Use only one provider to avoid too many formats

# TODO: generate a MPD doc for external players?

# some sites use this embed format (see: https://github.com/ytdl-org/youtube-dl/issues/2990)

# m3u8_native leads to intermittent ContentTooShortError

# DASH streams handling is incomplete as 'url' is missing
'''
            # DASH streams handling is incomplete as 'url' is missing
            dash_streams = self._get_streams(url, video_id, app_id_ver=(3, 1))
            if dash_streams:
                formats.extend(self._parse_segmented_mp4(dash_streams))
            '''

"
ustudio.py,"#&]+)'
"
utils.py,"#!/usr/bin/env python

# coding: utf-8


# ""Register"" SOCKS protocols

# In Python < 2.6.5, urlsplit() suffers from bug https://bugs.python.org/issue7904

# URLs with protocols not in urlparse.uses_netloc are not handled correctly

# This is not clearly defined otherwise

# Timezone names for RFC2822 obs-zone

# From https://github.com/python/cpython/blob/3.11/Lib/email/_parseaddr.py#L36-L42

# Atlantic (used in Canada)

# Eastern

# Central

# Mountain

# Pacific

# needed for sanitizing filenames in restricted mode

# os.path.basename returns a bytes object, but NamedTemporaryFile

# will fail if the filename contains non ascii characters unless we

# use a unicode object

# the same for os.path.dirname

# In Python 2.x, json.dump expects a bytestream.

# In Python 3.x, it writes to a character stream

# Need to remove existing file on Windows, else os.rename raises

# WindowsError or FileExistsError.

# On python2.6 the xml.etree.ElementTree.Element methods don't support

# the namespace parameter



# Older Python may throw HTMLParseError in case of malformed HTML

# Convenience for sanitizing descriptions etc.

# Newline vs <br />

# Strip html tags

# Replace html entities

# In case of error, try to remove win32 forbidden chars

# An exception here should be caught in the caller

#' or char.isspace()):

# Replace look-alike Unicode glyphs

# Handle timestamps

# Common case of ""Foreign band name - English song title""

#', path_part)

# Prepend protocol-less URLs with `http:` scheme in order to mitigate

# the number of unwanted failures due to missing protocol

# Fix some common typos seen so far

# https://github.com/ytdl-org/youtube-dl/issues/15649

# https://bx1.be/lives/direct-tv/

# Known non-numeric HTML entity

# TODO: HTML5 allows entities without a semicolon. For example,

# '&Eacuteric' should be decoded as 'Éric'.

#(x[0-9a-fA-F]+|[0-9]+)', entity)

# See https://github.com/ytdl-org/youtube-dl/issues/7518

# Unknown entity in name, return its literal representation

# Including KeyboardInterrupt

# For subprocess calls, encode with locale encoding

# Refer to http://stackoverflow.com/a/9951851/35070

# Python 3 has a Unicode API

# Pass '' directly to use Unicode APIs on Windows 2000 and up

# (Detecting Windows NT 4 is tricky because 'major >= 4' would

# match Windows 9x series as well. Besides, NT 4 is obsolete.)

# Jython assumes filenames are Unicode strings though reported as Python 2.x compatible

# Legacy code that uses byte strings

# Uncomment the following line after fixing all post processors

# assert False, 'Internal error: %r should be of type %r, is %r' % (s, compat_str, type(s))

# https://www.rfc-editor.org/info/rfc7301

# From https://github.com/yt-dlp/yt-dlp/commit/2c6dcb65fb612fc5bc5c61937bf438d3c473d8d0

# Thanks @coletdjnz

# Some servers may (wrongly) reject requests if ALPN extension is not sent. See:

# https://github.com/python/cpython/issues/85140

# https://github.com/yt-dlp/yt-dlp/issues/3878

# Python < 2.7.10, not ssl.HAS_ALPN

# Python >= 3.4 or 2.7.9

# Python 2.7.8

# (create_default_context present but HTTPSHandler has no context=)

# Python < 3.4

# preserve original exception

# Both in bytes

# Parsing code and msg

# Working around python 2 bug (see http://bugs.python.org/issue17849) by limiting

# expected HTTP responses to meet HTTP/1.0 or later (see also

# https://github.com/ytdl-org/youtube-dl/issues/6727)

# This is to workaround _create_connection() from socket where it will try all

# address data from getaddrinfo() including IPv6. This filters the result from

# getaddrinfo() based on the source_address value.

# This is based on the cpython socket.create_connection() function.

# https://github.com/python/cpython/blob/master/Lib/socket.py#L691

# Explicitly break reference cycle

# Python 2.7+

# Python 2.6

# According to RFC 3986, URLs can not contain non-ASCII characters, however this is not

# always respected by websites, some tend to give out URLs with non percent-encoded

# non-ASCII characters (see telemb.py, ard.py [#3412])

# urllib chokes on URLs with non-ASCII characters (see http://bugs.python.org/issue3991)

# To work around aforementioned issue we will replace request's original URL with

# percent-encoded one

# Since redirects are also affected (e.g. http://www.southpark.de/alle-episoden/s18e09)

# the code of this workaround has been moved here from YoutubeDL.urlopen()

# Substitute URL if any change after escaping

# Capitalize is needed because of Python bug 2275: http://bugs.python.org/issue2275

# The dict keys are capitalized because of this bug by urllib

#' in req.get_full_url():

# Python 2.6 is brain-dead when it comes to fragments

#')[0]

#')[0]


# gzip

# There may be junk add the end of the file

# See http://stackoverflow.com/q/4928560/35070 for details

# deflate

# Percent-encode redirect URL of Location HTTP header to satisfy RFC 3986 (see

# https://github.com/ytdl-org/youtube-dl/issues/6457).

# As of RFC 2616 default charset is iso-8859-1 that is respected by python 3

# Remote DNS

# Python > 2.6

# python > 2.6

# python 3.x

#HttpOnly_'

# Netscape HTTP Cookie File

# This file is generated by youtube-dl.  Do not edit.


# Store session cookies with `expires` set to 0 instead of an empty

# string

# cookies.txt regards 'Set-Cookie: foo' as a cookie

# with no name, whereas http.cookiejar regards it as a

# cookie with no value.

# comments and empty lines are fine

#') or not line.strip():

# Session cookies are denoted by either `expires` field set to

# an empty string or 0. MozillaCookieJar only recognizes the former

# (see [1]). So we need force the latter to be recognized as session

# cookies on our own.

# Session cookies may be important for cookies-based authentication,

# e.g. usually, when user does not check 'Remember me' check box while

# logging in on a site, some important cookies are stored as session

# cookies so that not recognizing them will result in failed login.

# 1. https://bugs.python.org/issue17164

# Treat `expires=0` cookies as session cookies

# Python 2 will choke on next HTTP request in row if there are non-ASCII

# characters in Set-Cookie HTTP header of last response (see

# https://github.com/ytdl-org/youtube-dl/issues/6769).

# In order to at least prevent crashing we will percent encode Set-Cookie

# header before HTTPCookieProcessor starts processing it.

# if sys.version_info < (3, 0) and response.headers:

#     for set_cookie_header in ('Set-Cookie', 'Set-Cookie2'):

#         set_cookie = response.headers.get(set_cookie_header)

#         if set_cookie:

#             set_cookie_escaped = compat_urllib_parse.quote(set_cookie, b""%/;:@&=+$,!~*'()?#[] "")

#             if set_cookie != set_cookie_escaped:

#                 del response.headers[set_cookie_header]

#                 response.headers[set_cookie_header] = set_cookie_escaped

# Strictly (according to RFC 2616), 301 or 302 in response to

# a POST MUST NOT cause a redirection without confirmation

# from the user (of urllib.request, in this case).  In practice,

# essentially all clients do redirect in this case, so we do

# the same.


# On python 2 urlh.geturl() may sometimes return redirect URL

# as byte string instead of unicode. This workaround allows

# to force it always return unicode.

# Be conciliant with URIs containing a space.  This is mainly

# redundant with the more complete encoding done in http_error_302(),

# but it is kept for compatibility with other callers.

# NB: don't use dict comprehension for python 2.6 compatibility

# >=8 char non-TZ prefix, if present

# just the UTC Z, or

# preceded by 4 digits or hh:mm or

# not preceded by 3 alpha word or >= 4 alpha or 2 digits

# optional space

# +/-

# hh[:]mm

# Replace commas

# Remove AM/PM + timezone

# Remove AM/PM + timezone

# Remove unrecognized timezones from ISO 8601 alike timestamps

# Python only supports microseconds, so remove nanoseconds

# Try extract ext from URLs like http://example.com/foo/bar.mp4/?download

# A bad approximation?

# Adapted from http://stackoverflow.com/a/3259271/35070


# If the output stream doesn't have a fileno, it's virtual

# Some strange Windows pseudo files?

# We just wrote a non-BMP character

# Python 2 lies about mode of sys.stderr

# Python 3

# Cross-platform file locking

# hFile

# dwFlags

# dwReserved

# nNumberOfBytesToLockLow

# nNumberOfBytesToLockHigh

# Overlapped

# hFile

# dwReserved

# nNumberOfBytesToLockLow

# nNumberOfBytesToLockHigh

# Overlapped

# Some platforms, such as Jython, is missing fcntl

# We may get a filename encoded with 'encodeFilename'

#' + sdata



#__youtubedl_smuggle' not in smug_url:

#')

# The lower-case forms are of course incorrect and unofficial,

# but we support those too

#x[0-9a-fA-F]{,4};|#[0-9]{,4};)',

# ctypes in Jython is not complete

# http://bugs.jython.org/issue2148

# LoadLibrary in Windows Python 2.7.13 only expects

# a bytestring, but since unicode_literals turns

# every string into a unicode string, it fails.

# Strange libc, just skip this



#&]+/', url).group()



# STDIN should be redirected too. On UNIX-like systems, ffmpeg triggers

# SIGTTOU if youtube-dl is run in the background.

# See https://github.com/ytdl-org/youtube-dl/issues/955#issuecomment-209789656

# Python 2.x

# reproduce `raise from`

# kwarg-only

# We need to consume the entire iterable to iterate in reverse

# Discard the emptied iterable to make it pickle-able

# We need to consume the entire iterable to be able to slice from the end

# Obviously, never use this with infinite iterables

# repr and str should mimic a list. So we exhaust the iterable

# This is only useful for tests

# A little optimization - if current page is not ""full"", ie. does

# not contain page_size videos then we can assume that this page

# is the last one - there are no more ids on further pages -

# i.e. no need to query again.

# If we got the whole page, but the next page is not interesting,

# break out early as well

# ensure unicode: after quoting, it can always be converted

#[]""))



#', ';', ']')):

# RFC 2047 requires non-ASCII field names to be encoded, while RFC 7578

# suggests sending UTF-8 directly. Firefox sends UTF-8, too

# parameter defaults

# Get a short string representation for a subprocess command

# On python 2 error byte string must be decoded with proper

# encoding rather than ascii

# Per RFC 3003, audio/mpeg can be .mp1, .mp2 or .mp3. Here use .mp3 as

# it's the most popular one

# http://tools.ietf.org/html/rfc6381

# No limit set

# Content available for everyone

# If the original field is a string and matching comparisonvalue is

# a number we should respect the origin of the original field

# and process comparison value as a string (see

# https://github.com/ytdl-org/youtube-dl/issues/11082).

#styling', [

#style',

#styling',

# See http://www.loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt

# Replaced by he in 1989 revision

# Replaced by id in 1989 revision

# Replaced by yi in 1989 revision

# From http://data.okfn.org/data/core/country-list

# Major IPv4 address blocks per country

# Set default handlers

# No Proxy

# youtube-dl's http/https handlers do wrapping the socket with socks

# Both long_to_bytes and bytes_to_long are adapted from PyCrypto, which is

# released into Public Domain

# https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/Util/number.py#L387


# after much testing, this algorithm was deemed to be the fastest

# strip off leading zeros

# only happens when n == 0

# add back some pad bytes.  this could be done more efficiently w.r.t. the

# de-padding being done above, but sigh...

#1 scheme


#1 padding')


#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~''', 47)



# Based on png2str() written by @gdkchan and improved by @yokrysty

# Originally posted at https://github.com/ytdl-org/youtube-dl/issues/9706

# Reference: https://www.w3.org/TR/PNG/

# Skip CRC


# Sub

# Up

# Average

# Paeth

# This mess below finds the best xattr tool for the job

# try the pyxattr module...

# pyxattr

# Unicode arguments are not supported in python-pyxattr until

# version 0.5.0

# See https://github.com/ytdl-org/youtube-dl/issues/5498

# TODO: fallback to CLI tools

# xattr

# Write xattrs to NTFS Alternate Data Streams:

# http://en.wikipedia.org/wiki/NTFS#Alternate_data_streams_.28ADS.29

# On Unix, and can't find pyxattr, setfattr, or xattr.

# https://create.blubrry.com/resources/podcast-media-download-statistics/getting-started/

# http://analytics.podtrac.com/how-to-measure

# https://podcorn.com/analytics-prefix/

# https://podsights.com/docs/

# parameter defaults

# instant compat

# stand-in until compat_re_Match is added

# stand-in until casefold.py is added

# chain.from_iterable(['ABC', 'DEF']) --> A B C D E F

# parameter defaults
'''(?xs)
        <([a-zA-Z0-9:._-]+)
         (?:\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]*|=""[^""]*""|='[^']*'|))*?
         \s+%s=['""]?%s['""]?
         (?:\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]*|=""[^""]*""|='[^']*'|))*?
        \s*>
        (?P<content>.*?)
        </\1>
    '''
'''# Netscape HTTP Cookie File
# This file is generated by youtube-dl.  Do not edit.

'''

'''(?x)
            ^.{8,}?                                              # >=8 char non-TZ prefix, if present
            (?P<tz>Z|                                            # just the UTC Z, or
                (?:(?<=.\b\d{4}|\b\d{2}:\d\d)|                   # preceded by 4 digits or hh:mm or
                   (?<!.\b[a-zA-Z]{3}|[a-zA-Z]{4}|..\b\d\d))     # not preceded by 3 alpha word or >= 4 alpha or 2 digits
                   [ ]?                                          # optional space
                (?P<sign>\+|-)                                   # +/-
                (?P<hours>[0-9]{2}):?(?P<minutes>[0-9]{2})       # hh[:]mm
            $)
        '''
'''(?ix)(?:P?
                (?:
                    [0-9]+\s*y(?:ears?)?\s*
                )?
                (?:
                    [0-9]+\s*m(?:onths?)?\s*
                )?
                (?:
                    [0-9]+\s*w(?:eeks?)?\s*
                )?
                (?:
                    (?P<days>[0-9]+)\s*d(?:ays?)?\s*
                )?
                T)?
                (?:
                    (?P<hours>[0-9]+)\s*h(?:ours?)?\s*
                )?
                (?:
                    (?P<mins>[0-9]+)\s*m(?:in(?:ute)?s?)?\s*
                )?
                (?:
                    (?P<secs>[0-9]+)(?P<ms>\.[0-9]+)?\s*s(?:ec(?:ond)?s?)?\s*
                )?Z?$'''
'''
    Encode a dict to RFC 7578-compliant form-data

    data:
        A dict where keys and values can be either Unicode or bytes-like
        objects.
    boundary:
        If specified a Unicode object, it's used as the boundary. Otherwise
        a random boundary is generated.

    Reference: https://tools.ietf.org/html/rfc7578
    '''

'''(?sx)^
            (?:window\.)?(?P<func_name>[a-zA-Z0-9_.$]*)
            (?:\s*&&\s*(?P=func_name))?
            \s*\(\s*(?P<callback_data>.*)\);?
            \s*?(?://[^\n]*)*$'''
'''(?sx)
        ""(?:[^""\\]*(?:\\\\|\\['""nurtbfx/\n]))*[^""\\]*""|
        '(?:[^'\\]*(?:\\\\|\\['""nurtbfx/\n]))*[^'\\]*'|
        {comment}|,(?={skip}[\]}}])|
        (?:(?<![0-9])[eE]|[a-df-zA-DF-Z_])[.a-zA-Z_0-9]*|
        \b(?:0[xX][0-9a-fA-F]+|0+[0-7]+)(?:{skip}:)?|
        [0-9]+(?={skip}:)|
        !+
        '''
'''(?x)\s*
        (?P<key>[a-z_]+)
        \s*(?P<op>%s)(?P<none_inclusive>\s*\?)?\s*
        (?:
            (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|
            (?P<quote>[""\'])(?P<quotedstrval>(?:\\.|(?!(?P=quote)|\\).)+?)(?P=quote)|
            (?P<strval>(?![0-9.])[a-z0-9A-Z]*)
        )
        \s*$
        '''
'''(?x)\s*
        (?P<op>%s)\s*(?P<key>[a-z_]+)
        \s*$
        '''
'''
    @param dfxp_data A bytes-like object containing DFXP data
    @returns A unicode object containing converted SRT data
    '''

'''
    Implement OHDave's RSA algorithm. See http://www.ohdave.com/rsa/

    Input:
        data: data to encrypt, bytes-like object
        exponent, modulus: parameter e and N of RSA algorithm, both integer
    Output: hex string of encrypted data

    Limitation: supports one block encryption only
    '''


'''!""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~'''
'''(?x)
        (?:
            (?:
                chtbl\.com/track|
                media\.blubrry\.com| # https://create.blubrry.com/resources/podcast-media-download-statistics/getting-started/
                play\.podtrac\.com
            )/[^/]+|
            (?:dts|www)\.podtrac\.com/(?:pts/)?redirect\.[0-9a-z]{3,4}| # http://analytics.podtrac.com/how-to-measure
            flex\.acast\.com|
            pd(?:
                cn\.co| # https://podcorn.com/analytics-prefix/
                st\.fm # https://podsights.com/docs/
            )/e
        )/'''""""""Get preferred encoding.

    Returns the best encoding scheme for the system, based on
    locale.getpreferredencoding() and some further tweaks.
    """"""

"""""" Encode obj as JSON and write it to fn, atomically if possible """"""


"""""" Find the xpath xpath[@key=val] """"""

""""""Return the content of the tag with the specified ID in the passed HTML document""""""

""""""Return the content of the first tag with the specified class in the passed HTML document""""""

""""""Return the content of all tags with the specified class in the passed HTML document as a list""""""

""""""Return the content of the tag with the specified attribute in the passed HTML document""""""


""""""Trivial HTML parser to gather the attributes for a single element""""""

""""""Given a string for an HTML element such as
    <el
         a=""foo"" B=""bar"" c=""&98;az"" d=boz
         empty= noval entity=""&amp;""
         sq='""' dq=""'""
    >
    Decode and return a dictionary of attributes.
    {
        'a': 'foo', 'b': 'bar', c: 'baz', d: 'boz',
        'empty': '', 'noval': None, 'entity': '&',
        'sq': '""', 'dq': '\''
    }.
    NB HTMLParser is stricter in Python 2.6 & 3.2 than in later versions,
    but the cases in the unit test will work for all of 2.6, 2.7, 3.2-3.5.
    """"""

""""""Clean an HTML snippet into a readable string""""""


""""""Try to open the given filename, and slightly tweak it if this fails.

    Attempts to open the given filename. If this fails, it tries to change
    the filename slightly, step by step, until it's either able to open it
    or it fails and raises a final exception, like the standard open()
    function.

    It returns the tuple (stream, definitive_file_name).
    """"""

""""""Convert RFC 2822 defined time string into system timestamp""""""

""""""Sanitizes a string so it could be used as part of a filename.
    If restricted is set, use a stricter subset of allowed characters.
    Set is_id if this is not an arbitrary string, but an ID that should be kept
    if possible.
    """"""

""""""Sanitizes and normalizes path on Windows""""""

""""""Expand shell variables and ~""""""

"""""" Remove all duplicates from the input iterable """"""

""""""Transforms an HTML entity to a character.""""""

""""""
    @param s The name of the file
    """"""


""""""Base exception for YoutubeDL errors.""""""

""""""Error during info extraction.""""""


"""""" tb, if given, is the original traceback (so that it can be printed out).
        If expected is set, this is a normal error message and most likely not a bug in youtube-dl.
        """"""


""""""Error when a regex didn't match""""""

""""""Geographic restriction Error exception.

    This exception may be thrown when a video is not available from your
    geographic location due to geographic restrictions imposed by a website.
    """"""

""""""Download Error exception.

    This exception may be thrown by FileDownloader objects if they are not
    configured to continue on errors. They will contain the appropriate
    error message.
    """"""


"""""" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). """"""

""""""Same File exception.

    This exception will be thrown by FileDownloader objects if they detect
    multiple files would have to be downloaded to the same file on disk.
    """"""

""""""Post Processing exception.

    This exception may be raised by PostProcessor's .run() method to
    indicate an error in the postprocessing task.
    """"""


"""""" --max-downloads limit has been reached. """"""

""""""Unavailable Format exception.

    This exception will be thrown when a video is requested
    in a format that is not available for that video.
    """"""

""""""Content Too Short exception.

    This exception may be raised by FileDownloader objects when a file they
    download is too small for what the server announced first, indicating
    the connection was probably interrupted.
    """"""


""""""Handler for HTTP requests and responses.

    This class, when installed with an OpenerDirector, automatically adds
    the standard headers to every HTTP request and handles gzipped and
    deflated responses from web servers. If compression is to be avoided in
    a particular request, the original request in the program code only has
    to include the HTTP header ""Youtubedl-no-compression"", which will be
    removed before making the real request.

    Part of this code was copied from:

    http://techknack.net/python-urllib2-handlers/

    Andrew Rowls, the author of that code, agreed to release it to the
    public domain.
    """"""


""""""
    See [1] for cookie file format.

    1. https://curl.haxx.se/docs/http-cookies.html
    """"""

""""""
        Save cookies to a file.

        Most of the code is taken from CPython 3.8 and slightly adapted
        to support cookie files with UTF-8 in both python 2 and 3.
        """"""

""""""Load cookies from a file.""""""

""""""YoutubeDL redirect handler

    The code is based on HTTPRedirectHandler implementation from CPython [1].

    This redirect handler solves two issues:
     - ensures redirect URL is always unicode under python 2
     - introduces support for experimental HTTP response status code
       308 Permanent Redirect [2] used by some sites [3]

    1. https://github.com/python/cpython/blob/master/Lib/urllib/request.py
    2. https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308
    3. https://github.com/ytdl-org/youtube-dl/issues/28768
    """"""


""""""Return a Request or None in response to a redirect.

        This is called by the http_error_30x methods when a
        redirection response is received.  If a redirection should
        take place, return a new Request to allow http_error_30x to
        perform the redirect.  Otherwise, raise HTTPError if no-one
        else should try to handle this url.  Return None if you can't
        but another Handler might.
        """"""

"""""" Return a UNIX timestamp from the given date """"""


""""""Return a string with the date in the format YYYYMMDD""""""


""""""
    Return a datetime object from a string in the format YYYYMMDD or
    (now|today)[+-][0-9](day|week|month|year)(s)?""""""

""""""
    Convert a date in 'YYYYMMDD' format to 'YYYY-MM-DD' format""""""

""""""Represents a time interval between two dates""""""


""""""start and end must be strings in the format accepted by date""""""

""""""Returns a range that only contains the given day""""""

""""""Check if the date is in the range""""""

"""""" Returns the platform name as a compat_str """"""

"""""" Returns True if the string was written using special methods,
    False if it has yet to be written out.""""""

"""""" Pass additional data in a URL for internal use. """"""


"""""" Return the number of a month by (locale-independently) English name """"""


"""""" Return the number of a month by (locale-independently) English
        abbreviations """"""


""""""Replace all the '&' by '&amp;' in XML""""""

"""""" A more relaxed version of int_or_none """"""

"""""" Checks if the given binary is installed somewhere in PATH, and returns its name.
    args can be a list of arguments for a short output (like -version) """"""

"""""" Returns the version of the specified executable,
    or False if the executable is not present """"""

""""""Lazy immutable list from an iterable
    Note that slices of a LazyList are lists and not LazyList""""""


""""""Evaluate the entire iterable""""""

""""""Escape non-ASCII characters as suggested by RFC 3986""""""

""""""Escape URL as suggested by RFC 3986""""""

"""""" Get a numeric quality value out of a list of possible values """"""

"""""" Add ellipses to overly long strings """"""

"""""" Returns if youtube-dl can be updated with -U """"""

"""""" Returns True iff the content should be blocked """"""


"""""" Detect whether a file contains HTML by examining its first bytes. """"""


"""""" Render a list of rows, each as a list of values """"""

"""""" Filter a dictionary with a simple string syntax. Returns True (=passes filter) or false """"""


""""""Convert language code from ISO 639-1 to ISO 639-2/T""""""

""""""Convert language code from ISO 639-2/T to ISO 639-1""""""

""""""Convert an ISO 3166-2 country code to the corresponding full name""""""

""""""long_to_bytes(n:long, blocksize:int) : string
    Convert a long integer to a byte string.

    If optional blocksize is given and greater than zero, pad the front of the
    byte string with binary zeros so that the length is a multiple of
    blocksize.
    """"""

""""""bytes_to_long(string) : long
    Convert a byte string to a long integer.

    This is (essentially) the inverse of long_to_bytes().
    """"""

""""""
    Padding input data with PKCS#1 scheme

    @param {int[]} data        input data
    @param {int}   length      target length
    @returns {int[]}           padded data
    """"""

""""""
    Safely traverse nested `dict`s and `Sequence`s

    >>> obj = [{}, {""key"": ""value""}]
    >>> traverse_obj(obj, (1, ""key""))
    ""value""

    Each of the provided `paths` is tested and the first producing a valid result will be returned.
    The next path will also be tested if the path branched but no results could be found.
    Supported values for traversal are `Mapping`, `Sequence` and `re.Match`.
    A value of None is treated as the absence of a value.

    The paths will be wrapped in `variadic`, so that `'key'` is conveniently the same as `('key', )`.

    The keys in the path can be one of:
        - `None`:           Return the current object.
        - `str`/`int`:      Return `obj[key]`. For `re.Match, return `obj.group(key)`.
        - `slice`:          Branch out and return all values in `obj[key]`.
        - `Ellipsis`:       Branch out and return a list of all values.
        - `tuple`/`list`:   Branch out and return a list of all matching values.
                            Read as: `[traverse_obj(obj, branch) for branch in branches]`.
        - `function`:       Branch out and return values filtered by the function.
                            Read as: `[value for key, value in obj if function(key, value)]`.
                            For `Sequence`s, `key` is the index of the value.
        - `dict`            Transform the current object and return a matching dict.
                            Read as: `{key: traverse_obj(obj, path) for key, path in dct.items()}`.

        `tuple`, `list`, and `dict` all support nested paths and branches.

    @params paths           Paths which to traverse by.
    Keyword arguments:
    @param default          Value to return if the paths do not match.
    @param expected_type    If a `type`, only accept final values of this type.
                            If any other callable, try to call the function on each result.
    @param get_all          If `False`, return the first matching result, otherwise all matching ones.
    @param casesense        If `False`, consider string dictionary keys as case insensitive.

    The following are only meant to be used by YoutubeDL.prepare_outtmpl and are not part of the API

    @param _is_user_input    Whether the keys are generated from user input.
                            If `True` strings get converted to `int`/`slice` if needed.
    @param _traverse_string  Whether to traverse into objects as strings.
                            If `True`, any non-compatible object will first be
                            converted into a string and then traversed into.


    @returns                The result of the object traversal.
                            If successful, `get_all=True`, and the path branches at least once,
                            then a list of results is returned instead.
                            A list is always returned if the last path branches and no `default` is given.
    """"""

"
varzesh3.py,"# coding: utf-8
"
vbox7.py,"# coding: utf-8
'''(?x)
                    https?://
                        (?:[^/]+\.)?vbox7\.com/
                        (?:
                            play:|
                            (?:
                                emb/external\.php|
                                player/ext\.swf
                            )\?.*?\bvid=
                        )
                        (?P<id>[\da-fA-F]+)
                    '''
"
veehd.py,"# Seems VeeHD videos have multiple copies on several servers, all of

# whom have different MD5 checksums, so omit md5 field in all tests

# VeeHD seems to send garbage on the first request.

# See https://github.com/ytdl-org/youtube-dl/issues/2102

#playeriframe""\).attr\({src : ""(.+?)""',
"
veoh.py,"#_Watch)/(?P<id>(?:v|e|yapi-)[\da-zA-Z]+)'

"
version.py,
vesti.py,"# coding: utf-8

# m3u8 download

# m3u8 download

# m3u8 download

# m3u8 download

# m3u8 download

# rtmp download
"
vevo.py,"#]+)'''


# no genres available

# Another case available only via the webpage; using streams/streamsV3 formats

# Geo-restricted to Netherlands/Germany

# only in AuthenticateVideo videoVersions

# Some videos are only available via webpage (e.g.

# https://github.com/ytdl-org/youtube-dl/issues/9366)

#&]+)'

'''
    Accepts urls from vevo.com or in the format 'vevo:{id}'
    (currently used by MTVIE and MySpaceIE)
    '''

'''(?x)
        (?:https?://(?:www\.)?vevo\.com/watch/(?!playlist|genre)(?:[^/]+/(?:[^/]+/)?)?|
           https?://cache\.vevo\.com/m/html/embed\.html\?video=|
           https?://videoplayer\.vevo\.com/embed/embedded\?videoId=|
           https?://embed\.vevo\.com/.*?[?&]isrc=|
           vevo:)
        (?P<id>[^&?#]+)'''


'''(?xi)
                    _(?P<width>[0-9]+)x(?P<height>[0-9]+)
                    _(?P<vcodec>[a-z0-9]+)
                    _(?P<vbr>[0-9]+)
                    _(?P<acodec>[a-z0-9]+)
                    _(?P<abr>[0-9]+)
                    \.(?P<ext>[a-z0-9]+)'''"
vgtv.py,"# coding: utf-8

# obsolete URL schemas, kept in order to save one HTTP redirect

#!/)?(?:video|live)/|

# streamType: vod

#!/video/84196/hevnen-er-soet-episode-10-abu',

# streamType: wasLive

#!/live/100764/opptak-vgtv-foelger-em-kvalifiseringen',

# m3u8 download

# streamType: wasLive

#!/live/113063/direkte-v75-fra-solvalla',

# m3u8 download

#!/video/21039/trailer-sweatshop-i-can-t-take-any-more',

# m3u8 download

#!/video/100250/norling-dette-er-forskjellen-paa-1-divisjon-og-eliteserien',

#!/video/111084/de-nye-bysyklene-lettere-bedre-gir-stoerre-hjul-og-feste-til-mobil',

# geoblocked

#!/video/127205/inside-the-mind-of-favela-funk',

# URLs without the extra param induce an 404 error

#!/(?P<id>\d+)'

#!/86588',

#!/86255',
'''(?x)
                    (?:https?://(?:www\.)?
                    (?P<host>
                        %s
                    )
                    /?
                    (?:
                        (?:\#!/)?(?:video|live)/|
                        embed?.*id=|
                        a(?:rticles)?/
                    )|
                    (?P<appname>
                        %s
                    ):)
                    (?P<id>\d+)
                    '''"
vh1.py,"# coding: utf-8

# Clip

#|Scared Famous + Extended Preview',

# m3u8 download

#.]+)'

"
vice.py,"# coding: utf-8

# m3u8 download

# geo restricted to US

# m3u8 download

# AES-encrypted m3u8

# signature generation algorithm is reverse engineered from signatureGenerator in

# webpack:///../shared/~/vice-player/dist/js/vice-player.js in

# https://www.viceland.com/assets/common/js/web.vendor.bundle.js

# new JS is located here https://vice-web-statics-cdn.vice.com/vice-player/player-embed.js

#&]+)'

#]+)'


# AES-encrypted m3u8
'''{
  %s(locale: ""%s"", %s: ""%s""%s) {
    %s
  }
}'''
'''body
    locked
    rating
    thumbnail_url
    title'''
'''body
    id
    url'''
'''dek
    id
    title'''
'''body
    embed_code'''"
vidbit.py,
viddler.py,"# secret protected
"
videa.py,"# coding: utf-8

#&]+-|

#&]+)
'''(?x)
                    https?://
                        videa(?:kid)?\.hu/
                        (?:
                            videok/(?:[^/]+/)*[^?#&]+-|
                            (?:videojs_)?player\?.*?\bv=|
                            player/v/
                        )
                        (?P<id>[^?#&]+)
                    '''
"
videodetective.py,"# m3u8 download
"
videofyme.py,"#|$)'
"
videomore.py,"# coding: utf-8

#&]|\.(?:xml|json)|$)

#&]+)(?:/*|[?#&].*?)$'

# single video with og:video:iframe

# season single series with og:video:iframe

# single video without og:video:iframe

#&]+)(?:/*|[?#&].*?)$'
'''(?x)
                    videomore:(?P<sid>\d+)$|
                    https?://
                        (?:
                            videomore\.ru/
                            (?:
                                embed|
                                [^/]+/[^/]+
                            )/|
                            (?:
                                (?:player\.)?videomore\.ru|
                                siren\.more\.tv/player
                            )/[^/]*\?.*?\btrack_id=|
                            odysseus\.more.tv/player/(?P<partner_id>\d+)/
                        )
                        (?P<id>\d+)
                        (?:[/?#&]|\.(?:xml|json)|$)
                    '''
"
videopress.py,"# coding: utf-8

# 17+, requires birth_* params
"
vidio.py,"# coding: utf-8

#&]+)'
"
vidlii.py,"# coding: utf-8
"
vidme.py,"# tests uploader field

# nsfw test from http://naked-yogi.tumblr.com/post/118312946248/naked-smoking-stretching

# nsfw, user-disabled

# suspended

# deleted

# no formats in the API response

# Max possible limit according to https://docs.vid.me/#api-Videos-List
"
vier.py,"# coding: utf-8

# Requires account credentials but bypassed extraction via v3/embed page

# without metadata

# Without video id in URL
'''(?x)
                    https?://
                        (?:www\.)?(?P<site>vier|vijf)\.be/
                        (?:
                            (?:
                                [^/]+/videos|
                                video(?:/[^/]+)*
                            )/
                            (?P<display_id>[^/]+)(?:/(?P<id>\d+))?|
                            (?:
                                video/v3/embed|
                                embed/video/public
                            )/(?P<embed_id>\d+)
                        )
                    '''
"
viewlift.py,"#whilewewatch',

# invalid labels, 360p is better that 480p

#]+))' % ViewLiftBaseIE._DOMAINS_REGEX

# Film is not playable in your area.

# Film is not available.

# Was once Kaltura embed
"
viidea.py,"#?].*)?$'''


# m3u8 download

# video with invalid direct format links (HTTP 403)

# rtmp download

# event playlist

# multi part lecture

# Immediately return explicitly requested part or non event item

# It's probably a playlist
'''(?x)https?://(?:www\.)?(?:
            videolectures\.net|
            flexilearn\.viidea\.net|
            presentations\.ocwconsortium\.org|
            video\.travel-zoom\.si|
            video\.pomp-forum\.si|
            tv\.nil\.si|
            video\.hekovnik.com|
            video\.szko\.si|
            kpk\.viidea\.com|
            inside\.viidea\.net|
            video\.kiberpipa\.org|
            bvvideo\.si|
            kongres\.viidea\.net|
            edemokracija\.viidea\.com
        )(?:/lecture)?/(?P<id>[^/]+)(?:/video/(?P<part>\d+))?/*(?:[#?].*)?$'''

"
viki.py,"# coding: utf-8

# clip

# episode

# youtube external

# non-English description

# 720p is hidden in another MPD which can be found in the current manifest content

# Modify the URL to get 1080p
"
vimeo.py,"# coding: utf-8

# vimeo only supports https now, but the user can give an http url

# Bitrates are completely broken. Single m3u8 may contain entries in kbps and bps

# at the same time without actual units specified. This lead to wrong sorting.

# TODO: fix handling of 308 status code returned for live archive manifest requests

# _VALID_URL matches Vimeo URLs

#]+/?(?:$|[?#])|[^/]+/review/|ondemand/)

#].*)?$

#at=0',

#1197)',

# from https://www.ouya.tv/game/Pier-Solar-and-the-Great-Architects/

# contains original format

# only available via https://vimeo.com/channels/tributes/6213729 and

# not via https://vimeo.com/6213729

# redirects to ondemand extractor and should be passed through it

# for successful extraction

# source file returns 403: Forbidden

# requires passing unlisted_hash(a52724358e) to load_download_config request

# similar, but all numeric: ID must be 581039021, not 9603038895

# issue #29690

# these have to be provided but we don't care

# https://gettingthingsdone.com/workflowmap/

# vimeo embed with check-password page protected by Referer header

# Look for embedded (iframe) Vimeo player

# Look for embedded (swf embed) Vimeo player

# Look more for non-standard embedded Vimeo player

# some videos require portfolio_id to be present in player url

# https://github.com/ytdl-org/youtube-dl/issues/20070

# Retrieve video webpage to extract further information

#&]+)'

# ondemand video not available via https://vimeo.com/id

# requires Referer to be passed along with og:video:url

#]+)/?(?:$|[?#])'

# Try extracting href first since not all videos are available via

# short https://vimeo.com/id URL (e.g. https://vimeo.com/channels/tributes/6213729)

# More relaxed fallback

#/]))(?P<id>[^/]+)(?:/videos|[#?]|$)'

#]|/(?!video))'

# Set the header to get a partial html page with the ids,

# the normal page doesn't contain them.

#]|sort:)'
'''(?x)
                    https?://
                        (?:
                            (?:
                                www|
                                player
                            )
                            \.
                        )?
                        vimeo(?:pro)?\.com/
                        (?!(?:channels|album|showcase)/[^/?#]+/?(?:$|[?#])|[^/]+/review/|ondemand/)
                        (?:.*?/)??
                        (?:
                            (?:
                                play_redirect_hls|
                                moogaloop\.swf)\?clip_id=
                            )?
                        (?:videos?/)?
                        (?P<id>[0-9]+)
                        (?:/(?P<unlisted_hash>[\da-f]{10}))?
                        /?(?:[?&].*)?(?:[#].*)?$
                    '''
""""""Information extractor for vimeo.com.""""""

"
vimple.py,
vine.py,"# coding: utf-8

#lovesicktheseries  #lovesickseason2',

# DASH link returns plain mp4
"
viqeo.py,"# coding: utf-8
'''(?x)
                        (?:
                            viqeo:|
                            https?://cdn\.viqeo\.tv/embed/*\?.*?\bvid=|
                            https?://api\.viqeo\.tv/v\d+/data/startup?.*?\bvideo(?:%5B%5D|\[\])=
                        )
                        (?P<id>[\da-f]+)
                    '''
"
viu.py,"# coding: utf-8

# #EXT-X-BYTERANGE is not supported by native hls downloader

# and ffmpeg (#10955)

# hls_file = video_data.get('hlsfile')

# m3u8_url = re.sub(

#     r'(/hlsc_)[a-z]+(\d+\.m3u8)',

#     r'\1whe\2', video_data['href'])
"
vk.py,"# coding: utf-8

# vk serves two same remixlhk cookies in Set-Cookie header and expects

# first one to be actually set

# VIDEO NOW REMOVED

# please update if you find a video whose URL follows the same pattern

# video (removed?) only available with list id

# youtube embed

# dailymotion embed

# video key is extra_data not url\d+

# finished live stream, postlive_mp4

# TODO: use act=show to extract view_count

# 'view_count': int,

# live stream, hls and rtmp links, most likely already finished live

# stream by the time you are reading this comment

# removed video, just testing that we match the pattern

# age restricted video, requires vk account credentials

# pladform embed

# This video is no longer available, because its author has been blocked.

# The video is not available in your region.

# https://help.sibnet.ru/?sibnet_video_embed

# Some videos (removed?) can only be downloaded with list id specified

# 2 = live

# 3 = post live (finished live)

#&](?:.*?\bsection=(?P<section>\w+))?|$)'

# public page URL, audio playlist

# single YouTube embed, no leading -

# wall page URL

# mobile wall page URL

#')
'''(?x)
                    https?://
                        (?:
                            (?:
                                (?:(?:m|new)\.)?vk\.com/video_|
                                (?:www\.)?daxab.com/
                            )
                            ext\.php\?(?P<embed_query>.*?\boid=(?P<oid>-?\d+).*?\bid=(?P<id>\d+).*)|
                            (?:
                                (?:(?:m|new)\.)?vk\.com/(?:.+?\?.*?z=)?video|
                                (?:www\.)?daxab.com/embed/
                            )
                            (?P<videoid>-?\d+_\d+)(?:.*\blist=(?P<list_id>[\da-f]+))?
                        )
                    '''
"
vlive.py,"# coding: utf-8

# works only with gcc=KR

# uploadType = SOS

# uploadType = V

#%d' % page_num, {

# Large values of maxNumOfRows (~300 or above) may cause

# empty responses (see [1]), e.g. this happens for [2] that

# has more than 300 videos.

# 1. https://github.com/ytdl-org/youtube-dl/issues/13830

# 2. http://channels.vlive.tv/EDBF.
"
vodlocker.py,"# coding: utf-8

# they do detect when requests happen too fast!
"
vodpl.py,"# coding: utf-8
"
vodplatform.py,"# coding: utf-8

#]+)'

# from http://www.lbcgroup.tv/watch/chapter/29143/52844/%D8%A7%D9%84%D9%86%D8%B5%D8%B1%D8%A9-%D9%81%D9%8A-%D8%B6%D9%8A%D8%A7%D9%81%D8%A9-%D8%A7%D9%84%D9%80-cnn/ar
"
voicerepublic.py,
voot.py,"# coding: utf-8
"
voxmedia.py,"# coding: utf-8

# Volume embed, Youtube

# Volume embed, Youtube

# Volume embed, Youtube

# youtube embed

# SBN.VideoLinkset.entryGroup multiple ooyala embeds

# volume embed, Brightcove Once
"
vrak.py,"# coding: utf-8

# this is intentional
'''(?x)
                java\.lang\.String\s+value\s*=\s*[""']brightcove\.article\.\d+\.%s
                [^>]*
                java\.lang\.String\s+value\s*=\s*[""'](\d+)
            '''"
vrt.py,"# coding: utf-8

#]+)'
"
vrv.py,"# coding: utf-8

# https://tools.ietf.org/html/rfc5849#section-3

# m3u8 download

# movie listing
"
vshare.py,"# coding: utf-8

#&]+)'

#&]+)',
"
vtm.py,"# coding: utf-8

#]+)~v(?P<id>[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12})'

# TODO: fix url _type result processing

# 'series': 'Op Interventie',
'''{
  getComponent(type: Video, uuid: ""%s"") {
    ... on Video {
      description
      duration
      myChannelsVideo
      program {
        title
      }
      publishedAt
      title
    }
  }
}'''"
vube.py,
vuclip.py,"# These clowns alternate between two page types
'''value=""No.*?"" onClick=""location.href='([^""']+)'""'''"
vvvvid.py,"# coding: utf-8

#!)?(?:show|anime|film|series)/'

# video_type == 'video/vvvvid'

#!show/434/perche-dovrei-guardarlo-di-dario-moccia/437/489048/ping-pong',

# video_type == 'video/rcs'

#!show/376/death-note-live-action/377/482493/episodio-01',

# video_type == 'video/youtube'

# video_type == 'video/dash'

# vvvvid embed_info decryption algorithm is reverse engineered from function $ds(h) at vvvvid.js

#]+))?)/?(?:[?#&]|$)' % VVVVIDIE._VALID_URL_BASE
"
vyborymos.py,"# coding: utf-8

#precinct/|account/channels\?.*?\bstation_id=)(?P<id>\d+)'

#precinct/13636',
"
vzaar.py,"# coding: utf-8

# HTTP and HLS

# hlsAes = true

# m3u8 download

# with null videoTitle
"
wakanim.py,"# coding: utf-8

# DRM Protected

# https://docs.microsoft.com/en-us/azure/media-services/previous/media-services-content-protection-overview#streaming-urls
"
walla.py,"# coding: utf-8

# rtmp download
"
washingtonpost.py,"# coding: utf-8

#]+)'
'''(?x)
            (?:
                <div\s+class=""posttv-video-embed[^>]*?data-uuid=|
                data-video-uuid=
            )""([^""]+)""'''"
wat.py,"# coding: utf-8

# m3u8 download

# 'contentv4' is used in the website, but it also returns the related

# videos, we don't need them

# video_data = self._download_json(

#     'http://www.wat.tv/interface/contentv4s/' + video_id, video_id)
"
watchbox.py,"# coding: utf-8

# film

# episode
"
watchindianporn.py,"# coding: utf-8
"
wdr.py,"# coding: utf-8

# check if the metadata contains a direct URL to a file

#.]+)(?:/?|/index\.php5|\.php5)$'

# HDS download, MD5 is unstable

# m3u8 download

# Live stream, MD5 unstable

# m3u8 download

# Article with several videos


# for wdr.de the data-extension is in a tag with the class ""mediaLink""

# for wdr.de radio players, in a tag with the class ""wdrrPlayerPlayBtn""

# for wdrmaus, in a tag with the class ""videoButton"" (previously a link

# to the page in a multiline ""videoLink""-tag)

# metadata, or player JS with ['ref'] giving WDR id, or just media, perhaps

# Playlist (e.g. https://www1.wdr.de/mediathek/video/sendungen/aktuelle-stunde/aktuelle-stunde-120.html)

#(?P<id>.+)'

#elefantenkino_wippe',

# adaptive stream: unstable file MD5

# Table of Contents seems to always be at this address, so fetch it directly.

# The website fetches configurationJS.php5, which links to tableOfContentsJS.php5.

#) correct?',

# no such domain
'''(?sx)class=
                    (?:
                        ([""\'])(?:mediaLink|wdrrPlayerPlayBtn|videoButton)\b.*?\1[^>]+|
                        ([""\'])videoLink\b.*?\2[\s]*>\n[^\n]*
                    )data-extension=([""\'])(?P<data>(?:(?!\3).)+)\3
                    '''
'''(?x)
        https?://mobile-ondemand\.wdr\.de/
        .*?/fsk(?P<age_limit>[0-9]+)
        /[0-9]+/[0-9]+/
        (?P<id>[0-9]+)_(?P<title>[0-9]+)'''
"
webcaster.py,"# coding: utf-8

# http://video.khl.ru/quotes/393859
"
webofstories.py,"# coding: utf-8

# malformed og:title meta

# Sometimes og:title meta is malformed

#embedCode""\).html\(getEmbedCode\((.*?)\)',

# URL building, see: http://www.webofstories.com/scripts/player.js
"
weibo.py,"# coding: utf-8

# to get Referer url for genvisitor

# first visit

# to get Referer url for genvisitor
"
weiqitv.py,"# coding: utf-8
"
wistia.py,"# Some videos require this.

# with hls video

# https://wistia.com/support/embed-and-share/video-on-your-website
'''(?sx)
                    <div[^>]+class=([""'])(?:(?!\1).)*?\bwistia_async_(?P<id>[a-z0-9]{10})\b(?:(?!\1).)*?\1
                '''"
worldstarhiphop.py,
wsj.py,"# coding: utf-8

# a long list

# Thumbnails are conveniently in the correct format already

#&]+)'
'''(?x)
                        (?:
                            https?://video-api\.wsj\.com/api-video/player/iframe\.html\?.*?\bguid=|
                            https?://(?:www\.)?(?:wsj|barrons)\.com/video/(?:[^/]+/)+|
                            wsj:
                        )
                        (?P<id>[a-fA-F0-9-]{36})
                    '''
"
wwe.py,"#&]+)'

#&]+)'
"
xattrpp.py,"#

# More info about extended attributes for media:

#   http://freedesktop.org/wiki/CommonExtendedAttributes/

#   http://www.freedesktop.org/wiki/PhreedomDraft/

#   http://dublincore.org/documents/usageguide/elements.shtml

#

# TODO:

#  * capture youtube keywords and put them in 'user.dublincore.subject' (comma-separated)

#  * figure out which xattrs can be used for 'duration', 'thumbnail', 'resolution'

#


# Write the metadata to the file's xattrs

# 'user.xdg.comment':            'description',
"""""" Set extended attributes on downloaded file (if xattr support is found). """"""

"
xbef.py,
xboxclips.py,"# coding: utf-8
"
xfileshare.py,"# coding: utf-8

# based on openload_decode from 2bfeee69b976fe049761dd3012e30b637ee05a58

#403f3d[^""]*""[^>]*>([^<]+)<',  # streamin.to

# govid.me
"
xhamster.py,"# coding: utf-8

# empty seo, unavailable via new URL schema

# mobile site

# This video is visible for marcoalfa123456's friends only

# new URL schema

# Download link takes some time to be generated,

# skipping for now

# Old layout fallback


# Only a few videos have an description

#&]+)' % XHamsterIE._DOMAINS

# Paginated user profile

# Non-paginated user profile
'''(?x)
                    https?://
                        (?:.+?\.)?%s/
                        (?:
                            movies/(?P<id>[\dA-Za-z]+)/(?P<display_id>[^/]*)\.html|
                            videos/(?P<display_id_2>[^/]*)-(?P<id_2>[\dA-Za-z]+)
                        )
                    '''
'''file\s*:\s*(?P<q>[""'])(?P<mp4>.+?)(?P=q)'''
'''<a\s+href=(?P<q>[""'])(?P<mp4>.+?)(?P=q)\s+class=[""']mp4Thumb'''
'''<video[^>]+file=(?P<q>[""'])(?P<mp4>.+?)(?P=q)[^>]*>'''
'''[""']thumbUrl[""']\s*:\s*(?P<q>[""'])(?P<thumbnail>.+?)(?P=q)'''
'''<video[^>]+""poster""=(?P<q>[""'])(?P<thumbnail>.+?)(?P=q)[^>]*>'''"
xiami.py,"# coding: utf-8

#&]+)'

#&]+)'

#&]+)'

#&]+)'
"
ximalaya.py,"# coding: utf-8


# cover pics kyes like: cover_url', 'cover_url_142'
"
xminus.py,"# coding: utf-8

# The extension is unknown until actual downloading
"
xnxx.py,"# coding: utf-8
"
xstream.py,"# coding: utf-8
'''(?x)
                    (?:
                        xstream:|
                        https?://frontend\.xstream\.(?:dk|net)/
                    )
                    (?P<partner_id>[^/]+)
                    (?:
                        :|
                        /feed/video/\?.*?\bid=
                    )
                    (?P<id>\d+)
                    '''
"
xtube.py,"#]+)

# old URL schema

# FLV videos with duplicated formats

# new URL schema
'''(?x)
                        (?:
                            xtube:|
                            https?://(?:www\.)?xtube\.com/(?:watch\.php\?.*\bv=|video-watch/(?:embedded/)?(?P<display_id>[^/]+)-)
                        )
                        (?P<id>[^/?&#]+)
                    '''

"
xuite.py,"# coding: utf-8

# Audio

# Video with only one format

# Video with two formats

# Video with encoded media id

# from http://forgetfulbc.blogspot.com/2016/06/date.html

# /play/ URLs provide embedded video URL and more metadata
"
xvideos.py,"'''(?x)
                    https?://
                        (?:
                            (?:[^/]+\.)?xvideos2?\.com/video|
                            (?:www\.)?xvideos\.es/video|
                            flashservice\.xvideos\.com/embedframe/|
                            static-hw\.xvideos\.com/swf/xv-player\.swf\?.*?\bid_video=
                        )
                        (?P<id>[0-9]+)
                    '''
"
xxxymovies.py,
yahoo.py,"# coding: utf-8

#]*-[0-9]+(?:-[a-z]+)?)\.html)'

# Query result is embedded in webpage, but explicit request to video API fails with geo restriction

# ytwnews://cavideo/

# Contains both a Yahoo hosted video and multiple Youtube embeds

# m3u8 download

# geo restricted

# Headline page (w/ multiple BC playlists) ('news.yahoo.co.jp', 'headlines.yahoo.co.jp/videonews/', ...)

# Article page
'''{
  content(parameter: {contentId: ""%s"", logicaAgent: PC_WEB}) {
    video {
      delivery {
        id
      }
      title
    }
  }
}'''""""""Get a specified number of results for a query""""""
"
yandexdisk.py,"# coding: utf-8

#&]+)'''


# TODO: figure out how to detect if download limit has

# been reached and then avoid unnecessary source format

# extraction requests
'''(?x)https?://
        (?P<domain>
            yadi\.sk|
            disk\.yandex\.
                (?:
                    az|
                    by|
                    co(?:m(?:\.(?:am|ge|tr))?|\.il)|
                    ee|
                    fr|
                    k[gz]|
                    l[tv]|
                    md|
                    t[jm]|
                    u[az]|
                    ru
                )
        )/(?:[di]/|public.*?\bhash=)(?P<id>[^/?#&]+)'''

"
yandexmusic.py,"# coding: utf-8

# 'skip': 'Travis CI servers blocked by YandexMusic',

# multiple disks

# 'skip': 'Travis CI servers blocked by YandexMusic',

# tracks dictionary shipped with playlist.jsx API is limited to 150 tracks,

# missing tracks should be retrieved manually.

# Request missing tracks in chunks to avoid exceeding max HTTP header size,

# see https://github.com/ytdl-org/youtube-dl/issues/27355

# 'skip': 'Travis CI servers blocked by YandexMusic',

# 'skip': 'Travis CI servers blocked by YandexMusic',

# empty artists

# 'skip': 'Travis CI servers blocked by YandexMusic',

# playlist exceeding the limit of 150 tracks (see

# https://github.com/ytdl-org/youtube-dl/issues/6666)

# 'skip': 'Travis CI servers blocked by YandexMusic',

# 'skip': 'Travis CI servers blocked by YandexMusic',

# 'skip': 'Travis CI servers blocked by YandexMusic',
"
yandexvideo.py,"# coding: utf-8

# vod-episode, series episode

# episode, sports

# DASH with DRM
'''(?x)
                    https?://
                        (?:
                            yandex\.ru(?:/(?:portal/(?:video|efir)|efir))?/?\?.*?stream_id=|
                            frontend\.vh\.yandex\.ru/player/
                        )
                        (?P<id>(?:[\da-f]{32}|[\w-]{12}))
                    '''

'''{
  player(content_id: ""%s"") {
    computed_title
    content_url
    description
    dislikes
    duration
    likes
    program_title
    release_date
    release_date_ut
    release_year
    restriction_age
    season
    start_time
    streams
    thumbnail
    title
    views_count
  }
}'''"
yapfiles.py,"# coding: utf-8

# with hd

# without hd
"
yesjapan.py,"# coding: utf-8

#20 - WA And GA Particle Usages',

# attempt to resolve the final URL in order to get a proper extension
"
yinyuetai.py,"# coding: utf-8

# though URLs ends with .flv, the downloaded files are in fact mp4
"
ynet.py,"# coding: utf-8
"
youjizz.py,"#?]*-(?P<id>\d+)\.html|embed/(?P<embed_id>\d+))'

# YouJizz's HTML5 player has invalid HTML
"
youku.py,"# coding: utf-8

# MD5 is unstable

# /play/get.json contains streams with ""channel_type"":""tail""

# The etag header is '""foobar""'; let's remove the double quotes

# request basic data

# get video title

# Episode number not starting from 1

# Ongoing playlist. The initial page is the last one

#  No data-id value.

#  Wrong number of reload_id.

# The first reload_id has the same items as first_page
'''(?x)
        (?:
            https?://(
                (?:v|player)\.youku\.com/(?:v_show/id_|player\.php/sid/)|
                video\.tudou\.com/v/)|
            youku:)
        (?P<id>[A-Za-z0-9]+)(?:\.html|/v\.swf|)
    '''

"
younow.py,"# coding: utf-8

#&]+)'

#&]+)'
"
youporn.py,"# coding: utf-8

#&]+))?'

# Unknown uploader

# Video URL's path looks like this:

#  /201012/17/505835/720p_1500k_505835/YouPorn%20-%20Sex%20Ed%20Is%20It%20Safe%20To%20Masturbate%20Daily.mp4

#  /201012/17/505835/vl_240p_240k_505835/YouPorn%20-%20Sex%20Ed%20Is%20It%20Safe%20To%20Masturbate%20Daily.mp4

#  /videos/201703/11/109285532/1080P_4000K_109285532.mp4

# We will benefit from it by extracting some metadata
'''(?s)<div[^>]+class=[""']videoInfo(?:Date|Time)\b[^>]*>(.+?)</div>'''"
yourporn.py,"#&.]+)'
"
yourupload.py,"# coding: utf-8
"
youtube.py,"# coding: utf-8


# If True it will raise an error if no login info is provided

# No authentication to be performed

# TODO: reverse actual botguard identifier generation algo

# SEND_SUCCESS - TFA code has been successfully sent to phone

# QUOTA_EXCEEDED - reached the limit of TFA codes

# invidious-redirect websites

# Invidious instances taken from https://github.com/iv-org/documentation/blob/master/Invidious-Instances.md

# http(s):// or protocol-independent URL

# the various hostnames, with wildcard subdomains

#/)?                                          # handle anchor (#/) redirect urls

# the various things that can precede the ID:

# v/ or embed/ or e/

# or the v= param in all its forms

# preceding watch(_popup|.php) or nothing (like /?v=xxxx)

#!?)                                  # the params delimiter ? or # or #!

# any other preceding param (like /?s=tuff&v=xxxx or ?s=tuff&amp;v=V36LpHqtcDY)

# just youtu.be/xxxx

# or vid.plus/xxxx

# or zwearz.com/watch/xxxx

# all until now is optional -> you can pass the naked ID

# here is it! the YouTube video ID

# if we found the ID, everything can follow

#1746)',

# DASH manifest with encrypted signature

# Controversy video

# Normal age-gate video (No vevo, embed allowed), available via embed page

# Age-gated video only available with authentication (unavailable

# via embed page workaround)

# video_info is None (https://github.com/ytdl-org/youtube-dl/issues/4421)

# YouTube Red ad is not captured for creator

# Olympics (https://github.com/ytdl-org/youtube-dl/issues/4431)

# Non-square pixels

# url_encoded_fmt_stream_map is empty string

# Extraction from multiple DASH manifests (https://github.com/ytdl-org/youtube-dl/pull/6097)

# DASH manifest with segment_list

# According to '<meta itemprop=""datePublished""', but in other places it's 20150510

# bestvideo

# Multifeed videos (multiple cameras), URL is for Main Camera

# Multifeed video with comma in title (see https://github.com/ytdl-org/youtube-dl/issues/8536)

# Title with JS-like syntax ""};"" (see https://github.com/ytdl-org/youtube-dl/issues/7468)

# Also tests cut-off URL expansion in video description (see

# https://github.com/ytdl-org/youtube-dl/issues/1892,

# https://github.com/ytdl-org/youtube-dl/issues/8164)

# Tags with '};' (see https://github.com/ytdl-org/youtube-dl/issues/7468)

# Video with yt:stretch=17:0

#14 Dicas De Ataque Para CV 4',

# Video with incomplete 'yt:stretch=16:'

# Video licensed under Creative Commons

# Channel-like uploader_url

# YouTube Red paid video (https://github.com/ytdl-org/youtube-dl/issues/10059)

# Rental video preview

# YouTube Red video with episode data

# The following content has been identified by the YouTube community

# as inappropriate or offensive to some audiences.

# itag 212

# geo restricted to JP

# from https://nitter.pussthecat.org/YouTube/status/1360363141947944964#m

# DRM protected

# Video with unsupported adaptive stream type formats

# Youtube Music Auto-generated description

# invalid -> valid video id redirection

# empty description results in an empty string

# with '};' inside yt initial data (see [1])

# see [2] for an example with '};' inside ytInitialPlayerResponse

# 1. https://github.com/ytdl-org/youtube-dl/issues/27093

# 2. https://github.com/ytdl-org/youtube-dl/issues/27216

#',

# another example of '};' in ytInitialData

# https://github.com/ytdl-org/youtube-dl/pull/28094

# controversial video, only works with bpctr when authenticated with cookies

# restricted location, https://github.com/ytdl-org/youtube-dl/issues/28685

# YT 'Shorts'

#Shorts',

# itag 36 videos are either 320x180 (BaW_jenozKc) or 320x240 (__2ABJjxzNo), abr varies as well

# 3D videos

# Apple HTTP Live Streaming

# DASH mp4 video

# Height can vary (https://github.com/ytdl-org/youtube-dl/issues/4559)

# Dash mp4 audio

# Dash webm

# itag 272 videos are either 3840x2160 (e.g. RtoitU2A-3E) or 7680x4320 (sLprVF6d7Ug)

# Dash webm audio

# Dash webm audio with opus inside

# RTMP (unnamed)

# av01 video only formats sometimes served with ""unknown"" codecs

# Hack for lazy extractors until more generic solution is implemented

# (see #28780)

# Read from filesystem cache

# Quelch pyflakes warnings - start will be set when step is set

# Obsolete patterns

# from yt-dlp

# See also:

# 1. https://github.com/ytdl-org/youtube-dl/issues/29326#issuecomment-894619419

# 2. https://code.videolan.org/videolan/vlc/-/blob/4fb284e5af69aa9ac2100ccbdd3b88debec9987f/share/lua/playlist/youtube.lua#L116

# 3. https://github.com/ytdl-org/youtube-dl/issues/30097#issuecomment-950157377

# give up if descrambling failed

# cpn generation algorithm is reverse engineered from base.js.

# In fact it works even with dummy cpn.

# Embedded YouTube player

# lazyYT YouTube embed

# Wordpress ""YouTube Video Importer"" plugin

# See https://github.com/ytdl-org/youtube-dl/issues/29333#issuecomment-864049544

# Unquote should take place before split on comma (,) since textual

# fields may contain comma as well (see

# https://github.com/ytdl-org/youtube-dl/issues/8536)

# FORMAT_STREAM_TYPE_OTF(otf=1) requires downloading the init fragment

# (adding `&sq=0` to the URL) and parsing emsg box to determine the

# number of fragment that would subsequently requested with (`&sq=N`)

# Youtube throttles chunks >~10M

# NB: float is intentional for forcing float division

#]+)', owner_profile_url, 'uploader id') if owner_profile_url else None,

#&]+)

# playlists, multipage

# playlists, multipage, different order

# playlists, series

# playlists, singlepage

# basic, single video playlist

# empty playlist

# Home tab

# Videos tab

# Videos tab, sorted by popular

# Playlists tab

# Community tab

# Channels tab

#651). As a bonus, the video #51 is also twice in this list.',

# even larger playlist, 8832 videos

# https://github.com/ytdl-org/youtube-dl/issues/21844

# Playlist URL that does not actually serve a playlist

# needs auth

# needs auth

# needs auth

# needs auth

# no longer available?

# inline playlist with not always working continuations

#cctv9',

#&])+',

# playlist

# video

# channel

# generic endpoint URL support

# TODO: add support for nested playlists so each shelf is processed

# as separate playlist

# TODO: this includes only first N items

# TODO

# Skipping links to another channels, note that checking for

# endpoint.commandMetadata.webCommandMetadata.webPageTypwebPageType == WEB_PAGE_TYPE_CHANNEL

# will not work

# Shelf may not contain shelf URL, fallback to extraction from content

# video attachment

# inline video links

# Downloading page may result in intermittent 5xx HTTP error

# that is usually worked around with a retry

#%d)' % count if count else ''),

# Inline playlist rendition continuation does not always work

# at Youtube side, so delegating regular tab-based playlist URL

# processing whenever possible.

# Handle both video/playlist URLs

# Fallback to video extraction if no playlist alike page is recognized.

# First check for the current video then try the v attribute of URL query.

# Capture and output alerts

# Failed to recognize

#673',

# music album playlist

# Hack for lazy extractors until more generic solution is implemented

# (see #28780)

# Videos only

# Videos only, sorted by date

# Do not list

# Do not list
'''(?x)
            (?:
                <iframe[^>]+?src=|
                data-video-url=|
                <embed[^>]+?src=|
                embedSWF\(?:\s*|
                <object[^>]+data=|
                new\s+SWFObject\(
            )
            ([""\'])
                (?P<url>(?:https?:)?//(?:www\.)?youtube(?:-nocookie)?\.com/
                (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)
            \1'''
'''(?x)<div[^>]+
            class=(?P<q1>[\'""])[^\'""]*\byvii_single_video_player\b[^\'""]*(?P=q1)[^>]+
            data-video_id=(?P<q2>[\'""])([^\'""]+)(?P=q2)'''
'''(?x)
                    https?://
                        (?:\w+\.)?
                        (?:
                            youtube(?:kids)?\.com|
                            invidio\.us
                        )/
                        (?:
                            (?:channel|c|user|feed|hashtag)/|
                            (?:playlist|watch)\?.*?\blist=|
                            (?!(?:watch|embed|v|e|results)\b)
                        )
                        (?P<id>[^/?\#&]+)
                    '''

'''(?x)(?:
                        (?:https?://)?
                        (?:\w+\.)?
                        (?:
                            (?:
                                youtube(?:kids)?\.com|
                                invidio\.us
                            )
                            /.*?\?.*?\blist=
                        )?
                        (?P<id>%(playlist_id)s)
                     )'''
'''(?x)
        (?:https?://)?
        (?:\w+\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie)?\.com/
        (?:watch\?(?:
            feature=[a-z_]+|
            annotation_id=annotation_[^&]+|
            x-yt-cl=[0-9]+|
            hl=[^&]*|
            t=[0-9]+
        )?
        |
            attribution_link\?a=[^&]+
        )
        $
    '''

""""""Provide base functions for Youtube extractors""""""

""""""
        Attempt to log in to YouTube.
        True is returned if successful or skipped.
        False is returned if login failed.

        If _LOGIN_REQUIRED is set and no authentication was provided, an error is raised.
        """"""

""""""(?x)^
                     (
                         (?:https?://|//)                                    # http(s):// or protocol-independent URL
                         (?:(?:(?:(?:\w+\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie|kids)?\.com|
                            (?:www\.)?deturl\.com/www\.youtube\.com|
                            (?:www\.)?pwnyoutube\.com|
                            (?:www\.)?hooktube\.com|
                            (?:www\.)?yourepeat\.com|
                            tube\.majestyc\.net|
                            %(invidious)s|
                            youtube\.googleapis\.com)/                        # the various hostnames, with wildcard subdomains
                         (?:.*?\#/)?                                          # handle anchor (#/) redirect urls
                         (?:                                                  # the various things that can precede the ID:
                             (?:(?:v|embed|e)/(?!videoseries))                # v/ or embed/ or e/
                             |shorts/
                             |(?:                                             # or the v= param in all its forms
                                 (?:(?:watch|movie)(?:_popup)?(?:\.php)?/?)?  # preceding watch(_popup|.php) or nothing (like /?v=xxxx)
                                 (?:\?|\#!?)                                  # the params delimiter ? or # or #!
                                 (?:.*?[&;])??                                # any other preceding param (like /?s=tuff&v=xxxx or ?s=tuff&amp;v=V36LpHqtcDY)
                                 v=
                             )
                         ))
                         |(?:
                            youtu\.be|                                        # just youtu.be/xxxx
                            vid\.plus|                                        # or vid.plus/xxxx
                            zwearz\.com/watch|                                # or zwearz.com/watch/xxxx
                            %(invidious)s
                         )/
                         |(?:www\.)?cleanvideosearch\.com/media/action/yt/watch\?videoId=
                         )
                     )?                                                       # all until now is optional -> you can pass the naked ID
                     (?P<id>[0-9A-Za-z_-]{11})                                # here is it! the YouTube video ID
                     (?(1).+)?                                                # if we found the ID, everything can follow
                     $""""""
"""""" Return a string representation of a signature """"""

""""""Turn the encrypted s field into a working signature""""""


""""""Compute the response to YT's ""n"" parameter challenge,
           or None

        Args:
        n_param     -- challenge string that is the value of the
                       URL's ""n"" query parameter
        player_url  -- URL of YT player JS
        video_id
        """"""


""""""Get a specified number of results for a query""""""

""""""
    Base class for feed extractors
    Subclasses must define the _FEED_NAME property.
    """"""
"
YoutubeDL.py,"#!/usr/bin/env python

# coding: utf-8


# Default parameters

# Unicode filesystem API will throw errors (#1474, #13027)

# short YouTube ID starting with dash?

# c_wchar_p() might not be necessary if `message` is

# already of type unicode()

# Save the title on stack

# Restore the title from stack

# if .trouble has been called from an except block

# For fields playlist_index and autonumber convert all occurrences

# of %(field)s to %(field)0Nd for backward compatibility

# Missing numeric fields used together with integer presentation types

# in format specification will break the argument substitution since

# string NA placeholder is returned for missing fields. We will patch

# output template for missing fields to meet string presentation type.

# As of [1] format syntax is:

#  %[mapping_key][conversion_flags][minimum_width][.precision][length_modifier]type

# 1. https://docs.python.org/2/library/stdtypes.html#string-formatting

# mapping key

#0\-+ ]+)?  # conversion flags (optional)

# minimum field width (optional)

# precision (optional)

# length modifier (optional)

# conversion type

# expand_path translates '%%' into '%' and '$$' into '$'

# correspondingly that is not what we want since we need to keep

# '%%' intact for template dict substitution step. Working around

# with boundary-alike separator hack.

# outtmpl should be expand_path'ed before template dict substitution

# because meta fields may contain env variables we don't want to

# be expanded. For example, for outtmpl ""%(title)s.%(ext)s"" and

# title ""Hello $PATH"", we don't want `$PATH` to be expanded.

# Temporary fix for #4787

# 'Treat' all problem characters by passing filename through preferredencoding

# to workaround encoding issues with subprocess on python2 @ Windows

# This can happen when we're just evaluating the playlist

# An error we somewhat expected

# Finished already (backwards compatibility; listformats and friends should be moved here)

# Backwards compatibility: old IE result format

# We have to add extra_info to the results because it may be

# contained in a playlist

# Use the information from the embedding page

# extract_info may return None when ignoreerrors is enabled and

# extraction failed with an error, don't crash and return early

# in this case

# Extracted info may not be a video result (i.e.

# info.get('_type', 'video') != video) but rather an url or

# url_transparent. In such cases outer metadata (from ie_result)

# should be propagated to inner one (info). For this to happen

# _type of info should be overridden with url_transparent. This

# fixes issue from https://github.com/ytdl-org/youtube-dl/pull/11163.

# Protect from infinite recursion due to recursively nested playlists

# (see https://github.com/ytdl-org/youtube-dl/issues/27833)

# We process each entry in the playlist

# For backwards compatibility, interpret -1 as whole list

# iterable

# This __x_forwarded_for_ip thing is a bit ugly but requires

# minimal changes

# TODO: skip failed (empty) entries?

# Remove operators that we don't use and join them with the surrounding strings

# for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'

# everything inside brackets will be handled by _parse_filter

# ENCODING is only defined in python 3.x

# ')' will be handled by the parentheses group

# for extractors with incomplete formats (audio only (soundcloud)

# or video only (imgur)) we will fallback to best/worst

# {video,audio}-only format

# The first format must contain the video and the

# second the audio

# Formats must be opposite (video+audio)

# It isn't part of a playlist

# Working around out-of-range timestamp values (e.g. negative ones on Windows,

# see http://bugs.python.org/issue1646728)

# Auto generate title fields corresponding to the *_number fields when missing

# in order to always have clean titles. This is very common for TV series.

# We now pick which formats have to be downloaded

# There's only one format available

# Filter out malformed formats for better extraction robustness

# We check that all the formats have the format and format_id fields

# Sanitize format_id from characters used in format selector expression

# Make sure all formats have unique format_id

# Automatically determine file extension if missing

# Automatically determine protocol if missing (useful for format

# selection purposes)

# Add HTTP headers, so that external programs can use them from the

# json output

# Remove private housekeeping stuff

# TODO Central sorting goes here


# only set the 'formats' fields if the original info_dict list them

# otherwise we end up with a circular reference, the first (and unique)

# element in the 'formats' field in info_dict is info_dict itself,

# which can't be exported to json

# While in format selection we may need to have an access to the original

# format set in order to calculate some metrics or do some processing.

# For now we need to be able to guess whether original formats provided

# by extractor are incomplete or not (i.e. whether extractor provides only

# video-only or audio-only formats) for proper formats selection for

# extractors with such incomplete formats (see

# https://github.com/ytdl-org/youtube-dl/pull/5556).

# Since formats may be filtered during format selection and may not match

# the original formats the results may be incorrect. Thus original formats

# or pre-calculated metrics should be passed to format selection routines

# as well.

# We will pass a context object containing all necessary additional data

# instead of just formats.

# This fixes incorrect format selection issue (see

# https://github.com/ytdl-org/youtube-dl/issues/10083).

# All formats are video-only or

# all formats are audio-only

# We update the info dict with the best quality format (backwards compatibility)

# For RTMP URLs, also include the playpath

# TODO: backward compatibility, to be removed

# Forced printings

# Do nothing else if in simulate mode

# subtitles download errors are already managed as troubles in relevant IE

# that way it will silently go on when used with unsupporting IE

# Use newline='' to prevent conversion of newline characters

# See https://github.com/ytdl-org/youtube-dl/issues/10268

# external_downloader_args was cleared because external_downloader was rejected

# Check extension

# TODO: Check acodec/vcodec

# Ensure filename always has a correct extension for successful merge

# Just a single file

# Fixup content

# avoid possible nugatory search for further items (PR #26638)

# It also downloads the videos

# FileInput doesn't have a read method, we can't call json.load

# Future-proof against any change in case

# and backwards compatibility with prior versions

# key in a playlist

# Try to find matching extractor for the URL and take its ie_key

# Incomplete video information


# Python 2.6 on SLES11 SP1 (https://github.com/ytdl-org/youtube-dl/issues/3326)

# Set HTTPS proxy to HTTP one if given (https://github.com/ytdl-org/youtube-dl/issues/805)

# When passing our own FileHandler instance, build_opener won't add the

# default FileHandler and allows us to disable the file protocol, which

# can be used for malicious purposes (see

# https://github.com/ytdl-org/youtube-dl/issues/8227)

# Delete the default user-agent header, which would otherwise apply in

# cases where our custom HTTP handler doesn't come into play

# (See https://github.com/ytdl-org/youtube-dl/issues/1309 for details)

# Already encoded


# No thumbnails present, so return immediately
'''
        Print the message to stderr, it will be prefixed with 'WARNING:'
        If stderr is a tty file the 'WARNING:' will be colored
        '''

'''
        Do the same as trouble, but prefixes the message with 'ERROR:', colored
        in red if stderr is a tty file.
        '''

'''(?x)
                        (?<!%)
                        %
                        \({0}\)  # mapping key
                        (?:[#0\-+ ]+)?  # conversion flags (optional)
                        (?:\d+)?  # minimum field width (optional)
                        (?:\.\d+)?  # precision (optional)
                        [hlL]?  # length modifier (optional)
                        [diouxXeEfFgGcrs%]  # conversion type
                    '''

'''Set the keys from extra_info in info dict if they are missing'''

'''(?x)\s*
            (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)
            \s*(?P<op>%s)(?P<none_inclusive>\s*\?)?\s*
            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)
            $
            '''
'''(?x)
                \s*(?P<key>ext|acodec|vcodec|container|protocol|format_id|language)
                \s*(?P<negation>!\s*)?(?P<op>%s)(?P<none_inclusive>\s*\?)?
                \s*(?P<value>[a-zA-Z0-9._-]+)
                \s*$
                '''""""""YoutubeDL class.

    YoutubeDL objects are the ones responsible of downloading the
    actual video file and writing it to disk if the user has requested
    it, among some other tasks. In most cases there should be one per
    program. As, given a video URL, the downloader doesn't know how to
    extract all the needed information, task that InfoExtractors do, it
    has to pass the URL to one of them.

    For this, YoutubeDL objects have a method that allows
    InfoExtractors to be registered in a given order. When it is passed
    a URL, the YoutubeDL object handles it to the first InfoExtractor it
    finds that reports being able to handle it. The InfoExtractor extracts
    all the information about the video or videos the URL refers to, and
    YoutubeDL process the extracted information, possibly using a File
    Downloader to download the video.

    YoutubeDL objects accept a lot of parameters. In order not to saturate
    the object constructor with arguments, it receives a dictionary of
    options instead. These options are available through the params
    attribute for the InfoExtractors to use. The YoutubeDL also
    registers itself as the downloader in charge for the InfoExtractors
    that are added to it, so this is a ""mutual registration"".

    Available options:

    username:          Username for authentication purposes.
    password:          Password for authentication purposes.
    videopassword:     Password for accessing a video.
    ap_mso:            Adobe Pass multiple-system operator identifier.
    ap_username:       Multiple-system operator account username.
    ap_password:       Multiple-system operator account password.
    usenetrc:          Use netrc for authentication instead.
    verbose:           Print additional info to stdout.
    quiet:             Do not print messages to stdout.
    no_warnings:       Do not print out anything for warnings.
    forceurl:          Force printing final URL.
    forcetitle:        Force printing title.
    forceid:           Force printing ID.
    forcethumbnail:    Force printing thumbnail URL.
    forcedescription:  Force printing description.
    forcefilename:     Force printing final filename.
    forceduration:     Force printing duration.
    forcejson:         Force printing info_dict as JSON.
    dump_single_json:  Force printing the info_dict of the whole playlist
                       (or video) as a single JSON line.
    simulate:          Do not download the video files.
    format:            Video format code. See options.py for more information.
    outtmpl:           Template for output names.
    outtmpl_na_placeholder: Placeholder for unavailable meta fields.
    restrictfilenames: Do not allow ""&"" and spaces in file names
    ignoreerrors:      Do not stop on download errors.
    force_generic_extractor: Force downloader to use the generic extractor
    nooverwrites:      Prevent overwriting files.
    playliststart:     Playlist item to start at.
    playlistend:       Playlist item to end at.
    playlist_items:    Specific indices of playlist to download.
    playlistreverse:   Download playlist items in reverse order.
    playlistrandom:    Download playlist items in random order.
    matchtitle:        Download only matching titles.
    rejecttitle:       Reject downloads for matching titles.
    logger:            Log messages to a logging.Logger instance.
    logtostderr:       Log messages to stderr instead of stdout.
    writedescription:  Write the video description to a .description file
    writeinfojson:     Write the video description to a .info.json file
    writeannotations:  Write the video annotations to a .annotations.xml file
    writethumbnail:    Write the thumbnail image to a file
    write_all_thumbnails:  Write all thumbnail formats to files
    writesubtitles:    Write the video subtitles to a file
    writeautomaticsub: Write the automatically generated subtitles to a file
    allsubtitles:      Downloads all the subtitles of the video
                       (requires writesubtitles or writeautomaticsub)
    listsubtitles:     Lists all available subtitles for the video
    subtitlesformat:   The format code for subtitles
    subtitleslangs:    List of languages of the subtitles to download
    keepvideo:         Keep the video file after post-processing
    daterange:         A DateRange object, download only if the upload_date is in the range.
    skip_download:     Skip the actual download of the video file
    cachedir:          Location of the cache files in the filesystem.
                       False to disable filesystem cache.
    noplaylist:        Download single video instead of a playlist if in doubt.
    age_limit:         An integer representing the user's age in years.
                       Unsuitable videos for the given age are skipped.
    min_views:         An integer representing the minimum view count the video
                       must have in order to not be skipped.
                       Videos without view count information are always
                       downloaded. None for no limit.
    max_views:         An integer representing the maximum view count.
                       Videos that are more popular than that are not
                       downloaded.
                       Videos without view count information are always
                       downloaded. None for no limit.
    download_archive:  File name of a file where all downloads are recorded.
                       Videos already present in the file are not downloaded
                       again.
    cookiefile:        File name where cookies should be read from and dumped to.
    nocheckcertificate:Do not verify SSL certificates
    prefer_insecure:   Use HTTP instead of HTTPS to retrieve information.
                       At the moment, this is only supported by YouTube.
    proxy:             URL of the proxy server to use
    geo_verification_proxy:  URL of the proxy to use for IP address verification
                       on geo-restricted sites.
    socket_timeout:    Time to wait for unresponsive hosts, in seconds
    bidi_workaround:   Work around buggy terminals without bidirectional text
                       support, using fridibi
    debug_printtraffic:Print out sent and received HTTP traffic
    include_ads:       Download ads as well
    default_search:    Prepend this string if an input url is not valid.
                       'auto' for elaborate guessing
    encoding:          Use this encoding instead of the system-specified.
    extract_flat:      Do not resolve URLs, return the immediate result.
                       Pass in 'in_playlist' to only show this behavior for
                       playlist items.
    postprocessors:    A list of dictionaries, each with an entry
                       * key:  The name of the postprocessor. See
                               youtube_dl/postprocessor/__init__.py for a list.
                       as well as any further keyword arguments for the
                       postprocessor.
    progress_hooks:    A list of functions that get called on download
                       progress, with a dictionary with the entries
                       * status: One of ""downloading"", ""error"", or ""finished"".
                                 Check this first and ignore unknown values.

                       If status is one of ""downloading"", or ""finished"", the
                       following properties may also be present:
                       * filename: The final filename (always present)
                       * tmpfilename: The filename we're currently writing to
                       * downloaded_bytes: Bytes on disk
                       * total_bytes: Size of the whole file, None if unknown
                       * total_bytes_estimate: Guess of the eventual file size,
                                               None if unavailable.
                       * elapsed: The number of seconds since download started.
                       * eta: The estimated time in seconds, None if unknown
                       * speed: The download speed in bytes/second, None if
                                unknown
                       * fragment_index: The counter of the currently
                                         downloaded video fragment.
                       * fragment_count: The number of fragments (= individual
                                         files that will be merged)

                       Progress hooks are guaranteed to be called at least once
                       (with status ""finished"") if the download is successful.
    merge_output_format: Extension to use when merging formats.
    fixup:             Automatically correct known faults of the file.
                       One of:
                       - ""never"": do nothing
                       - ""warn"": only emit a warning
                       - ""detect_or_warn"": check whether we can do anything
                                           about it, warn otherwise (default)
    source_address:    Client-side IP address to bind to.
    call_home:         Boolean, true iff we are allowed to contact the
                       youtube-dl servers for debugging.
    sleep_interval:    Number of seconds to sleep before each download when
                       used alone or a lower bound of a range for randomized
                       sleep before each download (minimum possible number
                       of seconds to sleep) when used along with
                       max_sleep_interval.
    max_sleep_interval:Upper bound of a range for randomized sleep before each
                       download (maximum possible number of seconds to sleep).
                       Must only be used along with sleep_interval.
                       Actual sleep time will be a random float from range
                       [sleep_interval; max_sleep_interval].
    listformats:       Print an overview of available video formats and exit.
    list_thumbnails:   Print a table of all thumbnails and exit.
    match_filter:      A function that gets called with the info_dict of
                       every video.
                       If it returns a message, the video is ignored.
                       If it returns None, the video is downloaded.
                       match_filter_func in utils.py is one example for this.
    no_color:          Do not emit color codes in output.
    geo_bypass:        Bypass geographic restriction via faking X-Forwarded-For
                       HTTP header
    geo_bypass_country:
                       Two-letter ISO 3166-2 country code that will be used for
                       explicit geographic restriction bypassing via faking
                       X-Forwarded-For HTTP header
    geo_bypass_ip_block:
                       IP range in CIDR notation that will be used similarly to
                       geo_bypass_country

    The following options determine which downloader is picked:
    external_downloader: Executable of the external downloader to call.
                       None or unset for standard (built-in) downloader.
    hls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv
                       if True, otherwise use ffmpeg/avconv if False, otherwise
                       use downloader suggested by extractor if None.

    The following parameters are not used by YoutubeDL itself, they are used by
    the downloader (see youtube_dl/downloader/common.py):
    nopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test,
    noresizebuffer, retries, continuedl, noprogress, consoletitle,
    xattr_set_filesize, external_downloader_args, hls_use_mpegts,
    http_chunk_size.

    The following options are used by the post processors:
    prefer_ffmpeg:     If False, use avconv instead of ffmpeg if both are available,
                       otherwise prefer ffmpeg.
    ffmpeg_location:   Location of the ffmpeg/avconv binary; either the path
                       to the binary or its containing directory.
    postprocessor_args: A list of additional command-line arguments for the
                        postprocessor.

    The following options are used by the Youtube extractor:
    youtube_include_dash_manifest: If True (default), DASH manifests and related
                        data will be downloaded and processed by extractor.
                        You can reduce network I/O by disabling it if you don't
                        care about DASH.
    """"""


""""""Create a FileDownloader object with the given options.""""""

""""""Add an InfoExtractor object to the end of the list.""""""

""""""
        Get an instance of an IE with name ie_key, it will try to get one from
        the _ies list, if there's no instance it will create a new one and add
        it to the extractor list.
        """"""

""""""
        Add the InfoExtractors returned by gen_extractors to the end of the list
        """"""

""""""Add a PostProcessor object to the end of the chain.""""""

""""""Add the progress hook (currently only for the file downloader)""""""

""""""Print message to stdout if not in quiet mode.""""""

""""""Print message to stdout if not in quiet mode.""""""

""""""Print message to stderr.""""""

""""""Determine action to take when a download problem appears.

        Depending on if the downloader has been configured to ignore
        download errors or not, this method may throw an exception or
        not when errors are found, after printing the message.

        tb, if given, is additional traceback information.
        """"""

""""""Report file has already been fully downloaded.""""""

""""""Generate the output filename.""""""

"""""" Returns None iff the file should be downloaded """"""


""""""
        Return a list with a dictionary for each video extracted.

        Arguments:
        url -- URL to extract

        Keyword arguments:
        download -- whether to download videos during extraction
        ie_key -- extractor key hint
        extra_info -- dictionary containing the extra values to add to each result
        process -- whether to resolve all unresolved references (URLs, playlist items),
            must be True for download to work.
        force_generic_extractor -- force using the generic extractor
        """"""


""""""
        Take the result of the ie(may be modified) and resolve all unresolved
        references (URLs, playlist items).

        It will also download the videos if 'download'.
        Returns the resolved ie_result.
        """"""

""""""Select the requested subtitles and their format""""""

""""""Process a single resolved IE result.""""""


""""""Download a given list of URLs.""""""

""""""Run all the postprocessors on the given file.""""""

"""""" Start an HTTP download """"""
"
zapiks.py,"# coding: utf-8
"
zattoo.py,"# coding: utf-8

# Will setup appropriate cookies

# Since regular videos are only available for 7 days and recorded videos

# are only available for a specific user, we cannot have detailed tests.
"
zdf.py,"# coding: utf-8

#&]+)\.html'

# Same as https://www.phoenix.de/sendungen/ereignisse/corona-nachgehakt/wohin-fuehrt-der-protest-in-der-pandemie-a-2050630.html

# Same as https://www.3sat.de/film/ab-18/10-wochen-sommer-108.html

# Same as https://www.phoenix.de/sendungen/dokumentationen/gesten-der-maechtigen-i-a-89468.html?ref=suche

# Same as https://www.3sat.de/film/spielfilm/der-hauptmann-100.html

# Same as https://www.3sat.de/wissen/nano/nano-21-mai-2019-102.html, equal media ids

#&]+)'
'''<div\b[^>]*?\sdata-plusbar-id\s*=\s*([""'])(?P<p_id>[\w-]+)\1[^>]*?\sdata-plusbar-url=\1(?P<url>%s)\1'''
'''(<a\b[^>]*?\shref\s*=[^>]+?\sdata-target-id\s*=\s*([""'])%s\2[^>]*>)'''"
zhihu.py,"# coding: utf-8
"
zingmp3.py,"# coding: utf-8
"
zoom.py,"# coding: utf-8
"
zsh-completion.py,"#!/usr/bin/env python
"
zype.py,"# coding: utf-8
"
__init__.py,
__main__.py,"#!/usr/bin/env python

# Execute with

# $ python youtube_dl/__main__.py (2.6+)

# $ python -m youtube_dl          (2.7+)


# direct call of __main__.py
"
