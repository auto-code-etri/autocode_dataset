cheatsheet.py,"#!/usr/bin/env python3
"
gitstatus.py,"#!/usr/bin/env python3

# get hash

# get tagname

# Re-use method from https://github.com/magicmonty/bash-git-prompt to get stashs count

# `git status --porcelain --branch` can collect all information

# branch, remote_branch, untracked, staged, changed, conflicts, ahead, behind

# Not a git repository


# collect git status information

#' and st[1] == '#':

# detached status

# current and remote branch info

# remote_branch = rest.split(' ')[0]

# ahead or behind
""""""return tagname if exists else hash""""""
"
proxy.py,"#!/usr/bin/env python3
""""""shell-proxy: no proxy configuration found.

Set `{env}` or create a config file at `{config}`
See the plugin README for more information."""""""
ssh-agent.py,"#!/usr/bin/env python3
"
ssh-proxy.py,"#!/usr/bin/env python3

# caveats: macOS built-in netcat command not supported proxy-type

# --proxy-type

# Supported protocols are 4 (SOCKS v4), 5 (SOCKS v5) and connect (HTTP proxy).

# Default SOCKS v5 is used.

# --proxy

# proxy-host:proxy-port

# host

# port

"
termcolor.py,"# coding: utf-8

# Copyright (c) 2008-2011 Volvox Development Team

#

# Permission is hereby granted, free of charge, to any person obtaining a copy

# of this software and associated documentation files (the ""Software""), to deal

# in the Software without restriction, including without limitation the rights

# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

# copies of the Software, and to permit persons to whom the Software is

# furnished to do so, subject to the following conditions:

#

# The above copyright notice and this permission notice shall be included in

# all copies or substantial portions of the Software.

#

# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN

# THE SOFTWARE.

#

# Author: Konstantin Lepa <konstantin.lepa@gmail.com>

""""""ANSI Color formatting for output in terminal.""""""


""""""Colorize text.

    Available text colors:
        red, green, yellow, blue, magenta, cyan, white.

    Available text highlights:
        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.

    Available attributes:
        bold, dark, underline, blink, reverse, concealed.

    Example:
        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])
        colored('Hello, World!', 'green')
    """"""

""""""Print colorize text.

    It accepts arguments of print function.
    """"""

"
update_emoji.py,"# Regexes

# regex_emoji will return, respectively:

# the code points, its type (status), the actual emoji, and its official name

#\s*(.*?)\s(\S.*).*$""

# regex_group returns the group of subgroup that a line opens

#\s*(group|subgroup):\s*(.*)$""


# emoji-char-definitions.zsh - Emoji definitions for oh-my-zsh emoji plugin

#

# This file is auto-generated by update_emoji.py. Do not edit it manually.

#

# This contains the definition for:

#   $emoji         - which maps character names to Unicode characters

#   $emoji_flags   - maps country names to Unicode flag characters using region

#                    indicators

#   $emoji_mod     - maps modifier components to Unicode characters

#   $emoji_groups  - a single associative array to avoid cluttering up the

#                    global namespace, and to allow adding additional group

#                    definitions at run time. The keys are the group names, and

#                    the values are whitespace-separated lists of emoji

#                    character names.


# Main emoji

# National flags

# Combining modifiers

# Emoji groups

#######

# Adding country codes

#######

# This is the only part of this script that relies on an external library

# (country_converter), and is hence commented out by default.

# You can uncomment it to have country codes added as aliases for flag

# emojis. (By default, when you install this extension, country codes are

# included as aliases, but not if you re-run this script without uncommenting.)

# Warning: country_converter is very verbose, and will print warnings all over

# your terminal.


# import country_converter as coco # pylint: disable=wrong-import-position

# cc = coco.CountryConverter()


# def country_iso(_all_names, _omz_name):

#     """""" Using the external library country_converter,

#         this function can detect the ISO2 and ISO3 codes

#         of the country. It takes as argument the array

#         with all the names of the emoji, and returns that array.""""""

#     omz_no_underscore = re.sub(r'_', r' ', _omz_name)

#     iso2 = cc.convert(names=[omz_no_underscore], to='ISO2')

#     if iso2 != 'not found':

#         _all_names.append(iso2)

#         iso3 = cc.convert(names=[omz_no_underscore], to='ISO3')

#         _all_names.append(iso3)

#     return _all_names



#######

# Helper functions

#######


#\*\w]', r'_', replace_ands)

# Special treatment by group and subgroup

# If the emoji is a flag, we strip ""flag"" from its name

# Special treatment by status

# Enables us to have every emoji combination,

# even the one that are not officially sanctionned

# and are implemented by, say, only one vendor

########

# Going through every line

########


# First, test if this line opens a group or subgroup

# Moving on...

# Second, test if this line references one emoji

# If this emoji has the same shortname as the preceding one

########

# Write to emoji-char-definitions.zsh

########


# Aliases for emojis are retrieved through the DB of Gemoji

# Retrieved on Aug 9 2019 from the following URL:

# https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json


# Let's begin writing to this file

# First, write every emoji down

# One emoji can be mapped to multiple names (aliases or country codes)

# Variable that indicates in which map the emoji will be located

# Adding country codes (Optional, see above)

# names_for_this_emoji = country_iso(names_for_this_emoji, _omz_name)


# Check if there is an alias available in the Gemoji DB

# And now we write to the definitions file

# Storing the emoji in defined subgroups for the next step

# Second, write the subgroups to the end of the file
""""""
Update Emoji.py
Refeshes OMZ emoji database based on the latest Unicode spec
""""""

""""""
# emoji-char-definitions.zsh - Emoji definitions for oh-my-zsh emoji plugin
#
# This file is auto-generated by update_emoji.py. Do not edit it manually.
#
# This contains the definition for:
#   $emoji         - which maps character names to Unicode characters
#   $emoji_flags   - maps country names to Unicode flag characters using region
#                    indicators
#   $emoji_mod     - maps modifier components to Unicode characters
#   $emoji_groups  - a single associative array to avoid cluttering up the
#                    global namespace, and to allow adding additional group
#                    definitions at run time. The keys are the group names, and
#                    the values are whitespace-separated lists of emoji
#                    character names.

# Main emoji
typeset -gAH emoji
# National flags
typeset -gAH emoji_flags
# Combining modifiers
typeset -gAH emoji_mod
# Emoji groups
typeset -gAH emoji_groups
""""""


"""""" Using the external library country_converter,
#         this function can detect the ISO2 and ISO3 codes
#         of the country. It takes as argument the array
#         with all the names of the emoji, and returns that array.""""""

"""""" Returns a ZSH-compatible Unicode string from the code point(s) """"""

"""""" Returns a reasonable snake_case name for the emoji. """"""

"""""" Does the regex work of snake_case """"""

"""""" Increment the short name by 1. If you get, say,
    'woman_detective_unqualified', it returns
    'woman_detective_unqualified_1', and then
    'woman_detective_unqualified_2', etc. """"""
"
