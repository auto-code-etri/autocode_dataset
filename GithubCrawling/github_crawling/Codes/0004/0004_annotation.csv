base58.py,"# for compatibility with following code...

# Python 3.x

# Bitcoin does a little leading-zero-compression:

# leading 0-bytes in the input become leading-1s

# Test case (from http://gitorious.org/bitcoin/python-base58.git)
'''
Bitcoin base58 encoding and decoding.

Based on https://bitcointalk.org/index.php?topic=1026.0 (public domain)
'''
"""""" encode v, which is a string of bytes, to base58.
    """"""

"""""" decode v into a string of len bytes
    """"""

""""""Return 32-bit checksum based on SHA256""""""

""""""b58encode a string, with 32-bit checksum""""""

""""""decode a base58 string, check and remove checksum""""""

"""""" Returns None if strAddress is invalid.  Otherwise returns integer version of address. """"""
"
bitrpc.py,"# ===== BEGIN USER SETTINGS =====

# if you do not set these you will be prompted for a password for every command

# ====== END USER SETTINGS ======


"
clean_mac_info_plist.py,"#!/usr/bin/env python

# Jonas Schnelli, 2013

# make sure the Cannacoin-Qt.app contains the right plist (including the right version)

# fix made because of serval bugs in Qt mac deployment (https://bugreports.qt-project.org/browse/QTBUG-21267)

"
extract_strings_qt.py,"#!/usr/bin/python

# message start

# xgettext -n --keyword=_ $FILES

#include <QtGlobal>

#ifdef __GNUC__

#define UNUSED __attribute__((unused))

#else

#define UNUSED

#endif
'''
Extract _(""..."") strings for translation and convert to Qt4 stringdefs so that
they can be picked up by Qt linguist.
'''
""""""
    Parse 'po' format produced by xgettext.
    Return a list of (msgid,msgstr) tuples.
    """"""

""""""#include <QtGlobal>
// Automatically generated by extract_strings.py
#ifdef __GNUC__
#define UNUSED __attribute__((unused))
#else
#define UNUSED
#endif
"""""""
gen_base58_test_vectors.py,"#!/usr/bin/env python

# 2012 Wladimir J. van der Laan

# Released under MIT License

# key types

# templates for valid sequences

# prefix, payload_size, suffix, metadata

#                                  None = N/A

# start with some manual edge-cases

# kinds of invalid vectors:

#   invalid prefix

#   invalid payload length

#   invalid (randomized) suffix (add random data)

#   corrupt checksum

# line corruption

# add random character to end

# replace random character in the middle
'''
Generate valid and invalid base58 address and private key test vectors.

Usage: 
    gen_base58_test_vectors.py valid 50 > ../../src/test/data/base58_keys_valid.json
    gen_base58_test_vectors.py invalid 50 > ../../src/test/data/base58_keys_invalid.json
'''

'''Check vector v for validity'''

'''Generate valid test vectors'''

'''Generate possibly invalid vector'''

'''Return True with P(p)'''

'''Generate invalid test vectors'''
"
linearize.py,"#!/usr/bin/python

#

# linearize.py:  Construct a linear, no-fork, best version of the blockchain.

#

#

# Copyright (c) 2013 The Bitcoin developers

# Distributed under the MIT/X11 software license, see the accompanying

# file COPYING or http://www.opensource.org/licenses/mit-license.php.

#


# skip comment lines

#', line)

# parse key=value lines
"
makeseeds.py,"#!/usr/bin/env python

#

# Generate pnSeed[] from Pieter's DNS seeder

#

"
make_spinner.py,"#!/usr/bin/env python

# W.J. van der Laan, 2011

# Make spinning .mng animation from a .png

# Requires imagemagick 6.7+
"
pyminer.py,"#!/usr/bin/python

#

# Copyright (c) 2011 The Bitcoin developers

# Distributed under the MIT/X11 software license, see the accompanying

# file COPYING or http://www.opensource.org/licenses/mit-license.php.

#


# decode work data hex string to binary

# the first 76b of 80b do not change

# decode 256-bit target value

# byte-swap and dword-swap

# pre-hash first 76b of block header

# encode 32-bit nonce value

# hash final 4b, the nonce value

# sha256 hash of sha256 hash

# quick test for winning solution: high 32 bits zero?

# convert binary hash to 256-bit Python long

# proof-of-work test:  hash < target

#				return (nonce + 1, nonce_bin)


# skip comment lines

#', line)

# parse key=value lines

# stagger threads

"
qt_translations.py,"#!/usr/bin/env python


# Helpful little script that spits out a comma-separated list of

# language codes for Qt icons that should be included

# in binary bitcoin distributions

"
setup.py,
spendfrom.py,"#!/usr/bin/env python

#

# Use the raw transactions API to spend bitcoins received on particular addresses,

# and send any change back to that same address.

#

# Example usage:

#  spendfrom.py  # Lists available funds

#  spendfrom.py --from=ADDRESS --to=ADDRESS --amount=11.00

#

# Assumes it will talk to a bitcoind or Bitcoin-Qt running

# on localhost.

#

# Depends on jsonrpc

#


#') != -1:

#')].strip() +""\n""

# 0/1 in config file, convert to True/False

# ServiceProxy is lazy-connect, so send an RPC command mostly to catch connection errors,

# but also make sure the bitcoind we're talking to is/isn't testnet:

# wallet is not encrypted

# listunspent doesn't give addresses, so:

# This code only deals with ordinary pay-to-bitcoin-address

# or pay-to-script-hash outputs right now; anything exotic is ignored.

# Feel free to improve this, this is good enough for my simple needs:

#

# Note:

# Python's json/jsonrpc modules have inconsistent support for Decimal numbers.

# Instead of wrestling with getting json.dumps() (used by jsonrpc) to encode

# Decimals, I'm casting amounts to float before sending them to bitcoind.

#  

# don't bother with zero or tiny change

# integer division rounds down

# Exercise for the reader: compute transaction priority, and

# warn if this is a very-low-priority transaction


# Keep asking for passphrase until they get it right
""""""Make sure json library being used does not lose precision converting BTC values""""""

""""""Return the default location of the bitcoin data directory""""""

""""""Read the bitcoin.conf file from dbdir, returns dictionary of settings""""""

""""""Connect to a bitcoin JSON-RPC server""""""
"
walletchangepass.py,
walletunlock.py,
