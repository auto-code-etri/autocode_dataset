sort.py,"#!/usr/bin/env python

# coding: utf-8


# First, we load the current README into memory

# Separating the 'table of contents' from the contents (blocks)

# ')

# ' + blocks[i] + '\n'


# Sorting the libraries

##'))

#':

##' + inner_blocks[i]

# Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file

# First, we load the current README into memory as an array of lines

# Then we cluster the lines together as blocks

# Each block represents a collection of lines that should be sorted

# This was done by assuming only links ([...](...)) are meant to be sorted

# Clustering is done by indentation

# Then all of the blocks are sorted individually

# And the result is written back to README.md

# Then we call the sorting method
""""""
    The approach taken is explained below. I decided to do it simply.
    Initially I was considering parsing the data into some sort of
    structure and then generating an appropriate README. I am still
    considering doing it - but for now this should work. The only issue
    I see is that it only sorts the entries at the lowest level, and that
    the order of the top-level contents do not match the order of the actual
    entries.

    This could be extended by having nested blocks, sorting them recursively
    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.
""""""

"
